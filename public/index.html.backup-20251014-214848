<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <title>Conjunto Aralia de Castilla - Firebase Edition v3.0</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- QR Code Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <!-- Firebase Adapter -->
    <script type="module" src="/firebase-adapter.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        'residente-azul': '#2563EB',      // Azul específico para residentes
                        'admin-verde': '#16A34A',         // Verde específico para administradores
                        'vigilante-naranja': '#EA580C'    // Naranja específico para vigilantes
                    }
                }
            }
        }
    </script>
    <style>
        /* Estilos personalizados para el calendario */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
        }

        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

        .calendar-day:hover {
            background-color: #f3f4f6;
        }

        .calendar-day.occupied {
            background-color: #fca5a5;
            color: #991b1b;
        }

        .calendar-day.available {
            background-color: #bbf7d0;
            color: #166534;
        }

        .calendar-day.selected {
            background-color: #3b82f6;
            color: white;
        }

        /* Estilos para chat */
        .chat-message {
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Estilos para temas */
        .dark .bg-white { background-color: #1f2937; }
        .dark .text-gray-900 { color: #f9fafb; }
        .dark .text-gray-600 { color: #d1d5db; }
        .dark .border-gray-200 { border-color: #374151; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">

<!-- Pantalla de Login -->
<div id="login-screen" class="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800">
    <div class="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md mx-4">
        <div class="text-center mb-8">
            <div class="bg-gradient-to-r from-blue-600 to-indigo-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-home text-2xl text-white"></i>
            </div>
            <h1 class="text-2xl font-bold text-gray-800 mb-2">Conjunto Aralia de Castilla</h1>
            <p class="text-gray-600">Sistema de Gestión Residencial Completo</p>
        </div>

        <form id="login-form" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                <div class="relative">
                    <input type="email" id="login-email" required value="car-cbs@hotmail.com"
                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pl-11"
                           placeholder="tu-email@ejemplo.com">
                    <i class="fas fa-envelope absolute left-3 top-3.5 text-gray-400"></i>
                </div>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Contraseña</label>
                <div class="relative">
                    <input type="password" id="login-password" required value="password1"
                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pl-11"
                           placeholder="Tu contraseña">
                    <i class="fas fa-lock absolute left-3 top-3.5 text-gray-400"></i>
                </div>
            </div>

            <button type="submit"
                    class="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-lg">
                <i class="fas fa-sign-in-alt mr-2"></i>Iniciar Sesión
            </button>
        </form>

        <!-- Usuarios Demo -->
        <div class="mt-6 text-xs text-gray-500">
            <p class="mb-2 text-center">Usuarios Demo:</p>
            <div class="grid grid-cols-1 gap-1">
                <button onclick="loginDemo('car-cbs@hotmail.com', 'password1')" class="text-left p-2 rounded hover:bg-gray-50">
                    <span class="w-3 h-3 bg-residente-azul rounded-full inline-block mr-2"></span>
                    Residente: car-cbs@hotmail.com
                </button>
                <button onclick="loginDemo('shayoja@hotmail.com', 'password2')" class="text-left p-2 rounded hover:bg-gray-50">
                    <span class="w-3 h-3 bg-admin-verde rounded-full inline-block mr-2"></span>
                    Administrador: shayoja@hotmail.com
                </button>
                <button onclick="loginDemo('car02cbs@gmail.com', 'password3')" class="text-left p-2 rounded hover:bg-gray-50">
                    <span class="w-3 h-3 bg-vigilante-naranja rounded-full inline-block mr-2"></span>
                    Vigilante: car02cbs@gmail.com
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Aplicación Principal -->
<div id="app" class="min-h-screen hidden">
    <!-- Header -->
    <header id="app-header" class="bg-white shadow-sm border-b sticky top-0 z-40">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center">
                    <div id="role-indicator" class="w-4 h-4 rounded-full mr-3"></div>
                    <h1 class="text-xl font-semibold text-gray-900">Conjunto Aralia de Castilla</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <!-- Toggle tema claro/oscuro -->
                    <button id="theme-toggle" onclick="toggleTheme()" class="text-gray-500 hover:text-gray-700 transition-colors">
                        <i id="theme-icon" class="fas fa-moon"></i>
                    </button>
                    <!-- Notificaciones -->
                    <div class="relative">
                        <button onclick="toggleNotifications()" class="text-gray-500 hover:text-gray-700 transition-colors">
                            <i class="fas fa-bell"></i>
                            <span id="notification-badge" class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden">0</span>
                        </button>
                        <div id="notifications-dropdown" class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-xl border hidden z-50">
                            <div class="p-4 border-b border-gray-200">
                                <h3 class="font-semibold text-gray-900">Notificaciones</h3>
                            </div>
                            <div id="notifications-list" class="max-h-64 overflow-y-auto">
                                <!-- Notificaciones se cargarán aquí -->
                            </div>
                        </div>
                    </div>
                    <span id="user-info" class="text-sm text-gray-600"></span>
                    <button onclick="logout()" class="text-gray-500 hover:text-red-600 transition-colors">
                        <i class="fas fa-sign-out-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Navegación por Tabs -->
    <nav id="tab-navigation" class="bg-white shadow-sm border-b sticky top-16 z-30">
        <div class="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8">
            <div class="relative flex items-center gap-1 sm:gap-2 py-2 sm:py-3">
                <!-- Botón Scroll Izquierda - Visible también en móvil -->
                <button id="scroll-left-btn" onclick="scrollTabs('left')"
                        class="flex flex-shrink-0 items-center justify-center w-7 h-7 sm:w-8 sm:h-8 bg-gray-100 hover:bg-gray-200 rounded-full transition shadow-sm">
                    <i class="fas fa-chevron-left text-gray-600 text-xs sm:text-sm"></i>
                </button>

                <!-- Contenedor con scroll horizontal mejorado para móvil -->
                <div id="tab-container" class="flex gap-1 sm:gap-2 overflow-x-auto flex-1 scrollbar-hide scroll-smooth snap-x snap-mandatory">
                    <!-- Las tabs se generarán dinámicamente según el rol -->
                </div>

                <!-- Botón Scroll Derecha - Visible también en móvil -->
                <button id="scroll-right-btn" onclick="scrollTabs('right')"
                        class="flex flex-shrink-0 items-center justify-center w-7 h-7 sm:w-8 sm:h-8 bg-gray-100 hover:bg-gray-200 rounded-full transition shadow-sm">
                    <i class="fas fa-chevron-right text-gray-600 text-xs sm:text-sm"></i>
                </button>
            </div>
        </div>
    </nav>

    <!-- Estilos para scrollbar personalizado y responsive -->
    <style>
        /* Ocultar scrollbar pero mantener funcionalidad */
        .scrollbar-hide {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
        .scrollbar-hide::-webkit-scrollbar {
            display: none;
        }

        /* Contenedor de tabs con límites apropiados */
        #tab-navigation {
            overflow: hidden;
        }

        /* Transición suave al hacer scroll con snap points */
        #tab-container {
            scroll-behavior: smooth;
            max-width: 100%;
            overflow-x: auto;
            overflow-y: hidden;
            -webkit-overflow-scrolling: touch; /* Scroll suave en iOS */
        }

        /* Asegurar que las pestañas no se compriman */
        #tab-container button {
            flex-shrink: 0;
            white-space: nowrap;
            scroll-snap-align: start;
        }

        /* Tamaños responsivos para tabs en móvil */
        @media (max-width: 640px) {
            #tab-container button {
                min-height: 2rem;
                font-size: 0.75rem;
                padding: 0.375rem 0.5rem !important;
            }
            #tab-container button i {
                font-size: 0.7rem;
                margin-right: 0.25rem !important;
            }
        }

        @media (min-width: 641px) {
            #tab-container button {
                min-height: 2.5rem;
            }
        }

        /* Botones de scroll con animación */
        #scroll-left-btn, #scroll-right-btn {
            transition: all 0.2s ease;
            z-index: 10;
        }
        #scroll-left-btn:hover, #scroll-right-btn:hover {
            transform: scale(1.1);
        }
        #scroll-left-btn:active, #scroll-right-btn:active {
            transform: scale(0.95);
        }

        /* Asegurar que el contenedor padre no se desborde */
        #tab-navigation .relative {
            overflow: visible;
        }

        /* Indicadores visuales de scroll disponible */
        #tab-container::before,
        #tab-container::after {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            width: 20px;
            pointer-events: none;
            transition: opacity 0.3s;
        }

        /* Gradiente izquierdo cuando hay scroll disponible */
        #tab-container.can-scroll-left::before {
            left: 0;
            background: linear-gradient(to right, rgba(255,255,255,0.9), transparent);
        }

        /* Gradiente derecho cuando hay scroll disponible */
        #tab-container.can-scroll-right::after {
            right: 0;
            background: linear-gradient(to left, rgba(255,255,255,0.9), transparent);
        }
    </style>

    <!-- Contenido Principal -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div id="content-area" class="min-h-screen">
            <div id="content">
                <!-- El contenido se carga dinámicamente -->
            </div>
        </div>
    </main>
</div>

<!-- Modales -->

<!-- Modal de Calendario para Reservas -->
<div id="calendar-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-900" id="calendar-title">Reservar Espacio</h3>
                    <button onclick="closeCalendarModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Calendario -->
                    <div>
                        <div class="flex justify-between items-center mb-4">
                            <button onclick="previousMonth()" class="text-gray-500 hover:text-gray-700">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <h4 id="calendar-month-year" class="font-semibold text-gray-900"></h4>
                            <button onclick="nextMonth()" class="text-gray-500 hover:text-gray-700">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>

                        <div class="border border-gray-200 rounded-lg overflow-hidden">
                            <!-- Encabezados de días de la semana -->
                            <div class="grid grid-cols-7 gap-1 bg-gray-100 p-2">
                                <div class="text-center font-semibold text-gray-600 text-xs">Dom</div>
                                <div class="text-center font-semibold text-gray-600 text-xs">Lun</div>
                                <div class="text-center font-semibold text-gray-600 text-xs">Mar</div>
                                <div class="text-center font-semibold text-gray-600 text-xs">Mié</div>
                                <div class="text-center font-semibold text-gray-600 text-xs">Jue</div>
                                <div class="text-center font-semibold text-gray-600 text-xs">Vie</div>
                                <div class="text-center font-semibold text-gray-600 text-xs">Sáb</div>
                            </div>
                            <!-- Días del mes se generarán dinámicamente -->
                            <div id="calendar-days" class="calendar-grid p-2"></div>
                        </div>
                    </div>

                    <!-- Horarios disponibles -->
                    <div>
                        <h4 class="font-semibold text-gray-900 mb-4">Horarios Disponibles</h4>
                        <div id="available-hours" class="grid grid-cols-2 gap-2">
                            <!-- Horarios se generarán dinámicamente -->
                        </div>

                        <div class="mt-6">
                            <h5 class="font-medium text-gray-900 mb-2">Datos de la Reserva</h5>
                            <div class="space-y-2 text-sm">
                                <p><span class="font-medium">Espacio:</span> <span id="selected-space"></span></p>
                                <p><span class="font-medium">Fecha:</span> <span id="selected-date">Selecciona una fecha</span></p>
                                <p><span class="font-medium">Hora:</span> <span id="selected-time">Selecciona una hora</span></p>
                            </div>

                            <div class="mt-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Observaciones (opcional)</label>
                                <textarea id="reservation-notes" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                          rows="3" placeholder="Describe el evento o actividad..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-6 pt-6 border-t">
                    <button onclick="closeCalendarModal()" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button onclick="confirmReservation()" id="confirm-reservation-btn"
                            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                            disabled>
                        Confirmar Reserva
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Pago -->
<div id="payment-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-900">Procesar Pago</h3>
                    <button onclick="closePaymentModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <div class="space-y-4">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="font-medium text-gray-900 mb-2">Detalles del Pago</h4>
                        <div class="text-sm space-y-1">
                            <p><span class="font-medium">Concepto:</span> <span id="payment-concept"></span></p>
                            <p><span class="font-medium">Monto:</span> <span id="payment-amount" class="text-lg font-bold text-green-600"></span></p>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Método de Pago</label>
                        <div class="space-y-2">
                            <label class="flex items-center">
                                <input type="radio" name="payment-method" value="efectivo" class="mr-2">
                                <i class="fas fa-money-bill text-green-600 mr-2"></i>
                                Efectivo
                            </label>
                            <label class="flex items-center">
                                <input type="radio" name="payment-method" value="nequi" class="mr-2">
                                <i class="fab fa-n text-purple-600 mr-2"></i>
                                Nequi
                            </label>
                            <label class="flex items-center">
                                <input type="radio" name="payment-method" value="pse" class="mr-2">
                                <i class="fas fa-university text-blue-600 mr-2"></i>
                                PSE
                            </label>
                            <label class="flex items-center">
                                <input type="radio" name="payment-method" value="tarjeta" class="mr-2">
                                <i class="fas fa-credit-card text-red-600 mr-2"></i>
                                Tarjeta Débito/Crédito
                            </label>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closePaymentModal()" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button onclick="processPayment()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                        <i class="fas fa-credit-card mr-2"></i>Procesar Pago
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Notificaciones -->
<div id="notification-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Información</h3>
                    <button onclick="closeNotificationModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="notification-content" class="space-y-4"></div>
                <div class="mt-6 flex justify-end">
                    <button onclick="closeNotificationModal()"
                            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Entendido
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Variables globales
let currentUser = null;
let currentTab = null;
let currentTheme = 'light';
let selectedSpace = null;
let selectedDate = null;
let selectedTime = null;
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let notifications = [];

// Configuración de colores por rol
const roleColors = {
    residente: 'bg-residente-azul',
    admin: 'bg-admin-verde',
    vigilante: 'bg-vigilante-naranja'
};

const roleTextColors = {
    residente: 'text-residente-azul',
    admin: 'text-admin-verde',
    vigilante: 'text-vigilante-naranja'
};

// Configuración completa de tabs por rol
const tabConfigs = {
    residente: [
        { id: 'dashboard', name: 'Dashboard', icon: 'fas fa-tachometer-alt' },
        { id: 'mis-reservas', name: 'Mis Reservas', icon: 'fas fa-calendar-check' },
        { id: 'mis-pagos', name: 'Mis Pagos', icon: 'fas fa-credit-card' },
        { id: 'emprendimientos', name: 'Emprendimientos', icon: 'fas fa-store' },
        { id: 'ver-arriendos', name: 'Ver Arriendos', icon: 'fas fa-home' },
        { id: 'sorteo-parqueadero', name: 'Mi Parqueadero', icon: 'fas fa-parking' },
        { id: 'control-vehiculos', name: 'Control Vehículos', icon: 'fas fa-car' },
        { id: 'permisos', name: 'Permisos', icon: 'fas fa-id-card' },
        { id: 'paquetes', name: 'Paquetes', icon: 'fas fa-box' },
        { id: 'chat', name: 'Chat', icon: 'fas fa-comments' },
        { id: 'camaras', name: 'Cámaras', icon: 'fas fa-video' },
        { id: 'juegos', name: 'Juegos', icon: 'fas fa-gamepad' },
        { id: 'documentos', name: 'Documentos', icon: 'fas fa-file-alt' },
        { id: 'pqrs', name: 'PQRS', icon: 'fas fa-exclamation-triangle' },
        { id: 'encuestas', name: 'Encuestas', icon: 'fas fa-poll' }
    ],
    admin: [
        { id: 'panel-admin', name: 'Panel Admin', icon: 'fas fa-tachometer-alt' },
        { id: 'sorteo-parqueaderos', name: 'Sorteo Parqueaderos', icon: 'fas fa-random' },
        { id: 'control-vehiculos-admin', name: 'Control Vehículos', icon: 'fas fa-car' },
        { id: 'noticias', name: 'Noticias', icon: 'fas fa-newspaper' },
        { id: 'pagos-admin', name: 'Pagos', icon: 'fas fa-money-bill' },
        { id: 'reservas-admin', name: 'Reservas', icon: 'fas fa-calendar' },
        { id: 'usuarios', name: 'Usuarios', icon: 'fas fa-users' },
        { id: 'permisos-admin', name: 'Permisos', icon: 'fas fa-key' },
        { id: 'camaras-admin', name: 'Cámaras', icon: 'fas fa-video' },
        { id: 'pqrs-admin', name: 'PQRS', icon: 'fas fa-clipboard-list' },
        { id: 'incidentes-admin', name: 'Incidentes Alcaldía', icon: 'fas fa-city' },
        { id: 'encuestas-admin', name: 'Encuestas', icon: 'fas fa-poll' },
        { id: 'paquetes-admin', name: 'Paquetes', icon: 'fas fa-box' }
    ],
    alcaldia: [
        { id: 'panel-alcaldia', name: 'Panel Alcaldía', icon: 'fas fa-landmark' },
        { id: 'incidentes-alcaldia', name: 'Incidentes Reportados', icon: 'fas fa-exclamation-circle' }
    ],
    vigilante: [
        { id: 'panel-seguridad', name: 'Panel Seguridad', icon: 'fas fa-shield-alt' },
        { id: 'control-vehiculos-vigilante', name: 'Control Vehículos', icon: 'fas fa-car' },
        { id: 'permisos-vigilante', name: 'Gestión Permisos', icon: 'fas fa-key' },
        { id: 'registros', name: 'Registros', icon: 'fas fa-clipboard-list' },
        { id: 'camaras-vigilante', name: 'Cámaras', icon: 'fas fa-video' },
        { id: 'paquetes-vigilante', name: 'Paquetes', icon: 'fas fa-box' }
    ]
};

// Espacios disponibles con imágenes
const espaciosReservas = [
    {
        id: 'salon-social',
        name: 'Salón Social',
        description: 'Perfecto para eventos familiares y celebraciones',
        image: '/images/salon-social.jpg',
        capacity: '60 personas',
        amenities: ['Aire acondicionado', 'Sistema de sonido', 'Cocina equipada', 'Mesas y sillas']
    },
    {
        id: 'gimnasio',
        name: 'Gimnasio',
        description: 'Espacio equipado con máquinas de ejercicio',
        image: '/images/gimnasio.jpg',
        capacity: '15 personas',
        amenities: ['Máquinas cardiovasculares', 'Pesas libres', 'Colchonetas', 'Espejos']
    },
    {
        id: 'piscina',
        name: 'Piscina',
        description: 'Piscina para adultos y niños con área de descanso',
        image: '/images/piscina.jpg',
        capacity: '40 personas',
        amenities: ['Piscina adultos', 'Piscina niños', 'Área de descanso', 'Duchas']
    },
    {
        id: 'cancha-futbol',
        name: 'Cancha de Fútbol',
        description: 'Cancha sintética para fútbol y deportes',
        image: '/images/cancha-futbol.jpg',
        capacity: '22 jugadores',
        amenities: ['Césped sintético', 'Arcos', 'Iluminación nocturna', 'Vestidores']
    },
    {
        id: 'bbq-terraza',
        name: 'BBQ Terraza',
        description: 'Terraza con asadores y vista panorámica',
        image: '/images/bbq-terraza.jpg',
        capacity: '30 personas',
        amenities: ['Asadores', 'Mesas altas', 'Vista panorámica', 'Lavaplatos']
    },
    {
        id: 'salon-ninos',
        name: 'Salón de Niños',
        description: 'Espacio diseñado para fiestas infantiles',
        image: '/images/salon-ninos.jpg',
        capacity: '25 niños',
        amenities: ['Decoración infantil', 'Juegos', 'Mesa de dulces', 'Área de padres']
    }
];

// Horarios disponibles
const horariosDisponibles = [
    '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00',
    '16:00', '17:00', '18:00', '19:00', '20:00', '21:00'
];

// Función de login demo
function loginDemo(email, password) {
    document.getElementById('login-email').value = email;
    document.getElementById('login-password').value = password;
    document.getElementById('login-form').dispatchEvent(new Event('submit'));
}

// Función de login - FIREBASE VERSION
document.getElementById('login-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    try {
        // Esperar a que Firebase Adapter esté listo
        while (!window.firebaseLogin) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        const data = await window.firebaseLogin(email, password);

        if (data.success) {
            currentUser = data.usuario;
            localStorage.setItem('token', data.token);
            localStorage.setItem('user', JSON.stringify(data.usuario));

            // Inicializar notificaciones
            notifications = [
                {
                    id: 1,
                    title: '¡Bienvenido!',
                    message: `Hola ${currentUser.nombre}, has iniciado sesión correctamente con Firebase`,
                    type: 'info',
                    timestamp: new Date().toISOString(),
                    read: false
                }
            ];

            showApp();
        } else {
            showNotification('Error de Autenticación', data.mensaje || 'Credenciales inválidas', 'error');
        }
    } catch (error) {
        showNotification('Error de Conexión', 'Error al conectar con Firebase: ' + error.message, 'error');
    }
});

// Mostrar la aplicación
function showApp() {
    document.getElementById('login-screen').classList.add('hidden');
    document.getElementById('app').classList.remove('hidden');

    setupUserInterface();
    loadInitialTab();
    updateNotificationBadge();
}

// Configurar interfaz según usuario
function setupUserInterface() {
    const roleIndicator = document.getElementById('role-indicator');
    const userInfo = document.getElementById('user-info');
    const header = document.getElementById('app-header');
    const navigation = document.getElementById('tab-navigation');

    // Configurar indicador de rol y colores principales de la interfaz
    switch(currentUser.rol) {
        case 'residente':
            roleIndicator.className = 'w-4 h-4 rounded-full mr-3 bg-residente-azul';
            header.className = 'bg-gradient-to-r from-blue-600 to-blue-700 shadow-lg border-b sticky top-0 z-40';
            navigation.className = 'bg-blue-500 shadow-sm border-b sticky top-16 z-30';
            // Cambiar color del texto del header a blanco
            header.querySelector('h1').className = 'text-xl font-semibold text-white';
            userInfo.className = 'text-sm text-blue-100';
            break;
        case 'admin':
            roleIndicator.className = 'w-4 h-4 rounded-full mr-3 bg-green-500';
            header.className = 'bg-gradient-to-r from-green-600 to-green-700 shadow-lg border-b sticky top-0 z-40';
            navigation.className = 'bg-green-500 shadow-sm border-b sticky top-16 z-30';
            // Cambiar color del texto del header a blanco
            header.querySelector('h1').className = 'text-xl font-semibold text-white';
            userInfo.className = 'text-sm text-green-100';
            break;
        case 'vigilante':
            roleIndicator.className = 'w-4 h-4 rounded-full mr-3 bg-orange-500';
            header.className = 'bg-gradient-to-r from-orange-500 to-orange-600 shadow-lg border-b sticky top-0 z-40';
            navigation.className = 'bg-orange-400 shadow-sm border-b sticky top-16 z-30';
            // Cambiar color del texto del header a blanco
            header.querySelector('h1').className = 'text-xl font-semibold text-white';
            userInfo.className = 'text-sm text-orange-100';
            break;
    }

    // Cambiar colores de los iconos del header
    const headerIcons = header.querySelectorAll('button');
    headerIcons.forEach(button => {
        const icon = button.querySelector('i');
        if (icon) {
            switch(currentUser.rol) {
                case 'residente':
                    button.className = button.className.replace('text-gray-500 hover:text-gray-700', 'text-blue-100 hover:text-white');
                    break;
                case 'admin':
                    button.className = button.className.replace('text-gray-500 hover:text-gray-700', 'text-green-100 hover:text-white');
                    break;
                case 'vigilante':
                    button.className = button.className.replace('text-gray-500 hover:text-gray-700', 'text-gray-700 hover:text-gray-900');
                    break;
            }
        }
    });

    // Mostrar información del usuario
    userInfo.textContent = `${currentUser.nombre} - ${currentUser.apartamento}`;

    // Generar tabs
    generateTabs();
}

// Generar tabs según el rol
function generateTabs() {
    const tabContainer = document.getElementById('tab-container');
    const tabs = tabConfigs[currentUser.rol] || [];

    tabContainer.innerHTML = '';

    tabs.forEach(tab => {
        const tabElement = document.createElement('button');

        // Colores de pestañas según el rol - Con clases responsivas
        let tabClasses = '';
        switch(currentUser.rol) {
            case 'residente':
                tabClasses = 'flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 border-transparent text-white hover:text-blue-100 hover:bg-blue-600';
                break;
            case 'admin':
                tabClasses = 'flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 border-transparent text-white hover:text-green-100 hover:bg-green-600';
                break;
            case 'vigilante':
                tabClasses = 'flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 border-transparent text-gray-800 hover:text-gray-900 hover:bg-yellow-300';
                break;
        }

        tabElement.className = tabClasses;
        tabElement.id = `tab-${tab.id}`;
        tabElement.innerHTML = `<i class="${tab.icon} mr-1 sm:mr-2"></i><span class="truncate">${tab.name}</span>`;
        tabElement.onclick = () => switchTab(tab.id);

        tabContainer.appendChild(tabElement);
    });

    // Actualizar botones de scroll después de cargar las pestañas
    setTimeout(updateScrollButtons, 100);
}

// Cambiar tab
function switchTab(tabId) {
    // Remover clase activa de todos los tabs y restaurar colores base
    document.querySelectorAll('[id^="tab-"]').forEach(tab => {
        switch(currentUser.rol) {
            case 'residente':
                tab.className = 'flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 border-transparent text-white hover:text-blue-100 hover:bg-blue-600';
                break;
            case 'admin':
                tab.className = 'flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 border-transparent text-white hover:text-green-100 hover:bg-green-600';
                break;
            case 'vigilante':
                tab.className = 'flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 border-transparent text-gray-800 hover:text-gray-900 hover:bg-yellow-300';
                break;
        }
    });

    // Agregar clase activa al tab seleccionado
    const selectedTab = document.getElementById(`tab-${tabId}`);
    if (selectedTab) {
        let activeClass = '';
        switch(currentUser.rol) {
            case 'residente':
                activeClass = 'bg-blue-700 text-white border-blue-300 shadow-md';
                break;
            case 'admin':
                activeClass = 'bg-green-700 text-white border-green-300 shadow-md';
                break;
            case 'vigilante':
                activeClass = 'bg-yellow-200 text-gray-900 border-yellow-400 shadow-md';
                break;
        }
        selectedTab.className = `flex items-center px-2 sm:px-4 py-1.5 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-colors border-2 ${activeClass}`;

        // Scroll al tab seleccionado en móvil
        selectedTab.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
    }

    currentTab = tabId;
    loadTabContent(tabId);
}

// Cargar primer tab
function loadInitialTab() {
    const firstTab = tabConfigs[currentUser.rol][0];
    if (firstTab) {
        switchTab(firstTab.id);
    }
}

// Función principal para cargar contenido del tab
function loadTabContent(tabId) {
    const contentArea = document.getElementById('content-area');

    // Scroll al top del contenido
    window.scrollTo({ top: 0, behavior: 'smooth' });

    switch(tabId) {
        // === MÓDULOS DE RESIDENTE ===
        case 'dashboard':
            loadResidenteDashboard();
            break;
        case 'mis-reservas':
            loadMisReservas();
            break;
        case 'mis-pagos':
            loadMisPagos();
            break;
        case 'emprendimientos':
            loadEmprendimientos();
            break;
        case 'ver-arriendos':
            loadVerArriendos();
            break;
        case 'sorteo-parqueadero':
            loadMiParqueadero();
            break;
        case 'control-vehiculos':
            loadControlVehiculosResidente();
            break;
        case 'permisos':
            loadPermisosResidente();
            break;
        case 'paquetes':
            loadPaquetes();
            break;
        case 'chat':
            loadChat();
            break;
        case 'camaras':
            loadCamaras();
            break;
        case 'juegos':
            loadJuegosComunitarios();
            break;
        case 'documentos':
            loadDocumentosResidente();
            break;
        case 'pqrs':
            loadPQRSResidente();
            break;
        case 'encuestas':
            loadEncuestasResidente();
            break;

        // === MÓDULOS DE ADMINISTRADOR ===
        case 'panel-admin':
            loadPanelAdmin();
            break;
        case 'sorteo-parqueaderos':
            loadSorteoParqueaderos();
            break;
        case 'control-vehiculos-admin':
            loadControlVehiculosAdmin();
            break;
        case 'noticias':
            loadNoticias();
            break;
        case 'pagos-admin':
            loadPagosAdmin();
            break;
        case 'reservas-admin':
            loadReservasAdmin();
            break;
        case 'usuarios':
            loadUsuarios();
            break;
        case 'permisos-admin':
            loadPermisosAdmin();
            break;
        case 'camaras-admin':
            loadCamarasAdmin();
            break;
        case 'pqrs-admin':
            loadPQRSAdmin();
            break;
        case 'incidentes-admin':
            loadIncidentesAdmin();
            break;
        case 'encuestas-admin':
            loadEncuestasAdmin();
            break;
        case 'paquetes-admin':
            loadPaquetesAdmin();
            break;

        // === MÓDULOS DE ALCALDÍA ===
        case 'panel-alcaldia':
            loadPanelAlcaldia();
            break;
        case 'incidentes-alcaldia':
            loadIncidentesAlcaldia();
            break;

        // === MÓDULOS DE VIGILANTE ===
        case 'panel-seguridad':
            loadPanelSeguridad();
            break;
        case 'control-vehiculos-vigilante':
            loadControlVehiculosVigilante();
            break;
        case 'permisos-vigilante':
            loadPermisosVigilante();
            break;
        case 'registros':
            loadRegistros();
            break;
        case 'camaras-vigilante':
            loadCamarasVigilante();
            break;
        case 'paquetes-vigilante':
            loadPaquetesVigilante();
            break;

        default:
            contentArea.innerHTML = `
                <div class="text-center py-12">
                    <i class="fas fa-cog text-4xl text-gray-400 mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Módulo en Desarrollo</h3>
                    <p class="text-gray-600">Este módulo específico está siendo desarrollado.</p>
                </div>
            `;
    }
}

// =====================================
// MÓDULOS DE RESIDENTE
// =====================================

async function loadResidenteDashboard() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="space-y-6">
            <!-- Header del Dashboard -->
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl p-8 text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold mb-2">¡Bienvenido, ${currentUser.nombre}!</h1>
                        <p class="text-blue-100 text-lg">${currentUser.apartamento}</p>
                        <p class="text-blue-200 text-sm mt-1">Conjunto Aralia de Castilla</p>
                    </div>
                    <div class="text-right">
                        <div class="text-2xl font-bold" id="current-time"></div>
                        <div class="text-blue-200" id="current-date"></div>
                    </div>
                </div>
            </div>

            <!-- Estadísticas Rápidas -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="bg-white rounded-lg p-6 shadow-sm border border-blue-100">
                    <div class="flex items-center">
                        <div class="p-3 bg-blue-100 rounded-lg">
                            <i class="fas fa-calendar-check text-blue-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-2xl font-bold text-gray-900" id="reservas-activas">0</h3>
                            <p class="text-gray-600 text-sm">Reservas Activas</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg p-6 shadow-sm border border-green-100">
                    <div class="flex items-center">
                        <div class="p-3 bg-green-100 rounded-lg">
                            <i class="fas fa-credit-card text-green-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-2xl font-bold text-gray-900" id="pagos-pendientes">0</h3>
                            <p class="text-gray-600 text-sm">Pagos Pendientes</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg p-6 shadow-sm border border-purple-100">
                    <div class="flex items-center">
                        <div class="p-3 bg-purple-100 rounded-lg">
                            <i class="fas fa-box text-purple-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-2xl font-bold text-gray-900" id="paquetes-pendientes">0</h3>
                            <p class="text-gray-600 text-sm">Paquetes Pendientes</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg p-6 shadow-sm border border-orange-100">
                    <div class="flex items-center">
                        <div class="p-3 bg-orange-100 rounded-lg">
                            <i class="fas fa-car text-orange-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-2xl font-bold text-gray-900" id="vehiculos-visitantes">0</h3>
                            <p class="text-gray-600 text-sm">Vehículos Visitantes</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Últimas Noticias Publicadas por Administrador -->
            <div class="bg-white rounded-lg p-6 shadow-sm">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-bold text-gray-900">
                        <i class="fas fa-newspaper text-blue-600 mr-2"></i>Últimas Noticias
                    </h2>
                    <span class="text-sm text-gray-500">Publicadas por administrador</span>
                </div>

                <div id="noticias-dashboard" class="space-y-4">
                    <div class="text-center py-8">
                        <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
                        <p class="text-gray-600 mt-2">Cargando noticias...</p>
                    </div>
                </div>
            </div>

            <!-- Actividades Recientes -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Últimas Reservas Realizadas -->
                <div class="bg-white rounded-lg p-6 shadow-sm">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">
                        <i class="fas fa-history text-blue-600 mr-2"></i>Mis Últimas Actividades
                    </h3>
                    <div id="actividades-recientes" class="space-y-3">
                        <div class="text-center py-4">
                            <i class="fas fa-spinner fa-spin text-gray-400"></i>
                            <p class="text-gray-500 text-sm mt-2">Cargando actividades...</p>
                        </div>
                    </div>
                </div>

                <!-- Próximos Eventos -->
                <div class="bg-white rounded-lg p-6 shadow-sm">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">
                        <i class="fas fa-calendar-alt text-green-600 mr-2"></i>Próximos Eventos
                    </h3>
                    <div id="proximos-eventos" class="space-y-3">
                        <!-- Se cargarán dinámicamente -->
                    </div>
                </div>
            </div>

            <!-- Accesos Rápidos -->
            <div class="bg-white rounded-lg p-6 shadow-sm">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">
                    <i class="fas fa-rocket text-purple-600 mr-2"></i>Accesos Rápidos
                </h3>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <button onclick="switchTab('mis-reservas')" class="p-4 border-2 border-blue-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-all group">
                        <i class="fas fa-calendar-plus text-2xl text-blue-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Nueva Reserva</p>
                    </button>
                    <button onclick="switchTab('mis-pagos')" class="p-4 border-2 border-green-200 rounded-lg hover:bg-green-50 hover:border-green-300 transition-all group">
                        <i class="fas fa-credit-card text-2xl text-green-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Mis Pagos</p>
                    </button>
                    <button onclick="switchTab('pqrs')" class="p-4 border-2 border-orange-200 rounded-lg hover:bg-orange-50 hover:border-orange-300 transition-all group">
                        <i class="fas fa-exclamation-triangle text-2xl text-orange-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Crear PQRS</p>
                    </button>
                    <button onclick="switchTab('chat')" class="p-4 border-2 border-purple-200 rounded-lg hover:bg-purple-50 hover:border-purple-300 transition-all group">
                        <i class="fas fa-comments text-2xl text-purple-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Chat Comunidad</p>
                    </button>
                </div>
            </div>
        </div>
    `;

    // Actualizar fecha y hora en tiempo real
    updateDateTime();
    setInterval(updateDateTime, 1000);

    // Cargar datos del dashboard
    loadDashboardData();
}

function updateDateTime() {
    const now = new Date();
    const timeElement = document.getElementById('current-time');
    const dateElement = document.getElementById('current-date');

    if (timeElement) {
        timeElement.textContent = now.toLocaleTimeString('es-CO', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        });
    }

    if (dateElement) {
        dateElement.textContent = now.toLocaleDateString('es-CO', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }
}

async function loadDashboardData() {
    try {
        // Cargar noticias del administrador
        const noticiasResponse = await fetchWithAuth('/api/noticias');
        const noticias = await noticiasResponse.json();

        const noticiasContainer = document.getElementById('noticias-dashboard');
        if (noticias.length > 0) {
            noticiasContainer.innerHTML = noticias.slice(0, 3).map(noticia => `
                <div class="border-l-4 border-blue-500 bg-blue-50 p-4 rounded-r-lg">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <h4 class="font-semibold text-gray-900">${noticia.titulo}</h4>
                            <p class="text-gray-700 mt-1">${noticia.contenido.substring(0, 120)}...</p>
                            <div class="flex items-center mt-2 text-sm text-gray-500">
                                <i class="fas fa-calendar mr-1"></i>
                                <span>${noticia.fecha}</span>
                                ${noticia.prioridad === 'alta' ? '<span class="ml-2 bg-red-100 text-red-800 px-2 py-1 rounded text-xs">Alta Prioridad</span>' : ''}
                            </div>
                        </div>
                        <div class="ml-4">
                            <span class="inline-block px-3 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">${noticia.categoria}</span>
                        </div>
                    </div>
                </div>
            `).join('');
        } else {
            noticiasContainer.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-newspaper text-4xl text-gray-300 mb-4"></i>
                    <p class="text-gray-600">No hay noticias disponibles</p>
                </div>
            `;
        }

        // Cargar actividades recientes
        const actividadesContainer = document.getElementById('actividades-recientes');
        actividadesContainer.innerHTML = `
            <div class="flex items-center py-2">
                <div class="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                <div class="flex-1">
                    <p class="text-sm text-gray-800">Última reserva: Salón Social</p>
                    <p class="text-xs text-gray-500">Hace 2 días</p>
                </div>
            </div>
            <div class="flex items-center py-2">
                <div class="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
                <div class="flex-1">
                    <p class="text-sm text-gray-800">Pago procesado: Administración</p>
                    <p class="text-xs text-gray-500">Hace 5 días</p>
                </div>
            </div>
            <div class="flex items-center py-2">
                <div class="w-2 h-2 bg-purple-500 rounded-full mr-3"></div>
                <div class="flex-1">
                    <p class="text-sm text-gray-800">PQRS enviada: Ruido nocturno</p>
                    <p class="text-xs text-gray-500">Hace 1 semana</p>
                </div>
            </div>
        `;

        // Cargar próximos eventos
        const eventosContainer = document.getElementById('proximos-eventos');
        eventosContainer.innerHTML = `
            <div class="border-l-4 border-green-500 pl-4 py-2">
                <h4 class="font-medium text-gray-900">Asamblea General</h4>
                <p class="text-sm text-gray-600">30 de Septiembre - 3:00 PM</p>
            </div>
            <div class="border-l-4 border-orange-500 pl-4 py-2">
                <h4 class="font-medium text-gray-900">Mantenimiento Ascensores</h4>
                <p class="text-sm text-gray-600">20-21 de Septiembre</p>
            </div>
            <div class="border-l-4 border-purple-500 pl-4 py-2">
                <h4 class="font-medium text-gray-900">Fiesta Halloween</h4>
                <p class="text-sm text-gray-600">31 de Octubre - 6:00 PM</p>
            </div>
        `;

        // Actualizar estadísticas (simulado)
        document.getElementById('reservas-activas').textContent = '2';
        document.getElementById('pagos-pendientes').textContent = '1';
        document.getElementById('paquetes-pendientes').textContent = '1';
        document.getElementById('vehiculos-visitantes').textContent = '0';

    } catch (error) {
        console.error('Error loading dashboard data:', error);
    }
}

async function loadMisReservas() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="space-y-6">
            <!-- Header -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Mis Reservas</h1>
                    <p class="text-gray-600 mt-1">Gestiona tus reservas de espacios comunes</p>
                </div>
                <button onclick="showEspaciosDisponibles()"
                        class="mt-4 sm:mt-0 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors shadow-lg">
                    <i class="fas fa-plus mr-2"></i>Nueva Reserva
                </button>
            </div>

            <!-- Espacios Disponibles -->
            <div id="espacios-disponibles" class="hidden">
                <div class="bg-white rounded-lg p-6 shadow-sm">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Espacios Disponibles para Reservar</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="espacios-grid">
                        <!-- Espacios se cargarán aquí -->
                    </div>
                </div>
            </div>

            <!-- Mis Reservas Activas -->
            <div class="bg-white rounded-lg shadow-sm">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-semibold text-gray-900">Mis Reservas Activas</h2>
                        <div class="flex space-x-2">
                            <button class="text-sm text-blue-600 hover:text-blue-800">Vigentes</button>
                            <button class="text-sm text-gray-500 hover:text-gray-700">Historial</button>
                        </div>
                    </div>
                </div>

                <div id="mis-reservas-list" class="divide-y divide-gray-200">
                    <div class="text-center py-8">
                        <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
                        <p class="text-gray-600 mt-2">Cargando reservas...</p>
                    </div>
                </div>
            </div>

            <!-- Historial de Reservas -->
            <div class="bg-white rounded-lg shadow-sm">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Historial de Reservas</h3>
                </div>

                <div id="historial-reservas" class="divide-y divide-gray-200">
                    <!-- Historial se cargará aquí -->
                </div>
            </div>
        </div>
    `;

    // Cargar datos de reservas
    loadReservasData();
}

function showEspaciosDisponibles() {
    const container = document.getElementById('espacios-disponibles');
    const grid = document.getElementById('espacios-grid');

    container.classList.remove('hidden');

    const iconosEspacios = {
        'salon-social': { icon: 'fa-champagne-glasses', color: 'from-purple-500 to-pink-500' },
        'gimnasio': { icon: 'fa-dumbbell', color: 'from-red-500 to-orange-500' },
        'piscina': { icon: 'fa-swimming-pool', color: 'from-blue-500 to-cyan-500' },
        'cancha-futbol': { icon: 'fa-futbol', color: 'from-green-500 to-emerald-500' },
        'bbq-terraza': { icon: 'fa-fire', color: 'from-orange-500 to-red-500' },
        'salon-ninos': { icon: 'fa-child', color: 'from-pink-500 to-purple-500' }
    };

    grid.innerHTML = espaciosReservas.map(espacio => {
        const iconData = iconosEspacios[espacio.id] || { icon: 'fa-building', color: 'from-gray-500 to-gray-600' };
        return `
        <div class="bg-white border-2 border-gray-200 rounded-xl overflow-hidden hover:shadow-xl hover:border-blue-400 transition-all duration-300 cursor-pointer transform hover:-translate-y-1"
             onclick="selectEspacio('${espacio.id}', '${espacio.name}')">
            <div class="h-40 bg-gradient-to-br ${iconData.color} relative">
                <div class="absolute inset-0 flex items-center justify-center">
                    <i class="fas ${iconData.icon} text-7xl text-white opacity-90"></i>
                </div>
                <div class="absolute top-3 right-3">
                    <span class="bg-white bg-opacity-30 backdrop-blur-sm text-white px-3 py-1 rounded-full text-xs font-medium">
                        Disponible
                    </span>
                </div>
                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black via-black/50 to-transparent p-4">
                    <h3 class="text-white font-bold text-xl">${espacio.name}</h3>
                </div>
            </div>

            <div class="p-4">
                <p class="text-gray-600 text-sm mb-3">${espacio.description}</p>

                <div class="space-y-2">
                    <div class="flex items-center text-sm text-gray-700">
                        <i class="fas fa-users text-blue-600 mr-2 w-4"></i>
                        <span>Capacidad: ${espacio.capacity}</span>
                    </div>

                    <div class="text-sm text-gray-600">
                        <div class="font-medium mb-1">Incluye:</div>
                        <div class="flex flex-wrap gap-1">
                            ${espacio.amenities.map(amenity =>
                                `<span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">${amenity}</span>`
                            ).join('')}
                        </div>
                    </div>
                </div>

                <button class="w-full mt-4 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors">
                    <i class="fas fa-calendar-plus mr-2"></i>Reservar Ahora
                </button>
            </div>
        </div>
        `;
    }).join('');
}

function selectEspacio(espacioId, espacioName) {
    selectedSpace = { id: espacioId, name: espacioName };
    document.getElementById('calendar-title').textContent = `Reservar ${espacioName}`;
    document.getElementById('selected-space').textContent = espacioName;

    // Mostrar modal del calendario
    document.getElementById('calendar-modal').classList.remove('hidden');

    // Generar calendario
    generateCalendar();
}

function generateCalendar() {
    const monthNames = [
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ];

    document.getElementById('calendar-month-year').textContent =
        `${monthNames[currentMonth]} ${currentYear}`;

    const firstDay = new Date(currentYear, currentMonth, 1).getDay();
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const today = new Date();

    const daysContainer = document.getElementById('calendar-days');
    daysContainer.innerHTML = '';

    // Días vacíos al inicio
    for (let i = 0; i < firstDay; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day';
        daysContainer.appendChild(emptyDay);
    }

    // Días del mes
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = day;

        const currentDate = new Date(currentYear, currentMonth, day);

        // Deshabilitar días pasados
        if (currentDate < today) {
            dayElement.className += ' text-gray-400 cursor-not-allowed';
        } else {
            // Simular disponibilidad (algunos días ocupados)
            const isOccupied = Math.random() < 0.3; // 30% ocupado
            if (isOccupied) {
                dayElement.className += ' occupied cursor-not-allowed';
                dayElement.title = 'No disponible';
            } else {
                dayElement.className += ' available';
                dayElement.onclick = () => selectDate(currentYear, currentMonth, day);
            }
        }

        daysContainer.appendChild(dayElement);
    }
}

function selectDate(year, month, day) {
    // Remover selección anterior
    document.querySelectorAll('.calendar-day.selected').forEach(el => {
        el.classList.remove('selected');
        el.classList.add('available');
    });

    // Seleccionar nuevo día
    event.target.classList.remove('available');
    event.target.classList.add('selected');

    selectedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

    const dateStr = new Date(year, month, day).toLocaleDateString('es-CO', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    document.getElementById('selected-date').textContent = dateStr;

    // Generar horarios disponibles
    generateAvailableHours();

    // Habilitar botón de confirmar si hay fecha y hora seleccionadas
    updateConfirmButton();
}

function generateAvailableHours() {
    const hoursContainer = document.getElementById('available-hours');

    hoursContainer.innerHTML = horariosDisponibles.map(hora => {
        const isAvailable = Math.random() < 0.7; // 70% disponible

        return `
            <button onclick="selectTime('${hora}')"
                    class="p-3 text-sm font-medium rounded-lg border-2 transition-colors
                           ${isAvailable
                             ? 'border-green-200 text-green-800 bg-green-50 hover:bg-green-100 hover:border-green-300'
                             : 'border-red-200 text-red-800 bg-red-50 cursor-not-allowed'}"
                    ${!isAvailable ? 'disabled' : ''}>
                ${hora}
                ${!isAvailable ? '<br><span class="text-xs">Ocupado</span>' : ''}
            </button>
        `;
    }).join('');
}

function selectTime(hora) {
    // Remover selección anterior
    document.querySelectorAll('#available-hours button').forEach(btn => {
        if (btn.classList.contains('border-blue-500')) {
            btn.classList.remove('border-blue-500', 'bg-blue-50', 'text-blue-800');
            btn.classList.add('border-green-200', 'bg-green-50', 'text-green-800');
        }
    });

    // Seleccionar nueva hora
    event.target.classList.remove('border-green-200', 'bg-green-50', 'text-green-800');
    event.target.classList.add('border-blue-500', 'bg-blue-50', 'text-blue-800');

    selectedTime = hora;
    document.getElementById('selected-time').textContent = hora;

    updateConfirmButton();
}

function updateConfirmButton() {
    const confirmBtn = document.getElementById('confirm-reservation-btn');
    if (selectedDate && selectedTime) {
        confirmBtn.disabled = false;
        confirmBtn.classList.remove('disabled:bg-gray-400');
    } else {
        confirmBtn.disabled = true;
        confirmBtn.classList.add('disabled:bg-gray-400');
    }
}

function previousMonth() {
    if (currentMonth === 0) {
        currentMonth = 11;
        currentYear--;
    } else {
        currentMonth--;
    }
    generateCalendar();
}

function nextMonth() {
    if (currentMonth === 11) {
        currentMonth = 0;
        currentYear++;
    } else {
        currentMonth++;
    }
    generateCalendar();
}

async function confirmReservation() {
    console.log('Confirming reservation:', { selectedSpace, selectedDate, selectedTime });

    if (!selectedSpace || !selectedDate || !selectedTime) {
        showNotification('Error', 'Por favor selecciona espacio, fecha y hora', 'error');
        return;
    }

    // Verificación adicional de que selectedSpace tiene la propiedad name
    if (!selectedSpace.name) {
        console.error('selectedSpace no tiene propiedad name:', selectedSpace);
        showNotification('Error', 'Error al procesar el espacio seleccionado. Por favor intenta nuevamente.', 'error');
        return;
    }

    const observaciones = document.getElementById('reservation-notes').value;

    try {
        const response = await fetchWithAuth('/api/reservas', {
            method: 'POST',
            body: JSON.stringify({
                espacio: selectedSpace.name,
                fecha: selectedDate,
                hora: selectedTime,
                observaciones
            })
        });

        // Verificar si la respuesta es exitosa HTTP 200-299
        if (!response.ok) {
            const errorData = await response.json();
            showNotification('Error', errorData.mensaje || 'No se pudo realizar la reserva', 'error');
            return;
        }

        const data = await response.json();

        if (data.success) {
            showNotification('¡Reserva Confirmada!',
                `Tu reserva de ${selectedSpace.name} para el ${selectedDate} a las ${selectedTime} ha sido confirmada.`,
                'success');

            closeCalendarModal();
            loadReservasData(); // Recargar reservas

            // Agregar notificación
            addNotification({
                title: 'Reserva Confirmada',
                message: `${selectedSpace.name} - ${selectedDate} ${selectedTime}`,
                type: 'success'
            });
        } else {
            showNotification('Error', data.mensaje || 'No se pudo confirmar la reserva', 'error');
        }
    } catch (error) {
        console.error('Error en reserva:', error);
        showNotification('Error', 'Error de conexión con el servidor. Verifica tu conexión e intenta nuevamente.', 'error');
    }
}

function closeCalendarModal() {
    document.getElementById('calendar-modal').classList.add('hidden');

    // Reset selections
    selectedSpace = null;
    selectedDate = null;
    selectedTime = null;

    document.getElementById('selected-space').textContent = '';
    document.getElementById('selected-date').textContent = 'Selecciona una fecha';
    document.getElementById('selected-time').textContent = 'Selecciona una hora';
    document.getElementById('reservation-notes').value = '';

    updateConfirmButton();
}

async function loadReservasData() {
    try {
        const response = await fetchWithAuth('/api/residente/mis-reservas');
        const data = await response.json();

        if (data.success) {
            const reservasList = document.getElementById('mis-reservas-list');
            const historialList = document.getElementById('historial-reservas');

            // Reservas activas (vigentes)
            const reservasVigentes = data.misReservas.filter(r => new Date(r.fecha) >= new Date());

            if (reservasVigentes.length > 0) {
                reservasList.innerHTML = reservasVigentes.map(reserva => `
                    <div class="px-6 py-4 hover:bg-gray-50">
                        <div class="flex items-center justify-between">
                            <div class="flex-1">
                                <div class="flex items-center">
                                    <div class="p-2 bg-blue-100 rounded-lg mr-4">
                                        <i class="fas fa-calendar-check text-blue-600"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-semibold text-gray-900">${reserva.espacio}</h4>
                                        <div class="flex items-center mt-1 text-sm text-gray-600">
                                            <i class="fas fa-clock mr-1"></i>
                                            <span>${reserva.fecha} - ${reserva.hora}</span>
                                            <span class="ml-4 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">
                                                ${reserva.estado || 'Vigente'}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button onclick="editarReserva(${reserva.id})"
                                        class="text-blue-600 hover:text-blue-800 text-sm">
                                    <i class="fas fa-edit mr-1"></i>Editar
                                </button>
                                <button onclick="cancelarReserva(${reserva.id})"
                                        class="text-red-600 hover:text-red-800 text-sm">
                                    <i class="fas fa-trash mr-1"></i>Cancelar
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                reservasList.innerHTML = `
                    <div class="px-6 py-8 text-center">
                        <i class="fas fa-calendar text-4xl text-gray-300 mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No tienes reservas activas</h3>
                        <p class="text-gray-600 mb-4">Reserva un espacio común para tus actividades</p>
                        <button onclick="showEspaciosDisponibles()"
                                class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-plus mr-2"></i>Hacer Reserva
                        </button>
                    </div>
                `;
            }

            // Historial de reservas (pasadas)
            const reservasPasadas = data.misReservas.filter(r => new Date(r.fecha) < new Date());

            if (reservasPasadas.length > 0) {
                historialList.innerHTML = reservasPasadas.map(reserva => `
                    <div class="px-6 py-3">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="p-1 bg-gray-100 rounded mr-3">
                                    <i class="fas fa-history text-gray-500 text-sm"></i>
                                </div>
                                <div>
                                    <span class="font-medium text-gray-900">${reserva.espacio}</span>
                                    <span class="text-gray-600 text-sm ml-2">${reserva.fecha} - ${reserva.hora}</span>
                                </div>
                            </div>
                            <span class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                                ${reserva.estado || 'Completada'}
                            </span>
                        </div>
                    </div>
                `).join('');
            } else {
                historialList.innerHTML = `
                    <div class="px-6 py-4 text-center text-gray-500">
                        <p>No hay reservas anteriores</p>
                    </div>
                `;
            }
        }
    } catch (error) {
        console.error('Error loading reservas:', error);
    }
}

// Función auxiliar para hacer peticiones con autenticación
// NOTA: Esta función es reemplazada por firebase-adapter.js
// Si firebase-adapter.js no está cargado, esta función hará fallback a fetch normal
async function fetchWithAuth(url, options = {}) {
    // Si ya hay un fetchWithAuth en window (del firebase-adapter), usarlo
    if (window.fetchWithAuth && window.fetchWithAuth !== fetchWithAuth) {
        return window.fetchWithAuth(url, options);
    }

    // Fallback: usar fetch normal con token
    const token = localStorage.getItem('token');
    const defaultHeaders = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
    };

    return fetch(url, {
        ...options,
        headers: {
            ...defaultHeaders,
            ...options.headers
        }
    });
}

// Funciones de notificaciones
function showNotification(title, message, type = 'info') {
    let modal = document.getElementById('notification-modal');
    let content = document.getElementById('notification-content');

    // Si no existe el modal, crearlo dinámicamente
    if (!modal) {
        const modalHTML = `
            <div id="notification-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
                <div class="flex items-center justify-center min-h-screen p-4">
                    <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-gray-900">Información</h3>
                                <button onclick="closeNotificationModal()" class="text-gray-400 hover:text-gray-600">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div id="notification-content" class="space-y-4"></div>
                            <div class="mt-6 flex justify-end">
                                <button onclick="closeNotificationModal()"
                                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                                    Entendido
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        modal = document.getElementById('notification-modal');
        content = document.getElementById('notification-content');
    }

    const typeClasses = {
        success: 'text-green-600',
        error: 'text-red-600',
        warning: 'text-yellow-600',
        info: 'text-blue-600'
    };

    const typeIcons = {
        success: 'fas fa-check-circle',
        error: 'fas fa-exclamation-triangle',
        warning: 'fas fa-exclamation-circle',
        info: 'fas fa-info-circle'
    };

    if (content) {
        content.innerHTML = `
            <div class="flex items-start">
                <i class="${typeIcons[type]} ${typeClasses[type]} text-xl mr-3 mt-1"></i>
                <div>
                    <h4 class="font-medium text-gray-900 mb-1">${title}</h4>
                    <p class="text-gray-600 text-sm whitespace-pre-line">${message}</p>
                </div>
            </div>
        `;
    }

    if (modal) {
        modal.classList.remove('hidden');
    }
}

function closeNotificationModal() {
    const modal = document.getElementById('notification-modal');
    if (modal) {
        modal.classList.add('hidden');
    }
}

// Función para hacer scroll en las pestañas - Mejorada para móvil
function scrollTabs(direction) {
    const container = document.getElementById('tab-container');

    // Scroll más corto en móvil
    const isMobile = window.innerWidth < 640;
    const scrollAmount = isMobile ? 150 : 300;

    if (direction === 'left') {
        container.scrollLeft -= scrollAmount;
    } else {
        container.scrollLeft += scrollAmount;
    }

    // Actualizar visibilidad de botones después del scroll
    setTimeout(updateScrollButtons, 100);
}

// Actualizar visibilidad de botones de scroll
function updateScrollButtons() {
    const container = document.getElementById('tab-container');
    const leftBtn = document.getElementById('scroll-left-btn');
    const rightBtn = document.getElementById('scroll-right-btn');

    if (!container || !leftBtn || !rightBtn) return;

    const isAtStart = container.scrollLeft === 0;
    const isAtEnd = container.scrollLeft >= (container.scrollWidth - container.clientWidth - 5);

    // Mostrar/ocultar botones según posición
    if (isAtStart) {
        leftBtn.classList.add('opacity-50', 'cursor-not-allowed');
        leftBtn.disabled = true;
    } else {
        leftBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        leftBtn.disabled = false;
    }

    if (isAtEnd) {
        rightBtn.classList.add('opacity-50', 'cursor-not-allowed');
        rightBtn.disabled = true;
    } else {
        rightBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        rightBtn.disabled = false;
    }

    // Ocultar botones si todo cabe en pantalla
    if (container.scrollWidth <= container.clientWidth) {
        leftBtn.classList.add('hidden');
        rightBtn.classList.add('hidden');
    } else {
        leftBtn.classList.remove('hidden');
        rightBtn.classList.remove('hidden');
    }
}

function addNotification(notif) {
    notifications.unshift({
        id: Date.now(),
        ...notif,
        timestamp: new Date().toISOString(),
        read: false
    });
    updateNotificationBadge();
}

function updateNotificationBadge() {
    const badge = document.getElementById('notification-badge');
    const unreadCount = notifications.filter(n => !n.read).length;

    if (unreadCount > 0) {
        badge.textContent = unreadCount;
        badge.classList.remove('hidden');
    } else {
        badge.classList.add('hidden');
    }
}

function toggleNotifications() {
    const dropdown = document.getElementById('notifications-dropdown');
    dropdown.classList.toggle('hidden');

    if (!dropdown.classList.contains('hidden')) {
        loadNotificationsList();
    }
}

function loadNotificationsList() {
    const list = document.getElementById('notifications-list');

    if (notifications.length === 0) {
        list.innerHTML = `
            <div class="p-4 text-center text-gray-500">
                <p>No hay notificaciones</p>
            </div>
        `;
        return;
    }

    list.innerHTML = notifications.map(notif => `
        <div class="p-4 hover:bg-gray-50 ${notif.read ? 'opacity-60' : ''}" onclick="markAsRead(${notif.id})">
            <div class="flex items-start">
                <div class="flex-1">
                    <h4 class="font-medium text-gray-900 text-sm">${notif.title}</h4>
                    <p class="text-gray-600 text-sm mt-1">${notif.message}</p>
                    <p class="text-gray-400 text-xs mt-1">${new Date(notif.timestamp).toLocaleString('es-CO')}</p>
                </div>
                ${!notif.read ? '<div class="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>' : ''}
            </div>
        </div>
    `).join('');
}

function markAsRead(notifId) {
    const notif = notifications.find(n => n.id === notifId);
    if (notif) {
        notif.read = true;
        updateNotificationBadge();
        loadNotificationsList();
    }
}

// Funciones de tema
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');

    if (currentTheme === 'light') {
        body.classList.add('dark');
        themeIcon.classList.remove('fa-moon');
        themeIcon.classList.add('fa-sun');
        currentTheme = 'dark';
        localStorage.setItem('theme', 'dark');
    } else {
        body.classList.remove('dark');
        themeIcon.classList.remove('fa-sun');
        themeIcon.classList.add('fa-moon');
        currentTheme = 'light';
        localStorage.setItem('theme', 'light');
    }
}

// Función de logout
function logout() {
    if (confirm('¿Estás seguro de que quieres cerrar sesión?')) {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        currentUser = null;

        document.getElementById('app').classList.add('hidden');
        document.getElementById('login-screen').classList.remove('hidden');
    }
}

// Funciones placeholder para módulos en desarrollo
async function loadMisPagos() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-credit-card text-blue-600 mr-3"></i>
                        Mis Pagos
                    </h2>
                    <p class="text-gray-600 mt-1">Estado de cuenta y pagos pendientes</p>
                </div>
            </div>

            <div id="pagos-residente-container">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-400 mb-4"></i>
                    <p class="text-gray-600">Cargando pagos...</p>
                </div>
            </div>
        </div>
    `;

    try {
        const response = await fetchWithAuth('/api/pagos');
        const pagos = await response.json();

        // Filtrar pagos del usuario actual
        const miApartamento = currentUser.apartamento;
        const misPagos = pagos.filter(p =>
            p.apartamento && miApartamento &&
            (p.apartamento.includes(miApartamento.split(' - ')[1]) ||
             `${p.torre} - ${p.apartamento}` === miApartamento)
        );

        const container = document.getElementById('pagos-residente-container');

        if (misPagos.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-receipt text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay pagos registrados</h3>
                    <p class="text-gray-600">No se han generado pagos para tu apartamento</p>
                </div>
            `;
            return;
        }

        // Separar pagos pendientes y pagados
        const pendientes = misPagos.filter(p => p.estado !== 'Pagado');
        const pagados = misPagos.filter(p => p.estado === 'Pagado');

        container.innerHTML = `
            <!-- Resumen -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div class="bg-gradient-to-br from-red-500 to-red-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-red-100 text-sm">Pagos Pendientes</p>
                        <i class="fas fa-exclamation-circle text-2xl text-red-200"></i>
                    </div>
                    <p class="text-4xl font-bold">${pendientes.length}</p>
                </div>
                <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-green-100 text-sm">Pagos Realizados</p>
                        <i class="fas fa-check-circle text-2xl text-green-200"></i>
                    </div>
                    <p class="text-4xl font-bold">${pagados.length}</p>
                </div>
                <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-blue-100 text-sm">Total Pendiente</p>
                        <i class="fas fa-dollar-sign text-2xl text-blue-200"></i>
                    </div>
                    <p class="text-3xl font-bold">
                        $${pendientes.reduce((sum, p) => sum + (parseInt(p.valor) || 0), 0).toLocaleString('es-CO')}
                    </p>
                </div>
            </div>

            <!-- Pagos Pendientes -->
            ${pendientes.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-red-200 mb-6">
                    <div class="bg-red-50 px-6 py-4 border-b border-red-200">
                        <h3 class="text-xl font-semibold text-red-900 flex items-center">
                            <i class="fas fa-exclamation-triangle mr-2"></i>
                            Pagos Pendientes (${pendientes.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${pendientes.map(pago => {
                            const vencimiento = new Date(pago.vencimiento);
                            const hoy = new Date();
                            const diasRestantes = Math.floor((vencimiento - hoy) / (1000 * 60 * 60 * 24));
                            const vencido = diasRestantes < 0;

                            return `
                                <div class="border-2 ${vencido ? 'border-red-300 bg-red-50' : 'border-orange-200 bg-orange-50'} rounded-lg p-4">
                                    <div class="flex justify-between items-start mb-3">
                                        <div class="flex-1">
                                            <h4 class="text-lg font-bold text-gray-900">${pago.concepto}</h4>
                                            <p class="text-sm text-gray-600">${pago.mes}</p>
                                        </div>
                                        ${vencido ? `
                                            <span class="bg-red-600 text-white px-3 py-1 rounded-full text-xs font-bold">
                                                VENCIDO
                                            </span>
                                        ` : `
                                            <span class="bg-orange-600 text-white px-3 py-1 rounded-full text-xs font-bold">
                                                ${diasRestantes} días
                                            </span>
                                        `}
                                    </div>
                                    <div class="grid grid-cols-2 gap-3">
                                        <div class="bg-white p-3 rounded-lg">
                                            <p class="text-xs text-gray-600 mb-1">
                                                <i class="fas fa-dollar-sign mr-1"></i>Valor
                                            </p>
                                            <p class="text-xl font-bold text-blue-600">
                                                $${parseInt(pago.valor).toLocaleString('es-CO')}
                                            </p>
                                        </div>
                                        <div class="bg-white p-3 rounded-lg">
                                            <p class="text-xs text-gray-600 mb-1">
                                                <i class="fas fa-calendar mr-1"></i>Vencimiento
                                            </p>
                                            <p class="font-semibold text-gray-900">
                                                ${vencimiento.toLocaleDateString('es-CO')}
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            ` : ''}

            <!-- Historial de Pagos -->
            ${pagados.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-history mr-2 text-green-600"></i>
                            Historial de Pagos (${pagados.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-3">
                        ${pagados.map(pago => `
                            <div class="border border-green-200 bg-green-50 rounded-lg p-4 flex justify-between items-center">
                                <div>
                                    <h4 class="font-semibold text-gray-900">${pago.concepto}</h4>
                                    <p class="text-sm text-gray-600">${pago.mes}</p>
                                </div>
                                <div class="text-right">
                                    <p class="text-lg font-bold text-green-600">
                                        $${parseInt(pago.valor).toLocaleString('es-CO')}
                                    </p>
                                    <span class="bg-green-600 text-white px-2 py-1 rounded text-xs">
                                        <i class="fas fa-check mr-1"></i>Pagado
                                    </span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('pagos-residente-container').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar los pagos</p>
            </div>
        `;
    }
}

async function loadMiParqueadero() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-parking text-blue-600 mr-3"></i>
                    Mi Parqueadero
                </h2>
            </div>

            <div id="parqueadero-info" class="text-center py-12">
                <i class="fas fa-spinner fa-spin text-4xl text-blue-400 mb-4"></i>
                <p class="text-gray-600">Cargando información...</p>
            </div>
        </div>
    `;

    try {
        const response = await fetchWithAuth('/api/residente/mi-parqueadero');
        const data = await response.json();

        const container = document.getElementById('parqueadero-info');

        if (data.success && data.asignado) {
            const fechaSorteo = new Date(data.fechaSorteo).toLocaleDateString('es-CO', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            container.innerHTML = `
                <div class="max-w-2xl mx-auto">
                    <div class="bg-gradient-to-br from-blue-500 to-blue-700 rounded-2xl shadow-2xl p-8 text-white">
                        <div class="text-center mb-8">
                            <i class="fas fa-parking text-7xl mb-4 opacity-90"></i>
                            <h3 class="text-3xl font-bold mb-2">¡Parqueadero Asignado!</h3>
                            <p class="text-blue-100">Resultado del sorteo del ${fechaSorteo}</p>
                        </div>

                        <div class="bg-white bg-opacity-20 backdrop-blur-sm rounded-xl p-6 mb-6">
                            <div class="grid grid-cols-2 gap-6 text-center">
                                <div>
                                    <p class="text-blue-100 text-sm mb-2">Número</p>
                                    <p class="text-5xl font-bold">${data.parqueadero}</p>
                                </div>
                                <div>
                                    <p class="text-blue-100 text-sm mb-2">Ubicación</p>
                                    <p class="text-2xl font-bold">${data.nivel}</p>
                                </div>
                            </div>
                        </div>

                        <div class="bg-white bg-opacity-10 backdrop-blur-sm rounded-xl p-4">
                            <div class="flex items-start space-x-3">
                                <i class="fas fa-info-circle text-2xl mt-1"></i>
                                <div class="text-sm text-blue-50">
                                    <p class="font-semibold mb-2">Información Importante:</p>
                                    <ul class="space-y-1 list-disc list-inside">
                                        <li>Conserva este número para identificar tu parqueadero</li>
                                        <li>El parqueadero es de uso exclusivo para tu apartamento</li>
                                        <li>Recuerda estacionar dentro de las líneas demarcadas</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div class="max-w-md mx-auto bg-gray-50 rounded-xl p-8 border-2 border-dashed border-gray-300">
                    <i class="fas fa-calendar-times text-6xl text-gray-400 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">Sin Parqueadero Asignado</h3>
                    <p class="text-gray-600 mb-4">${data.mensaje || 'No se ha realizado sorteo aún'}</p>
                    <div class="bg-blue-50 rounded-lg p-4 text-sm text-blue-800">
                        <i class="fas fa-info-circle mr-2"></i>
                        Cuando el administrador realice el sorteo, tu parqueadero asignado aparecerá aquí.
                    </div>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('parqueadero-info').innerHTML = `
            <div class="text-red-600">
                <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
                <p>Error al cargar la información del parqueadero</p>
            </div>
        `;
    }
}

async function loadControlVehiculosResidente() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-car text-blue-600 mr-3"></i>
                        Control de Vehículos Visitantes
                    </h2>
                    <p class="text-gray-600 mt-1">Vehículos que visitan tu apartamento</p>
                </div>
            </div>

            <div id="vehiculos-mi-apartamento" class="space-y-4">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-400 mb-4"></i>
                    <p class="text-gray-600">Cargando vehículos...</p>
                </div>
            </div>
        </div>
    `;

    try {
        const response = await fetchWithAuth('/api/vehiculos-visitantes');
        const vehiculos = await response.json();

        // Filtrar vehículos que visitan el apartamento del usuario actual
        const miApartamento = currentUser.apartamento;
        const misVehiculos = vehiculos.filter(v => v.visitaA.includes(miApartamento));

        const container = document.getElementById('vehiculos-mi-apartamento');

        if (misVehiculos.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-car text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay vehículos visitantes</h3>
                    <p class="text-gray-600">No hay vehículos registrados visitando tu apartamento en este momento</p>
                </div>
            `;
            return;
        }

        container.innerHTML = `
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4 flex items-center">
                    <i class="fas fa-list mr-2 text-blue-600"></i>
                    Vehículos Visitando ${miApartamento}
                </h3>
                <div class="space-y-4">
                    ${misVehiculos.map(v => {
                        const ingreso = new Date(v.fechaIngreso);
                        const ahora = new Date();
                        const horas = Math.floor((ahora - ingreso) / (1000 * 60 * 60));
                        const minutos = Math.floor(((ahora - ingreso) % (1000 * 60 * 60)) / (1000 * 60));

                        const cobro = v.activo ? 'En curso' : `$${v.totalCobrado ? v.totalCobrado.toLocaleString('es-CO') : '0'}`;
                        const estadoBadge = v.activo
                            ? '<span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-semibold">Activo</span>'
                            : '<span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-xs font-semibold">Finalizado</span>';

                        return `
                            <div class="border-2 ${v.activo ? 'border-blue-200 bg-blue-50' : 'border-gray-200 bg-gray-50'} rounded-lg p-4">
                                <div class="flex justify-between items-start mb-3">
                                    <div class="flex items-center gap-3">
                                        <div class="bg-blue-100 p-3 rounded-lg">
                                            <i class="fas fa-car text-blue-600 text-xl"></i>
                                        </div>
                                        <div>
                                            <p class="font-bold text-xl text-gray-900">${v.placa}</p>
                                            <p class="text-sm text-gray-600">${v.tipoVehiculo}</p>
                                        </div>
                                    </div>
                                    ${estadoBadge}
                                </div>

                                <div class="grid grid-cols-3 gap-3">
                                    <div class="bg-white p-3 rounded-lg">
                                        <p class="text-xs text-gray-600 mb-1">
                                            <i class="fas fa-clock mr-1"></i>Hora Ingreso
                                        </p>
                                        <p class="font-semibold text-gray-900 text-sm">
                                            ${ingreso.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit' })}
                                        </p>
                                    </div>
                                    <div class="bg-white p-3 rounded-lg">
                                        <p class="text-xs text-gray-600 mb-1">
                                            <i class="fas fa-hourglass-half mr-1"></i>Tiempo
                                        </p>
                                        <p class="font-semibold text-gray-900 text-sm">${horas}h ${minutos}min</p>
                                    </div>
                                    <div class="bg-white p-3 rounded-lg">
                                        <p class="text-xs text-gray-600 mb-1">
                                            <i class="fas fa-dollar-sign mr-1"></i>Cobro
                                        </p>
                                        <p class="font-semibold text-blue-600 text-sm">${cobro}</p>
                                    </div>
                                </div>

                                ${v.fechaSalida ? `
                                    <p class="text-xs text-gray-500 mt-3">
                                        <i class="fas fa-sign-out-alt mr-1"></i>
                                        Salida: ${new Date(v.fechaSalida).toLocaleString('es-CO')}
                                    </p>
                                ` : ''}
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('vehiculos-mi-apartamento').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar los vehículos visitantes</p>
            </div>
        `;
    }
}

function loadVerArriendos() {
    document.getElementById('content-area').innerHTML = `
        <div class="space-y-6">
            <!-- Header -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Ver Arriendos</h1>
                    <p class="text-gray-600 mt-1">Apartamentos y parqueaderos disponibles para arrendar</p>
                </div>
                <button onclick="showFormularioArriendo()"
                        class="mt-4 sm:mt-0 bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors shadow-lg">
                    <i class="fas fa-plus mr-2"></i>Publicar Arriendo
                </button>
            </div>

            <!-- Formulario para Publicar Arriendo -->
            <div id="formulario-arriendo" class="bg-white rounded-lg shadow-sm hidden">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">Publicar Nuevo Arriendo</h2>
                </div>

                <!-- Subpestañas: Apartamento y Parqueadero -->
                <div class="px-6 pt-4">
                    <div class="flex space-x-1 bg-gray-100 p-1 rounded-lg w-fit">
                        <button onclick="switchArriendoTab('apartamento')" id="tab-apartamento"
                                class="px-6 py-2 rounded-md text-sm font-medium transition-colors bg-white text-purple-600 shadow-sm">
                            <i class="fas fa-building mr-2"></i>Apartamento
                        </button>
                        <button onclick="switchArriendoTab('parqueadero')" id="tab-parqueadero"
                                class="px-6 py-2 rounded-md text-sm font-medium transition-colors text-gray-600 hover:text-gray-800">
                            <i class="fas fa-car mr-2"></i>Parqueadero
                        </button>
                    </div>
                </div>

                <form id="form-arriendo" class="p-6 space-y-6">
                    <!-- Formulario Apartamento -->
                    <div id="form-apartamento">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Selección de Torre -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Torre</label>
                                <select id="torre-apartamento" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                    <option value="">Seleccionar Torre</option>
                                    <option value="1">Torre 1</option>
                                    <option value="2">Torre 2</option>
                                    <option value="3">Torre 3</option>
                                    <option value="4">Torre 4</option>
                                    <option value="5">Torre 5</option>
                                    <option value="6">Torre 6</option>
                                    <option value="7">Torre 7</option>
                                    <option value="8">Torre 8</option>
                                    <option value="9">Torre 9</option>
                                    <option value="10">Torre 10</option>
                                </select>
                            </div>

                            <!-- Número de Apartamento -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Apartamento</label>
                                <input type="text" id="numero-apartamento" required
                                       placeholder="Ej: 301, 402B, etc."
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>

                            <!-- Precio de Arriendo -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Precio Mensual</label>
                                <div class="relative">
                                    <span class="absolute left-3 top-2.5 text-gray-500">$</span>
                                    <input type="number" id="precio-apartamento" required
                                           placeholder="1200000"
                                           class="w-full pl-8 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                </div>
                            </div>

                            <!-- Número de Contacto -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Número de Contacto</label>
                                <input type="tel" id="contacto-apartamento" required
                                       placeholder="300-123-4567"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>

                            <!-- Habitaciones -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Habitaciones</label>
                                <select id="habitaciones-apartamento"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                    <option value="1">1 Habitación</option>
                                    <option value="2">2 Habitaciones</option>
                                    <option value="3">3 Habitaciones</option>
                                    <option value="4">4 Habitaciones</option>
                                    <option value="5">5+ Habitaciones</option>
                                </select>
                            </div>

                            <!-- Baños -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Baños</label>
                                <select id="banos-apartamento"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                    <option value="1">1 Baño</option>
                                    <option value="2">2 Baños</option>
                                    <option value="3">3 Baños</option>
                                    <option value="4">4+ Baños</option>
                                </select>
                            </div>
                        </div>

                        <!-- Incluir Parqueadero -->
                        <div class="mt-6">
                            <div class="flex items-center">
                                <input type="checkbox" id="incluir-parqueadero"
                                       class="mr-3 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                <label for="incluir-parqueadero" class="text-sm font-medium text-gray-700">
                                    Incluir parqueadero
                                </label>
                            </div>

                            <div id="datos-parqueadero" class="mt-4 hidden">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Número de Parqueadero</label>
                                        <input type="text" id="numero-parqueadero-incluido"
                                               placeholder="Ej: A-15, B-22, etc."
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Tipo de Parqueadero</label>
                                        <select id="tipo-parqueadero-incluido"
                                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                            <option value="carro">Para Carro</option>
                                            <option value="moto">Para Moto</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Características Adicionales -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Características Adicionales</label>
                            <textarea id="caracteristicas-apartamento" rows="3"
                                      placeholder="Describe las características especiales: balcón, vista panorámica, piso, etc."
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"></textarea>
                        </div>
                    </div>

                    <!-- Formulario Parqueadero -->
                    <div id="form-parqueadero" class="hidden">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Selección de Torre/Nivel -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Torre/Nivel</label>
                                <select id="torre-parqueadero" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                    <option value="">Seleccionar Ubicación</option>
                                    <option value="Torre 1">Torre 1 - Sótano</option>
                                    <option value="Torre 2">Torre 2 - Sótano</option>
                                    <option value="Torre 3">Torre 3 - Sótano</option>
                                    <option value="Torre 4">Torre 4 - Sótano</option>
                                    <option value="Torre 5">Torre 5 - Sótano</option>
                                    <option value="Torre 6">Torre 6 - Sótano</option>
                                    <option value="Torre 7">Torre 7 - Sótano</option>
                                    <option value="Torre 8">Torre 8 - Sótano</option>
                                    <option value="Torre 9">Torre 9 - Sótano</option>
                                    <option value="Torre 10">Torre 10 - Sótano</option>
                                    <option value="Visitantes">Zona Visitantes</option>
                                </select>
                            </div>

                            <!-- Número de Parqueadero -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Número de Parqueadero</label>
                                <input type="text" id="numero-parqueadero" required
                                       placeholder="Ej: A-01, B-15, etc."
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>

                            <!-- Precio de Arriendo -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Precio Mensual</label>
                                <div class="relative">
                                    <span class="absolute left-3 top-2.5 text-gray-500">$</span>
                                    <input type="number" id="precio-parqueadero" required
                                           placeholder="150000"
                                           class="w-full pl-8 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                </div>
                            </div>

                            <!-- Número de Contacto -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Número de Contacto</label>
                                <input type="tel" id="contacto-parqueadero" required
                                       placeholder="300-123-4567"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>

                            <!-- Tipo de Vehículo -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Tipo de Vehículo</label>
                                <select id="tipo-vehiculo-parqueadero" required
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                                    <option value="">Seleccionar</option>
                                    <option value="carro">Carro</option>
                                    <option value="camioneta">Camioneta</option>
                                    <option value="moto">Moto</option>
                                    <option value="mixto">Mixto (Carro/Moto)</option>
                                </select>
                            </div>

                            <!-- Dimensiones (opcional) -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Dimensiones (opcional)</label>
                                <input type="text" id="dimensiones-parqueadero"
                                       placeholder="Ej: 5m x 2.5m"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            </div>
                        </div>

                        <!-- Características del Parqueadero -->
                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Características</label>
                            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                <label class="flex items-center">
                                    <input type="checkbox" class="mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                    Techado
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                    Vigilancia 24h
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                    Acceso fácil
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                    Cerca ascensor
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                    Para vehículo grande
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                                    Con depósito
                                </label>
                            </div>
                        </div>

                        <!-- Observaciones -->
                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Observaciones Adicionales</label>
                            <textarea id="observaciones-parqueadero" rows="3"
                                      placeholder="Información adicional importante sobre el parqueadero..."
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"></textarea>
                        </div>
                    </div>

                    <!-- Botones -->
                    <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                        <button type="button" onclick="cancelarArriendo()"
                                class="px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                            Cancelar
                        </button>
                        <button type="submit"
                                class="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                            <i class="fas fa-home mr-2"></i>Publicar Arriendo
                        </button>
                    </div>
                </form>
            </div>

            <!-- Lista de Arriendos Disponibles -->
            <div class="bg-white rounded-lg shadow-sm">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-semibold text-gray-900">Arriendos Disponibles</h2>
                        <div class="flex space-x-2">
                            <button onclick="filterArriendos('apartamentos')" id="filter-apartamentos"
                                    class="px-4 py-2 text-sm font-medium text-purple-600 bg-purple-50 border border-purple-200 rounded-lg hover:bg-purple-100">
                                <i class="fas fa-building mr-2"></i>Apartamentos
                            </button>
                            <button onclick="filterArriendos('parqueaderos')" id="filter-parqueaderos"
                                    class="px-4 py-2 text-sm font-medium text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                                <i class="fas fa-car mr-2"></i>Parqueaderos
                            </button>
                            <button onclick="filterArriendos('todos')" id="filter-todos"
                                    class="px-4 py-2 text-sm font-medium text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                                <i class="fas fa-list mr-2"></i>Todos
                            </button>
                        </div>
                    </div>
                </div>

                <div id="arriendos-list" class="divide-y divide-gray-200">
                    <div class="text-center py-8">
                        <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
                        <p class="text-gray-600 mt-2">Cargando arriendos...</p>
                    </div>
                </div>
            </div>
        </div>
    `;

    // Event listeners
    document.getElementById('incluir-parqueadero').addEventListener('change', function() {
        const datosParqueadero = document.getElementById('datos-parqueadero');
        if (this.checked) {
            datosParqueadero.classList.remove('hidden');
        } else {
            datosParqueadero.classList.add('hidden');
        }
    });

    document.getElementById('form-arriendo').addEventListener('submit', publicarArriendo);

    // Cargar arriendos existentes
    loadArriendosData();
}

function showFormularioArriendo() {
    const formulario = document.getElementById('formulario-arriendo');
    formulario.classList.remove('hidden');
    formulario.scrollIntoView({ behavior: 'smooth' });

    // Inicializar con el tab de apartamento activo y deshabilitar validación del formulario de parqueadero
    switchArriendoTab('apartamento');
}

function cancelarArriendo() {
    document.getElementById('formulario-arriendo').classList.add('hidden');
    document.getElementById('form-arriendo').reset();
}

function switchArriendoTab(tab) {
    // Resetear tabs
    document.getElementById('tab-apartamento').className = 'px-6 py-2 rounded-md text-sm font-medium transition-colors text-gray-600 hover:text-gray-800';
    document.getElementById('tab-parqueadero').className = 'px-6 py-2 rounded-md text-sm font-medium transition-colors text-gray-600 hover:text-gray-800';

    // Ocultar formularios y deshabilitar validación
    const formApartamento = document.getElementById('form-apartamento');
    const formParqueadero = document.getElementById('form-parqueadero');

    formApartamento.classList.add('hidden');
    formParqueadero.classList.add('hidden');

    // Deshabilitar campos required de ambos formularios
    formApartamento.querySelectorAll('[required]').forEach(field => {
        field.removeAttribute('required');
        field.setAttribute('data-was-required', 'true');
    });
    formParqueadero.querySelectorAll('[required]').forEach(field => {
        field.removeAttribute('required');
        field.setAttribute('data-was-required', 'true');
    });

    if (tab === 'apartamento') {
        document.getElementById('tab-apartamento').className = 'px-6 py-2 rounded-md text-sm font-medium transition-colors bg-white text-purple-600 shadow-sm';
        formApartamento.classList.remove('hidden');

        // Reactivar campos required del formulario de apartamento
        formApartamento.querySelectorAll('[data-was-required]').forEach(field => {
            field.setAttribute('required', 'required');
        });
    } else {
        document.getElementById('tab-parqueadero').className = 'px-6 py-2 rounded-md text-sm font-medium transition-colors bg-white text-purple-600 shadow-sm';
        formParqueadero.classList.remove('hidden');

        // Reactivar campos required del formulario de parqueadero
        formParqueadero.querySelectorAll('[data-was-required]').forEach(field => {
            field.setAttribute('required', 'required');
        });
    }
}

async function publicarArriendo(e) {
    e.preventDefault();

    const tipoActual = document.getElementById('form-apartamento').classList.contains('hidden') ? 'parqueadero' : 'apartamento';
    let formData = { tipo: tipoActual };

    if (tipoActual === 'apartamento') {
        formData = {
            ...formData,
            torre: document.getElementById('torre-apartamento').value,
            numero: document.getElementById('numero-apartamento').value,
            precio: document.getElementById('precio-apartamento').value,
            contacto: document.getElementById('contacto-apartamento').value,
            habitaciones: document.getElementById('habitaciones-apartamento').value,
            banos: document.getElementById('banos-apartamento').value,
            incluirParqueadero: document.getElementById('incluir-parqueadero').checked,
            numeroParqueadero: document.getElementById('numero-parqueadero-incluido').value,
            tipoParqueadero: document.getElementById('tipo-parqueadero-incluido').value,
            caracteristicas: document.getElementById('caracteristicas-apartamento').value
        };
    } else {
        const caracteristicas = [];
        document.querySelectorAll('#form-parqueadero input[type="checkbox"]:checked').forEach(checkbox => {
            caracteristicas.push(checkbox.parentElement.textContent.trim());
        });

        formData = {
            ...formData,
            torre: document.getElementById('torre-parqueadero').value,
            numero: document.getElementById('numero-parqueadero').value,
            precio: document.getElementById('precio-parqueadero').value,
            contacto: document.getElementById('contacto-parqueadero').value,
            tipoVehiculo: document.getElementById('tipo-vehiculo-parqueadero').value,
            dimensiones: document.getElementById('dimensiones-parqueadero').value,
            caracteristicas: caracteristicas.join(', '),
            observaciones: document.getElementById('observaciones-parqueadero').value
        };
    }

    try {
        const response = await fetchWithAuth('/api/residente/publicar-arriendo', {
            method: 'POST',
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.success) {
            showNotification('¡Arriendo Publicado!',
                `Tu ${tipoActual} ha sido publicado exitosamente.`, 'success');

            cancelarArriendo();
            loadArriendosData();

            addNotification({
                title: 'Arriendo Publicado',
                message: `${tipoActual} en Torre ${formData.torre}`,
                type: 'success'
            });
        } else {
            showNotification('Error', data.mensaje || 'No se pudo publicar el arriendo', 'error');
        }
    } catch (error) {
        showNotification('Error', 'Error de conexión', 'error');
    }
}

async function loadArriendosData() {
    try {
        const response = await fetchWithAuth('/api/residente/arriendos');
        const data = await response.json();

        if (data.success) {
            const arriendosList = document.getElementById('arriendos-list');
            const arriendos = [...data.apartamentos, ...data.parqueaderos];

            if (arriendos.length > 0) {
                arriendosList.innerHTML = arriendos.map(arriendo => `
                    <div class="p-6 hover:bg-gray-50">
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <div class="flex items-center mb-2">
                                    <div class="p-2 bg-purple-100 rounded-lg mr-4">
                                        <i class="fas fa-${arriendo.tipo === 'apartamento' ? 'building' : 'car'} text-purple-600"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-semibold text-gray-900 text-lg">
                                            ${arriendo.tipo === 'apartamento' ? 'Apartamento' : 'Parqueadero'}
                                            Torre ${arriendo.torre} - ${arriendo.numero}
                                        </h3>
                                        <div class="flex items-center mt-1 text-sm text-gray-600">
                                            <i class="fas fa-dollar-sign mr-1"></i>
                                            <span class="font-medium text-lg text-green-600">$${parseInt(arriendo.precio).toLocaleString()}/mes</span>
                                            <span class="mx-2">•</span>
                                            <i class="fas fa-calendar mr-1"></i>
                                            <span>Publicado: ${arriendo.fechaPublicacion}</span>
                                        </div>
                                    </div>
                                </div>

                                ${arriendo.caracteristicas ? `
                                    <p class="text-gray-700 mt-2">${arriendo.caracteristicas}</p>
                                ` : ''}

                                <div class="flex items-center mt-3 text-sm">
                                    <i class="fas fa-user text-gray-400 mr-2"></i>
                                    <span class="text-gray-600">${arriendo.propietario || arriendo.contacto}</span>
                                    ${arriendo.disponible !== false ?
                                        '<span class="ml-4 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">Disponible</span>' :
                                        '<span class="ml-4 bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs">No disponible</span>'
                                    }
                                </div>
                            </div>

                            <div class="flex items-center space-x-2 ml-4">
                                <button onclick="contactarPropietario('${arriendo.contacto || arriendo.propietario}', '${arriendo.tipo}')"
                                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                                    <i class="fas fa-phone mr-2"></i>Contactar
                                </button>
                                <button onclick="verDetallesArriendo(${arriendo.id})"
                                        class="text-purple-600 hover:text-purple-800 border border-purple-200 px-4 py-2 rounded-lg hover:bg-purple-50">
                                    <i class="fas fa-eye mr-2"></i>Ver Detalles
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                arriendosList.innerHTML = `
                    <div class="text-center py-12">
                        <i class="fas fa-home text-4xl text-gray-300 mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No hay arriendos disponibles</h3>
                        <p class="text-gray-600 mb-4">Sé el primero en publicar un arriendo</p>
                        <button onclick="showFormularioArriendo()"
                                class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700">
                            <i class="fas fa-plus mr-2"></i>Publicar Arriendo
                        </button>
                    </div>
                `;
            }
        }
    } catch (error) {
        console.error('Error loading arriendos:', error);
    }
}

function filterArriendos(tipo) {
    // Resetear filtros
    document.getElementById('filter-apartamentos').className = 'px-4 py-2 text-sm font-medium text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50';
    document.getElementById('filter-parqueaderos').className = 'px-4 py-2 text-sm font-medium text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50';
    document.getElementById('filter-todos').className = 'px-4 py-2 text-sm font-medium text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50';

    // Activar filtro seleccionado
    const filterId = tipo === 'apartamentos' ? 'filter-apartamentos' :
                     tipo === 'parqueaderos' ? 'filter-parqueaderos' : 'filter-todos';

    document.getElementById(filterId).className = 'px-4 py-2 text-sm font-medium text-purple-600 bg-purple-50 border border-purple-200 rounded-lg hover:bg-purple-100';

    // Aplicar filtro (implementar lógica de filtrado aquí)
    // Por ahora solo cambiamos la apariencia visual
}

function contactarPropietario(contacto, tipo) {
    if (confirm(`¿Deseas llamar al propietario del ${tipo} al número ${contacto}?`)) {
        // Intentar abrir la aplicación de teléfono
        window.location.href = `tel:${contacto}`;
    }
}

function verDetallesArriendo(arriendoId) {
    showNotification('Detalles del Arriendo', `Mostrando detalles del arriendo #${arriendoId}`, 'info');
}

// ===================================================================================
// EMPRENDIMIENTOS - SISTEMA DE RESEÑAS Y CALIFICACIONES
// ===================================================================================

async function loadEmprendimientos() {
    // Primero crear el HTML estructura
    document.getElementById('content-area').innerHTML = `
        <div class="space-y-6">
            <!-- Header -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Emprendimientos Residenciales</h1>
                    <p class="text-gray-600 mt-1">Servicios y negocios de residentes del conjunto</p>
                </div>
                <button onclick="mostrarFormularioEmprendimiento()"
                        class="mt-4 sm:mt-0 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors shadow-lg">
                    <i class="fas fa-plus mr-2"></i>Registrar Emprendimiento
                </button>
            </div>

            <!-- Lista de Emprendimientos -->
            <div class="bg-white rounded-lg shadow-sm">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">Emprendimientos Disponibles</h2>
                </div>

                <div id="emprendimientos-list" class="divide-y divide-gray-200">
                    <div class="text-center py-8">
                        <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
                        <p class="text-gray-600 mt-2">Cargando emprendimientos...</p>
                    </div>
                </div>
            </div>
        </div>
    `;

    try {
        const response = await fetchWithAuth('/api/residente/emprendimientos');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Emprendimientos data:', data);

        const emprendimientosList = document.getElementById('emprendimientos-list');

        if (data.success && data.emprendimientos && data.emprendimientos.length > 0) {
            emprendimientosList.innerHTML = data.emprendimientos.map(emp => {
                const calificacionPromedio = emp.resenas && emp.resenas.length > 0
                    ? emp.resenas.reduce((sum, r) => sum + r.calificacion, 0) / emp.resenas.length
                    : (emp.calificacion || 0);

                return `
                    <div class="p-6 hover:bg-blue-50 border-b border-gray-200">
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <div class="flex items-center mb-3">
                                    <div class="p-3 bg-gradient-to-br from-blue-100 to-blue-200 rounded-lg mr-4">
                                        <i class="fas fa-store text-blue-600 text-lg"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-bold text-gray-900 text-xl">${emp.nombre}</h3>
                                        <p class="text-blue-600 font-medium">${emp.tipo || emp.categoria || 'Servicio'}</p>
                                        <div class="flex items-center mt-1">
                                            ${generateStarRating(calificacionPromedio)}
                                            <span class="ml-2 text-sm text-gray-600">
                                                (${emp.resenas ? emp.resenas.length : 0} reseñas)
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <p class="text-gray-700 mb-3">${emp.descripcion}</p>

                                <div class="flex items-center text-sm text-gray-600 space-x-4">
                                    <div class="flex items-center">
                                        <i class="fas fa-user mr-1"></i>
                                        <span>${emp.propietario || (emp.torre ? `Torre ${emp.torre} - Apt. ${emp.apartamento}` : 'Propietario')}</span>
                                    </div>
                                    <div class="flex items-center">
                                        <i class="fas fa-clock mr-1"></i>
                                        <span>${emp.horario || emp.horarios || 'Consultar horarios'}</span>
                                    </div>
                                </div>
                            </div>

                            <div class="flex flex-col space-y-2 ml-4">
                                <button onclick="contactarEmprendimiento('${emp.telefono || emp.contacto}', '${emp.nombre}')"
                                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors whitespace-nowrap">
                                    <i class="fas fa-phone mr-2"></i>Contactar
                                </button>
                                <button onclick="verResenasEmprendimiento(${emp.id})"
                                        class="text-blue-600 hover:text-blue-800 border border-blue-200 px-4 py-2 rounded-lg hover:bg-blue-50 whitespace-nowrap">
                                    <i class="fas fa-star mr-2"></i>Ver Reseñas
                                </button>
                                <button onclick="escribirResena(${emp.id})"
                                        class="text-purple-600 hover:text-purple-800 border border-purple-200 px-4 py-2 rounded-lg hover:bg-purple-50 whitespace-nowrap">
                                    <i class="fas fa-edit mr-2"></i>Escribir Reseña
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        } else {
            emprendimientosList.innerHTML = `
                <div class="text-center py-12">
                    <i class="fas fa-store-slash text-4xl text-gray-300 mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No hay emprendimientos registrados</h3>
                    <p class="text-gray-600 mb-4">Sé el primero en registrar tu emprendimiento</p>
                    <button onclick="mostrarFormularioEmprendimiento()"
                            class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-plus mr-2"></i>Registrar Emprendimiento
                    </button>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading emprendimientos:', error);
        showNotification('Error', 'No se pudieron cargar los emprendimientos', 'error');
    }
}

function generateStarRating(calificacion) {
    let stars = '';
    for (let i = 1; i <= 5; i++) {
        if (i <= calificacion) {
            stars += '<i class="fas fa-star text-yellow-400"></i>';
        } else if (i - 0.5 <= calificacion) {
            stars += '<i class="fas fa-star-half-alt text-yellow-400"></i>';
        } else {
            stars += '<i class="far fa-star text-gray-300"></i>';
        }
    }
    return stars;
}

function contactarEmprendimiento(telefono, nombre) {
    if (confirm(`¿Deseas llamar a ${nombre} al número ${telefono}?`)) {
        window.location.href = `tel:${telefono}`;
    }
}

function verResenasEmprendimiento(emprendimientoId) {
    // Mostrar modal con todas las reseñas
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-lg shadow-xl w-11/12 max-w-2xl max-h-96 overflow-auto">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-900 mb-2">Reseñas y Calificaciones</h3>
                <button onclick="this.closest('.fixed').remove()"
                        class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div id="resenas-container" class="p-6">
                <div class="text-center py-8">
                    <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
                    <p class="text-gray-600 mt-2">Cargando reseñas...</p>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    loadResenasEmprendimiento(emprendimientoId);
}

async function loadResenasEmprendimiento(emprendimientoId) {
    try {
        const response = await fetchWithAuth(`/api/residente/emprendimientos/${emprendimientoId}/resenas`);
        const data = await response.json();

        const container = document.getElementById('resenas-container');

        if (data.success && data.resenas && data.resenas.length > 0) {
            container.innerHTML = data.resenas.map(resena => `
                <div class="border-b border-gray-200 pb-4 mb-4 last:border-b-0">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center mb-2">
                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                                    <i class="fas fa-user text-blue-600 text-sm"></i>
                                </div>
                                <div>
                                    <p class="font-medium text-gray-900">${resena.usuario}</p>
                                    <div class="flex items-center">
                                        ${generateStarRating(resena.calificacion)}
                                        <span class="ml-2 text-sm text-gray-500">${resena.fecha}</span>
                                    </div>
                                </div>
                            </div>
                            ${resena.comentario ? `<p class="text-gray-700 ml-11">${resena.comentario}</p>` : ''}
                        </div>
                    </div>
                </div>
            `).join('');
        } else {
            container.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-comment-slash text-3xl text-gray-300 mb-3"></i>
                    <h4 class="font-medium text-gray-900 mb-2">Sin reseñas aún</h4>
                    <p class="text-gray-600">Sé el primero en escribir una reseña</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading reseñas:', error);
        document.getElementById('resenas-container').innerHTML = `
            <div class="text-center py-8">
                <i class="fas fa-exclamation-triangle text-3xl text-red-300 mb-3"></i>
                <p class="text-red-600">Error al cargar las reseñas</p>
            </div>
        `;
    }
}

function escribirResena(emprendimientoId) {
    // Mostrar modal para escribir reseña
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-lg shadow-xl w-11/12 max-w-md">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-900">Escribir Reseña</h3>
                <button onclick="this.closest('.fixed').remove()"
                        class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="resena-form" class="p-6 space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Calificación</label>
                    <div class="flex items-center space-x-1" id="star-rating">
                        ${[1,2,3,4,5].map(i => `
                            <button type="button" onclick="setRating(${i})"
                                    class="text-2xl text-gray-300 hover:text-yellow-400 transition-colors">
                                <i class="far fa-star" id="star-${i}"></i>
                            </button>
                        `).join('')}
                    </div>
                    <input type="hidden" id="rating-value" value="0">
                </div>

                <div>
                    <label for="comentario-resena" class="block text-sm font-medium text-gray-700 mb-2">
                        Comentario (opcional)
                    </label>
                    <textarea id="comentario-resena"
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              rows="4"
                              placeholder="Cuéntanos sobre tu experiencia..."></textarea>
                </div>

                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button"
                            onclick="this.closest('.fixed').remove()"
                            class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button type="submit"
                            class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Enviar Reseña
                    </button>
                </div>
            </form>
        </div>
    `;

    document.body.appendChild(modal);

    // Configurar envío del formulario
    document.getElementById('resena-form').onsubmit = (e) => {
        e.preventDefault();
        enviarResena(emprendimientoId);
    };
}

function setRating(rating) {
    document.getElementById('rating-value').value = rating;

    // Actualizar estrellas visualmente
    for (let i = 1; i <= 5; i++) {
        const star = document.getElementById(`star-${i}`);
        if (i <= rating) {
            star.className = 'fas fa-star text-yellow-400';
        } else {
            star.className = 'far fa-star text-gray-300';
        }
    }
}

function mostrarFormularioEmprendimiento() {
    showNotification('Registrar Emprendimiento', 'Esta funcionalidad está en desarrollo. Pronto podrás registrar tu emprendimiento desde la aplicación.', 'info');
}

async function enviarResena(emprendimientoId) {
    const rating = document.getElementById('rating-value').value;
    const comentario = document.getElementById('comentario-resena').value;

    if (rating === '0') {
        showNotification('Error', 'Por favor selecciona una calificación', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/residente/emprendimientos/resena', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                emprendimientoId: parseInt(emprendimientoId),
                calificacion: parseInt(rating),
                comentario: comentario.trim()
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('¡Reseña Enviada!', 'Tu reseña ha sido publicada exitosamente', 'success');

            // Cerrar modal
            document.querySelector('.fixed').remove();

            // Recargar emprendimientos para mostrar nueva calificación
            if (currentUser.rol === 'residente') {
                loadEmprendimientos();
            }

            // Notificación interna
            addNotification({
                title: 'Reseña Publicada',
                message: `Has calificado un emprendimiento con ${rating} estrellas`,
                type: 'success'
            });
        } else {
            showNotification('Error', data.mensaje || 'No se pudo enviar la reseña', 'error');
        }
    } catch (error) {
        console.error('Error enviando reseña:', error);
        showNotification('Error', 'Error de conexión al enviar la reseña', 'error');
    }
}

// ===================================================================================
// CHAT - SISTEMA COMPLETO CON 4 TIPOS ESPECÍFICOS
// ===================================================================================

function loadChat() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-comments text-blue-600 mr-3"></i>
                    Chat Comunitario
                </h2>
                ${currentUser.rol === 'residente' ? `
                    <button onclick="mostrarSolicitudChatPrivado()"
                            class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                        <i class="fas fa-user-plus mr-2"></i>Solicitar Chat Privado
                    </button>
                ` : ''}
            </div>

            <!-- Pestañas de Chat -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
                <div class="border-b border-gray-200">
                    <nav class="flex space-x-8 px-6" id="chat-tabs">
                        <button onclick="switchChatTab('general')" id="chat-tab-general"
                                class="py-4 px-2 border-b-2 font-medium text-sm chat-tab-active">
                            <i class="fas fa-users mr-2"></i>General
                        </button>
                        ${currentUser.rol === 'admin' || currentUser.rol === 'residente' ? `
                            <button onclick="switchChatTab('admin')" id="chat-tab-admin"
                                    class="py-4 px-2 border-b-2 font-medium text-sm chat-tab-inactive">
                                <i class="fas fa-user-shield mr-2"></i>Administrador
                            </button>
                        ` : ''}
                        ${currentUser.rol === 'vigilante' || currentUser.rol === 'admin' ? `
                            <button onclick="switchChatTab('vigilantes')" id="chat-tab-vigilantes"
                                    class="py-4 px-2 border-b-2 font-medium text-sm chat-tab-inactive">
                                <i class="fas fa-shield-alt mr-2"></i>Vigilantes
                            </button>
                        ` : ''}
                        ${currentUser.rol === 'residente' ? `
                            <button onclick="switchChatTab('privados')" id="chat-tab-privados"
                                    class="py-4 px-2 border-b-2 font-medium text-sm chat-tab-inactive">
                                <i class="fas fa-lock mr-2"></i>Privados
                            </button>
                        ` : ''}
                    </nav>
                </div>
            </div>

            <!-- Contenedor de Chat -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <!-- Área de Mensajes -->
                <div id="chat-messages-area" class="h-96 overflow-y-auto p-4 bg-gray-50 border-b border-gray-200">
                    <!-- Los mensajes se cargarán aquí -->
                </div>

                <!-- Input de Mensaje -->
                <div class="p-4">
                    <form id="chat-form" class="flex items-center space-x-4">
                        <div class="flex-1 relative">
                            <input type="text" id="chat-message-input"
                                   placeholder="Escribe tu mensaje aquí..."
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <button type="submit"
                                class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Usuarios Conectados -->
            <div class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                <h3 class="font-medium text-gray-900 mb-3 flex items-center">
                    <i class="fas fa-circle text-green-500 mr-2"></i>
                    Usuarios Conectados
                </h3>
                <div id="usuarios-conectados" class="flex flex-wrap gap-2">
                    <!-- Lista de usuarios conectados -->
                </div>
            </div>
        </div>
    `;

    // Inicializar chat
    currentChatType = 'general';
    loadChatMessages('general');
    loadUsuariosConectados();

    // Configurar envío de mensajes
    document.getElementById('chat-form').onsubmit = (e) => {
        e.preventDefault();
        enviarMensajeChat();
    };
}

let currentChatType = 'general';

function switchChatTab(chatType) {
    // Remover clases activas
    document.querySelectorAll('[id^="chat-tab-"]').forEach(tab => {
        tab.className = 'py-4 px-2 border-b-2 font-medium text-sm chat-tab-inactive';
    });

    // Activar tab seleccionado
    document.getElementById(`chat-tab-${chatType}`).className = 'py-4 px-2 border-b-2 font-medium text-sm chat-tab-active';

    currentChatType = chatType;
    loadChatMessages(chatType);

    // Cambiar placeholder según el tipo de chat
    const input = document.getElementById('chat-message-input');
    switch(chatType) {
        case 'general':
            input.placeholder = 'Mensaje para toda la comunidad...';
            break;
        case 'admin':
            input.placeholder = 'Mensaje para el administrador...';
            break;
        case 'vigilantes':
            input.placeholder = 'Mensaje para vigilantes...';
            break;
        case 'privados':
            input.placeholder = 'Selecciona una conversación privada...';
            break;
    }
}

async function loadChatMessages(chatType) {
    try {
        const response = await fetchWithAuth(`/api/chat/${chatType}`);
        const data = await response.json();

        const messagesArea = document.getElementById('chat-messages-area');

        if (data.success && data.mensajes && data.mensajes.length > 0) {
            messagesArea.innerHTML = data.mensajes.map(mensaje => `
                <div class="mb-4 ${mensaje.usuarioEmail === currentUser.email ? 'text-right' : 'text-left'}">
                    <div class="inline-block max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                        mensaje.usuarioEmail === currentUser.email
                        ? 'bg-blue-500 text-white'
                        : 'bg-white border border-gray-200'
                    }">
                        ${mensaje.usuarioEmail !== currentUser.email ? `
                            <div class="font-semibold text-sm text-gray-600 mb-1">
                                ${mensaje.usuario}
                            </div>
                        ` : ''}
                        <div class="text-sm">${mensaje.mensaje}</div>
                        <div class="text-xs opacity-75 mt-1">
                            ${new Date(mensaje.timestamp).toLocaleTimeString('es-CO', {
                                hour: '2-digit',
                                minute: '2-digit'
                            })}
                        </div>
                    </div>
                </div>
            `).join('');

            // Scroll al final
            messagesArea.scrollTop = messagesArea.scrollHeight;
        } else {
            messagesArea.innerHTML = `
                <div class="text-center py-12 text-gray-500">
                    <i class="fas fa-comment-slash text-3xl mb-3"></i>
                    <p>No hay mensajes en este chat</p>
                    <p class="text-sm">¡Sé el primero en escribir!</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading chat messages:', error);
    }
}

async function enviarMensajeChat() {
    const input = document.getElementById('chat-message-input');
    const mensaje = input.value.trim();

    if (!mensaje) return;

    if (currentChatType === 'privados') {
        showNotification('Selecciona Conversación', 'Primero selecciona una conversación privada', 'warning');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/chat/enviar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                tipo: currentChatType,
                mensaje: mensaje
            })
        });

        const data = await response.json();

        if (data.success) {
            input.value = '';
            loadChatMessages(currentChatType);

            // Notificación de éxito
            addNotification({
                title: 'Mensaje Enviado',
                message: `Mensaje enviado al chat ${currentChatType}`,
                type: 'success'
            });
        } else {
            showNotification('Error', data.mensaje || 'No se pudo enviar el mensaje', 'error');
        }
    } catch (error) {
        console.error('Error enviando mensaje:', error);
        showNotification('Error', 'Error de conexión', 'error');
    }
}

async function loadUsuariosConectados() {
    try {
        const response = await fetchWithAuth('/api/chat/usuarios-conectados');
        const data = await response.json();

        const container = document.getElementById('usuarios-conectados');

        if (data.success && data.usuarios) {
            container.innerHTML = data.usuarios.map(usuario => `
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800">
                    <i class="fas fa-circle text-xs mr-2"></i>
                    ${usuario.nombre}
                </span>
            `).join('');
        }
    } catch (error) {
        console.error('Error loading usuarios conectados:', error);
    }
}

function mostrarSolicitudChatPrivado() {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-lg shadow-xl w-11/12 max-w-md">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-xl font-bold text-gray-900">Solicitar Chat Privado</h3>
                <button onclick="this.closest('.fixed').remove()"
                        class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="solicitud-chat-form" class="p-6 space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Seleccionar Residentes
                    </label>
                    <div id="residentes-lista" class="max-h-48 overflow-y-auto border border-gray-200 rounded-lg p-3">
                        <!-- Lista de residentes se carga aquí -->
                    </div>
                </div>

                <div>
                    <label for="motivo-chat" class="block text-sm font-medium text-gray-700 mb-2">
                        Motivo del chat privado
                    </label>
                    <textarea id="motivo-chat"
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              rows="3"
                              placeholder="Describe brevemente el motivo del chat privado..."
                              required></textarea>
                </div>

                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button"
                            onclick="this.closest('.fixed').remove()"
                            class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        Cancelar
                    </button>
                    <button type="submit"
                            class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Enviar Solicitud
                    </button>
                </div>
            </form>
        </div>
    `;

    document.body.appendChild(modal);
    loadResidentesParaChat();

    document.getElementById('solicitud-chat-form').onsubmit = (e) => {
        e.preventDefault();
        enviarSolicitudChatPrivado();
    };
}

async function loadResidentesParaChat() {
    try {
        const response = await fetchWithAuth('/api/usuarios/residentes');
        const data = await response.json();

        const container = document.getElementById('residentes-lista');

        if (data.success && data.residentes) {
            container.innerHTML = data.residentes
                .filter(r => r.email !== currentUser.email)
                .map(residente => `
                    <label class="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded-lg cursor-pointer">
                        <input type="checkbox" name="residentes-chat" value="${residente.email}"
                               class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                        <div class="flex-1">
                            <div class="font-medium text-gray-900">${residente.nombre}</div>
                            <div class="text-sm text-gray-500">${residente.apartamento}</div>
                        </div>
                    </label>
                `).join('');
        }
    } catch (error) {
        console.error('Error loading residentes:', error);
    }
}

async function enviarSolicitudChatPrivado() {
    const checkboxes = document.querySelectorAll('input[name="residentes-chat"]:checked');
    const motivo = document.getElementById('motivo-chat').value;

    if (checkboxes.length === 0) {
        showNotification('Error', 'Selecciona al menos un residente', 'error');
        return;
    }

    const destinatarios = Array.from(checkboxes).map(cb => cb.value);

    try {
        const response = await fetchWithAuth('/api/chat/solicitar-privado', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                destinatarios,
                motivo
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('¡Solicitud Enviada!',
                'Tu solicitud de chat privado ha sido enviada. Los destinatarios decidirán si aceptarla.', 'success');

            document.querySelector('.fixed').remove();

            addNotification({
                title: 'Solicitud de Chat Enviada',
                message: `Solicitud enviada a ${destinatarios.length} residentes`,
                type: 'success'
            });
        } else {
            showNotification('Error', data.mensaje || 'No se pudo enviar la solicitud', 'error');
        }
    } catch (error) {
        console.error('Error enviando solicitud:', error);
        showNotification('Error', 'Error de conexión', 'error');
    }
}

// ===================================================================================
// MÓDULO ADMINISTRADOR - PANEL ADMIN Y FUNCIONES PRINCIPALES
// ===================================================================================

function loadPanelAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <!-- Header del Panel Admin -->
            <div class="flex items-center justify-between">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-tachometer-alt text-green-600 mr-3"></i>
                        Panel de Administración
                    </h2>
                    <p class="text-gray-600 mt-1">Conjunto Aralia de Castilla</p>
                </div>
                <div class="flex items-center space-x-3">
                    <button onclick="generarReporteGeneral()"
                            class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                        <i class="fas fa-chart-line mr-2"></i>Reporte General
                    </button>
                    <div class="text-right">
                        <div class="text-sm text-gray-500">Última actualización</div>
                        <div class="font-medium">${new Date().toLocaleDateString('es-CO')}</div>
                    </div>
                </div>
            </div>

            <!-- Tarjetas de Estadísticas -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <!-- Residentes Total -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-gray-600">Total Residentes</p>
                            <p class="text-3xl font-bold text-green-600" id="total-residentes">--</p>
                            <p class="text-sm text-green-600 flex items-center mt-1">
                                <i class="fas fa-arrow-up text-xs mr-1"></i>
                                <span id="crecimiento-residentes">+2.3%</span>
                            </p>
                        </div>
                        <div class="p-3 bg-green-100 rounded-lg">
                            <i class="fas fa-users text-green-600 text-xl"></i>
                        </div>
                    </div>
                </div>

                <!-- Ingresos Mensuales -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-gray-600">Ingresos del Mes</p>
                            <p class="text-3xl font-bold text-blue-600" id="ingresos-mes">--</p>
                            <p class="text-sm text-blue-600 flex items-center mt-1">
                                <i class="fas fa-calendar text-xs mr-1"></i>
                                <span>Septiembre 2025</span>
                            </p>
                        </div>
                        <div class="p-3 bg-blue-100 rounded-lg">
                            <i class="fas fa-dollar-sign text-blue-600 text-xl"></i>
                        </div>
                    </div>
                </div>

                <!-- Vehículos Activos -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-gray-600">Vehículos Visitantes</p>
                            <p class="text-3xl font-bold text-orange-600" id="vehiculos-activos">--</p>
                            <p class="text-sm text-orange-600 flex items-center mt-1">
                                <i class="fas fa-clock text-xs mr-1"></i>
                                <span>Tiempo real</span>
                            </p>
                        </div>
                        <div class="p-3 bg-orange-100 rounded-lg">
                            <i class="fas fa-car text-orange-600 text-xl"></i>
                        </div>
                    </div>
                </div>

                <!-- PQRS Pendientes -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-gray-600">PQRS Pendientes</p>
                            <p class="text-3xl font-bold text-red-600" id="pqrs-pendientes">--</p>
                            <p class="text-sm text-red-600 flex items-center mt-1">
                                <i class="fas fa-exclamation-triangle text-xs mr-1"></i>
                                <span>Requieren atención</span>
                            </p>
                        </div>
                        <div class="p-3 bg-red-100 rounded-lg">
                            <i class="fas fa-clipboard-list text-red-600 text-xl"></i>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Gráficos y Actividades -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Actividad Reciente -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="p-6 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-clock text-green-600 mr-2"></i>
                            Actividad Reciente
                        </h3>
                    </div>
                    <div class="p-6">
                        <div class="space-y-4" id="actividad-reciente">
                            <!-- Actividades se cargan aquí -->
                        </div>
                        <div class="mt-4 text-center">
                            <button onclick="switchTab('registros')"
                                    class="text-green-600 hover:text-red-700 text-sm font-medium">
                                Ver todas las actividades →
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Acciones Rápidas -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="p-6 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-bolt text-green-600 mr-2"></i>
                            Acciones Rápidas
                        </h3>
                    </div>
                    <div class="p-6">
                        <div class="grid grid-cols-2 gap-4">
                            <button onclick="switchTab('usuarios')"
                                    class="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-red-50 hover:border-green-600 transition-colors">
                                <i class="fas fa-user-plus text-green-600 text-2xl mb-2"></i>
                                <span class="text-sm font-medium text-gray-900">Crear Usuario</span>
                            </button>

                            <button onclick="switchTab('noticias')"
                                    class="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-red-50 hover:border-green-600 transition-colors">
                                <i class="fas fa-bullhorn text-green-600 text-2xl mb-2"></i>
                                <span class="text-sm font-medium text-gray-900">Publicar Noticia</span>
                            </button>

                            <button onclick="switchTab('sorteo-parqueaderos')"
                                    class="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-red-50 hover:border-green-600 transition-colors">
                                <i class="fas fa-random text-green-600 text-2xl mb-2"></i>
                                <span class="text-sm font-medium text-gray-900">Sorteo Parqueadero</span>
                            </button>

                            <button onclick="switchTab('pagos-admin')"
                                    class="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-red-50 hover:border-green-600 transition-colors">
                                <i class="fas fa-upload text-green-600 text-2xl mb-2"></i>
                                <span class="text-sm font-medium text-gray-900">Subir Pagos</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Torres y Ocupación -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                        <i class="fas fa-building text-green-600 mr-2"></i>
                        Estado de las Torres
                    </h3>
                </div>
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4" id="torres-estado">
                        <!-- Estado de torres se carga aquí -->
                    </div>
                </div>
            </div>

            <!-- Alertas del Sistema -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                        <i class="fas fa-bell text-green-600 mr-2"></i>
                        Alertas del Sistema
                    </h3>
                </div>
                <div class="p-6">
                    <div class="space-y-3" id="alertas-sistema">
                        <!-- Alertas se cargan aquí -->
                    </div>
                </div>
            </div>
        </div>
    `;

    // Cargar datos del panel
    loadPanelAdminData();
}

async function loadPanelAdminData() {
    try {
        // Cargar estadísticas generales
        await loadEstadisticasGenerales();
        await loadActividadReciente();
        await loadEstadoTorres();
        await loadAlertasSistema();
    } catch (error) {
        console.error('Error loading panel admin data:', error);
        showNotification('Error', 'No se pudieron cargar los datos del panel', 'error');
    }
}

async function loadEstadisticasGenerales() {
    try {
        const response = await fetchWithAuth('/api/admin/estadisticas');
        const data = await response.json();

        if (data.success) {
            document.getElementById('total-residentes').textContent = data.totalResidentes || 0;
            document.getElementById('ingresos-mes').textContent =
                new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' })
                    .format(data.ingresosMes || 0);
            document.getElementById('vehiculos-activos').textContent = data.vehiculosActivos || 0;
            document.getElementById('pqrs-pendientes').textContent = data.pqrsPendientes || 0;
        }
    } catch (error) {
        console.error('Error loading estadísticas:', error);
    }
}

async function loadActividadReciente() {
    const actividades = [
        {
            tipo: 'usuario',
            descripcion: 'Nuevo usuario registrado: María López',
            tiempo: '5 min',
            icono: 'fas fa-user-plus',
            color: 'text-green-600'
        },
        {
            tipo: 'pago',
            descripcion: 'Pago recibido Torre 3 - Apt 205',
            tiempo: '12 min',
            icono: 'fas fa-money-bill',
            color: 'text-blue-600'
        },
        {
            tipo: 'vehiculo',
            descripcion: 'Vehículo ABC123 salió del conjunto',
            tiempo: '18 min',
            icono: 'fas fa-car',
            color: 'text-orange-600'
        },
        {
            tipo: 'pqrs',
            descripcion: 'Nueva PQRS: Ruido nocturno Torre 1',
            tiempo: '25 min',
            icono: 'fas fa-exclamation-triangle',
            color: 'text-red-600'
        },
        {
            tipo: 'reserva',
            descripción: 'Reserva cancelada: Salón Social',
            tiempo: '1 hora',
            icono: 'fas fa-calendar-times',
            color: 'text-purple-600'
        }
    ];

    const container = document.getElementById('actividad-reciente');
    container.innerHTML = actividades.map(act => `
        <div class="flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50">
            <div class="p-2 bg-gray-100 rounded-lg">
                <i class="${act.icono} ${act.color}"></i>
            </div>
            <div class="flex-1">
                <p class="text-sm font-medium text-gray-900">${act.descripcion}</p>
                <p class="text-xs text-gray-500">Hace ${act.tiempo}</p>
            </div>
        </div>
    `).join('');
}

async function loadEstadoTorres() {
    const torres = Array.from({length: 10}, (_, i) => ({
        numero: i + 1,
        ocupacion: Math.floor(Math.random() * 20) + 15, // Entre 15-35 apartamentos ocupados
        total: 40,
        porcentaje: null
    }));

    torres.forEach(torre => {
        torre.porcentaje = Math.round((torre.ocupacion / torre.total) * 100);
    });

    const container = document.getElementById('torres-estado');
    container.innerHTML = torres.map(torre => `
        <div class="text-center p-4 border border-gray-200 rounded-lg">
            <div class="w-16 h-16 mx-auto mb-3 relative">
                <div class="w-full h-full bg-gray-200 rounded-lg flex items-center justify-center">
                    <i class="fas fa-building text-green-600 text-xl"></i>
                </div>
                <div class="absolute -top-1 -right-1 w-6 h-6 bg-green-600 text-white text-xs rounded-full flex items-center justify-center">
                    ${torre.numero}
                </div>
            </div>
            <p class="text-sm font-medium text-gray-900">Torre ${torre.numero}</p>
            <p class="text-xs text-gray-600">${torre.ocupacion}/${torre.total}</p>
            <div class="mt-2 bg-gray-200 rounded-full h-2">
                <div class="bg-green-600 h-2 rounded-full transition-all duration-300"
                     style="width: ${torre.porcentaje}%"></div>
            </div>
            <p class="text-xs text-gray-500 mt-1">${torre.porcentaje}%</p>
        </div>
    `).join('');
}

async function loadAlertasSistema() {
    const alertas = [
        {
            tipo: 'warning',
            titulo: 'Mantenimiento Programado',
            descripcion: 'Mantenimiento de ascensores Torre 2 - 20 Sept 8:00 AM',
            tiempo: 'En 2 días',
            icono: 'fas fa-wrench',
            bgColor: 'bg-yellow-50',
            textColor: 'text-yellow-800',
            iconColor: 'text-yellow-600'
        },
        {
            tipo: 'info',
            titulo: 'Asamblea Ordinaria',
            descripcion: 'Asamblea General Ordinaria - 30 Sept 3:00 PM',
            tiempo: 'En 4 días',
            icono: 'fas fa-calendar',
            bgColor: 'bg-blue-50',
            textColor: 'text-blue-800',
            iconColor: 'text-blue-600'
        },
        {
            tipo: 'success',
            titulo: 'Pagos al Día',
            descripcion: 'Torre 1 completó 100% de pagos de septiembre',
            tiempo: 'Hoy',
            icono: 'fas fa-check-circle',
            bgColor: 'bg-green-50',
            textColor: 'text-green-800',
            iconColor: 'text-green-600'
        }
    ];

    const container = document.getElementById('alertas-sistema');
    container.innerHTML = alertas.map(alerta => `
        <div class="flex items-center space-x-4 p-4 ${alerta.bgColor} rounded-lg">
            <div class="p-2 bg-white rounded-lg">
                <i class="${alerta.icono} ${alerta.iconColor}"></i>
            </div>
            <div class="flex-1">
                <p class="font-medium ${alerta.textColor}">${alerta.titulo}</p>
                <p class="text-sm ${alerta.textColor} opacity-75">${alerta.descripcion}</p>
            </div>
            <div class="text-xs ${alerta.textColor} opacity-75">
                ${alerta.tiempo}
            </div>
        </div>
    `).join('');
}

function generarReporteGeneral() {
    showNotification('Generando Reporte',
        'Se está generando el reporte general del conjunto. Recibirás una notificación cuando esté listo.',
        'info');

    addNotification({
        title: 'Reporte Solicitado',
        message: 'Reporte general en proceso de generación',
        type: 'info'
    });
}

// ========================================
// FUNCIONES MÓDULOS DE ADMINISTRADOR
// ========================================

function loadSorteoParqueaderos() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-random text-green-600 mr-3"></i>
                    Sorteo de Parqueaderos
                </h2>
            </div>

            <!-- Formulario de Sorteo -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Realizar Nuevo Sorteo</h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Participantes</label>
                        <div id="participantes-list" class="space-y-2 max-h-60 overflow-y-auto border rounded-lg p-4">
                            <p class="text-gray-500">Cargando residentes...</p>
                        </div>
                    </div>
                    <button onclick="realizarSorteo()"
                            class="w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors">
                        <i class="fas fa-random mr-2"></i>Realizar Sorteo
                    </button>
                </div>
            </div>

            <!-- Resultados del Último Sorteo -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Último Sorteo Realizado</h3>
                <div id="resultados-sorteo" class="space-y-2">
                    <p class="text-gray-500">No hay sorteos realizados aún</p>
                </div>
            </div>
        </div>
    `;

    cargarParticipantesSorteo();
}

async function cargarParticipantesSorteo() {
    try {
        const response = await fetchWithAuth('/api/admin/usuarios/todos');
        const data = await response.json();

        if (data.success) {
            const residentes = data.usuarios.filter(u => u.rol === 'residente');
            const container = document.getElementById('participantes-list');

            container.innerHTML = residentes.map(r => `
                <label class="flex items-center p-2 hover:bg-gray-50 rounded">
                    <input type="checkbox" class="participante-check" value="${r.nombre} - ${r.apartamento}" checked>
                    <span class="ml-2">${r.nombre} - ${r.apartamento}</span>
                </label>
            `).join('');
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

async function realizarSorteo() {
    const checkboxes = document.querySelectorAll('.participante-check:checked');
    const participantes = Array.from(checkboxes).map(cb => cb.value);

    if (participantes.length === 0) {
        showNotification('Error', 'Debes seleccionar al menos un participante', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/admin/sorteo-parqueaderos', {
            method: 'POST',
            body: JSON.stringify({ participantes })
        });

        const data = await response.json();

        if (data.success) {
            const container = document.getElementById('resultados-sorteo');
            container.innerHTML = `
                <div class="space-y-2">
                    <p class="text-sm text-gray-500 mb-4">Sorteo realizado exitosamente</p>
                    ${data.resultados.map((r, i) => `
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                            <span class="font-medium">${r.participante}</span>
                            <span class="text-green-600 font-bold">${r.parqueadero} - ${r.nivel}</span>
                        </div>
                    `).join('')}
                </div>
            `;

            showNotification('Éxito', 'Sorteo realizado exitosamente', 'success');
        }
    } catch (error) {
        showNotification('Error', 'No se pudo realizar el sorteo', 'error');
    }
}

function loadControlVehiculosAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-car text-green-600 mr-3"></i>
                    Control de Vehículos Visitantes
                </h2>
                <button onclick="mostrarReporteVehiculos()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-file-pdf mr-2"></i>Generar Reporte
                </button>
            </div>

            <!-- Formulario de Ingreso -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Registrar Ingreso de Vehículo</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <input type="text" id="vehiculo-placa" placeholder="Placa"
                           class="border rounded-lg px-4 py-2">
                    <select id="vehiculo-tipo" class="border rounded-lg px-4 py-2">
                        <option value="Carro">Carro</option>
                        <option value="Moto">Moto</option>
                    </select>
                    <input type="text" id="vehiculo-visita" placeholder="Visita a (Torre - Apto)"
                           class="border rounded-lg px-4 py-2">
                </div>
                <button onclick="registrarIngresoVehiculo()"
                        class="mt-4 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-plus mr-2"></i>Registrar Ingreso
                </button>
            </div>

            <!-- Lista de Vehículos Activos -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Vehículos en el Conjunto</h3>
                <div id="vehiculos-activos-list" class="space-y-3">
                    <p class="text-gray-500">Cargando vehículos...</p>
                </div>
            </div>
        </div>
    `;

    cargarVehiculosActivos();
}

async function registrarIngresoVehiculo() {
    const placa = document.getElementById('vehiculo-placa').value;
    const tipo = document.getElementById('vehiculo-tipo').value;
    const visita = document.getElementById('vehiculo-visita').value;

    if (!placa || !visita) {
        showNotification('Error', 'Completa todos los campos', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/vehiculos-visitantes/ingreso', {
            method: 'POST',
            body: JSON.stringify({
                placa: placa.toUpperCase(),
                tipoVehiculo: tipo,
                visitaA: visita
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', 'Vehículo registrado', 'success');
            document.getElementById('vehiculo-placa').value = '';
            document.getElementById('vehiculo-visita').value = '';
            cargarVehiculosActivos();
        }
    } catch (error) {
        showNotification('Error', error.message || 'Error al registrar', 'error');
    }
}

async function cargarVehiculosActivos() {
    try {
        const response = await fetchWithAuth('/api/vehiculos-visitantes');
        const vehiculos = await response.json();

        const activos = vehiculos.filter(v => v.activo);
        const container = document.getElementById('vehiculos-activos-list');

        if (activos.length === 0) {
            container.innerHTML = '<p class="text-gray-500">No hay vehículos en el conjunto</p>';
            return;
        }

        container.innerHTML = activos.map(v => {
            const ingreso = new Date(v.fechaIngreso);
            const ahora = new Date();
            const horas = Math.floor((ahora - ingreso) / (1000 * 60 * 60));
            const minutos = Math.floor(((ahora - ingreso) % (1000 * 60 * 60)) / (1000 * 60));

            return `
                <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-green-400 transition-colors">
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <div class="flex items-center gap-3 mb-3">
                                <div class="bg-green-100 p-3 rounded-lg">
                                    <i class="fas fa-car text-green-600 text-xl"></i>
                                </div>
                                <div>
                                    <p class="font-bold text-xl text-gray-900">${v.placa}</p>
                                    <p class="text-sm text-gray-600">${v.tipoVehiculo}</p>
                                </div>
                            </div>

                            <div class="grid grid-cols-2 gap-4 mb-3">
                                <div class="bg-blue-50 p-3 rounded-lg">
                                    <p class="text-xs text-blue-600 font-medium mb-1">
                                        <i class="fas fa-building mr-1"></i>Destino
                                    </p>
                                    <p class="font-semibold text-gray-900">${v.visitaA}</p>
                                </div>
                                <div class="bg-purple-50 p-3 rounded-lg">
                                    <p class="text-xs text-purple-600 font-medium mb-1">
                                        <i class="fas fa-clock mr-1"></i>Tiempo
                                    </p>
                                    <p class="font-semibold text-gray-900">${horas}h ${minutos}min</p>
                                </div>
                            </div>

                            <p class="text-xs text-gray-500">
                                <i class="fas fa-calendar mr-1"></i>
                                Ingreso: ${ingreso.toLocaleString('es-CO')}
                            </p>
                        </div>

                        <button onclick="procesarSalidaVehiculo(${v.id})"
                                class="ml-4 bg-red-600 text-white px-5 py-3 rounded-lg hover:bg-red-700 transition-colors shadow-lg">
                            <i class="fas fa-sign-out-alt mr-2"></i>Salida
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

async function procesarSalidaVehiculo(id) {
    try {
        const response = await fetchWithAuth('/api/vehiculos-visitantes/salida-calculada', {
            method: 'POST',
            body: JSON.stringify({ id })
        });

        const data = await response.json();

        if (data.success) {
            const { resumen } = data;
            showNotification(
                'Vehículo Procesado',
                `Total a cobrar: $${resumen.totalCobrado.toLocaleString('es-CO')}\n${resumen.detalleCobro}`,
                'success'
            );
            cargarVehiculosActivos();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo procesar la salida', 'error');
    }
}

async function mostrarReporteVehiculos() {
    try {
        const response = await fetchWithAuth('/api/admin/vehiculos/reporte');

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
            const reporteHTML = `
                <div class="bg-white p-6 rounded-lg">
                    <h3 class="text-xl font-bold mb-4">Reporte de Vehículos Visitantes</h3>

                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div class="bg-blue-50 p-4 rounded-lg">
                            <p class="text-sm text-gray-600">Total Vehículos</p>
                            <p class="text-2xl font-bold text-blue-600">${data.totalVehiculos}</p>
                        </div>
                        <div class="bg-green-50 p-4 rounded-lg">
                            <p class="text-sm text-gray-600">Total Recaudado</p>
                            <p class="text-2xl font-bold text-green-600">$${data.totalRecaudado.toLocaleString()}</p>
                        </div>
                    </div>

                    <div class="max-h-96 overflow-y-auto">
                        <table class="w-full">
                            <thead class="bg-gray-50 sticky top-0">
                                <tr>
                                    <th class="px-4 py-2 text-left">Placa</th>
                                    <th class="px-4 py-2 text-left">Tipo</th>
                                    <th class="px-4 py-2 text-left">Visitó</th>
                                    <th class="px-4 py-2 text-left">Fecha Ingreso</th>
                                    <th class="px-4 py-2 text-left">Cobrado</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.vehiculos.map(v => `
                                    <tr class="border-b">
                                        <td class="px-4 py-2">${v.placa}</td>
                                        <td class="px-4 py-2">${v.tipoVehiculo}</td>
                                        <td class="px-4 py-2">${v.visitaA}</td>
                                        <td class="px-4 py-2">${new Date(v.fechaIngreso).toLocaleString()}</td>
                                        <td class="px-4 py-2">${v.totalCobrado ? '$' + v.totalCobrado.toLocaleString() : 'N/A'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            `;

            showNotification('Reporte de Vehículos', reporteHTML, 'info');
        } else {
            showNotification('Error', data.mensaje || 'Error al generar el reporte', 'error');
        }
    } catch (error) {
        console.error('Error al generar reporte:', error);
        showNotification('Error', 'No se pudo generar el reporte. Verifica tu conexión y permisos.', 'error');
    }
}

function loadNoticias() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-newspaper text-green-600 mr-3"></i>
                    Gestión de Noticias
                </h2>
                <button onclick="mostrarFormularioNoticia()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-plus mr-2"></i>Nueva Noticia
                </button>
            </div>

            <!-- Lista de Noticias -->
            <div id="noticias-admin-list" class="space-y-4">
                <p class="text-gray-500">Cargando noticias...</p>
            </div>
        </div>

        <!-- Modal para crear noticia -->
        <div id="modal-noticia" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                <h3 class="text-xl font-bold mb-4">Nueva Noticia</h3>
                <div class="space-y-4">
                    <input type="text" id="noticia-titulo" placeholder="Título"
                           class="w-full border rounded-lg px-4 py-2">
                    <textarea id="noticia-contenido" placeholder="Contenido" rows="4"
                              class="w-full border rounded-lg px-4 py-2"></textarea>
                    <select id="noticia-categoria" class="w-full border rounded-lg px-4 py-2">
                        <option value="Administrativo">Administrativo</option>
                        <option value="Social">Social</option>
                        <option value="Mantenimiento">Mantenimiento</option>
                        <option value="Seguridad">Seguridad</option>
                    </select>
                    <input type="date" id="noticia-fecha-evento"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="time" id="noticia-hora-evento"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="text" id="noticia-lugar" placeholder="Lugar"
                           class="w-full border rounded-lg px-4 py-2">
                    <select id="noticia-prioridad" class="w-full border rounded-lg px-4 py-2">
                        <option value="baja">Baja</option>
                        <option value="media">Media</option>
                        <option value="alta">Alta</option>
                    </select>
                </div>
                <div class="flex gap-3 mt-6">
                    <button onclick="crearNoticia()"
                            class="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                        Crear
                    </button>
                    <button onclick="cerrarModalNoticia()"
                            class="flex-1 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    `;

    cargarNoticiasAdmin();
}

function mostrarFormularioNoticia() {
    document.getElementById('modal-noticia').classList.remove('hidden');
}

function cerrarModalNoticia() {
    document.getElementById('modal-noticia').classList.add('hidden');
}

async function crearNoticia() {
    const titulo = document.getElementById('noticia-titulo').value;
    const contenido = document.getElementById('noticia-contenido').value;
    const categoria = document.getElementById('noticia-categoria').value;
    const fechaEvento = document.getElementById('noticia-fecha-evento').value;
    const horaEvento = document.getElementById('noticia-hora-evento').value;
    const lugar = document.getElementById('noticia-lugar').value;
    const prioridad = document.getElementById('noticia-prioridad').value;

    if (!titulo || !contenido) {
        showNotification('Error', 'Completa título y contenido', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/admin/noticias', {
            method: 'POST',
            body: JSON.stringify({
                titulo, contenido, categoria, fechaEvento, horaEvento, lugar, prioridad
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', 'Noticia creada y enviada a los residentes', 'success');
            cerrarModalNoticia();
            cargarNoticiasAdmin();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo crear la noticia', 'error');
    }
}

async function cargarNoticiasAdmin() {
    try {
        const response = await fetchWithAuth('/api/noticias');
        const noticias = await response.json();

        const container = document.getElementById('noticias-admin-list');

        if (noticias.length === 0) {
            container.innerHTML = '<p class="text-gray-500">No hay noticias</p>';
            return;
        }

        container.innerHTML = noticias.map(n => `
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <h4 class="text-lg font-bold">${n.titulo}</h4>
                        <p class="text-sm text-gray-600 mt-2">${n.contenido}</p>
                        <div class="flex gap-4 mt-3 text-sm text-gray-500">
                            <span><i class="fas fa-tag mr-1"></i>${n.categoria}</span>
                            <span><i class="fas fa-calendar mr-1"></i>${n.fechaEvento || 'Sin fecha'}</span>
                            <span class="px-2 py-1 rounded text-xs ${n.prioridad === 'alta' ? 'bg-red-100 text-red-800' : n.prioridad === 'media' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}">
                                ${n.prioridad}
                            </span>
                        </div>
                    </div>
                    <button onclick="eliminarNoticia(${n.id})"
                            class="ml-4 text-red-600 hover:text-red-800">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

async function eliminarNoticia(id) {
    if (!confirm('¿Eliminar esta noticia?')) return;

    try {
        const response = await fetchWithAuth(`/api/admin/noticias/${id}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', 'Noticia eliminada', 'success');
            cargarNoticiasAdmin();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo eliminar', 'error');
    }
}

function loadPagosAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-money-bill text-green-600 mr-3"></i>
                    Gestión de Pagos
                </h2>
                <button onclick="mostrarCargaMasiva()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-upload mr-2"></i>Carga Masiva
                </button>
            </div>

            <!-- Formulario Individual -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Subir Pago Individual</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <input type="text" id="pago-torre" placeholder="Torre"
                           class="border rounded-lg px-4 py-2">
                    <input type="text" id="pago-apto" placeholder="Apartamento"
                           class="border rounded-lg px-4 py-2">
                    <input type="text" id="pago-concepto" placeholder="Concepto"
                           class="border rounded-lg px-4 py-2">
                    <input type="number" id="pago-valor" placeholder="Valor"
                           class="border rounded-lg px-4 py-2">
                    <input type="text" id="pago-mes" placeholder="Mes"
                           class="border rounded-lg px-4 py-2">
                    <input type="date" id="pago-vencimiento"
                           class="border rounded-lg px-4 py-2">
                </div>
                <button onclick="crearPagoIndividual()"
                        class="mt-4 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-plus mr-2"></i>Crear Pago
                </button>
            </div>

            <!-- Reportes -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Generar Reporte</h3>
                <div class="flex gap-4">
                    <select id="reporte-tipo" class="border rounded-lg px-4 py-2">
                        <option value="">Selecciona tipo</option>
                        <option value="torre">Por Torre</option>
                        <option value="apartamento">Por Apartamento</option>
                    </select>
                    <input type="text" id="reporte-filtro" placeholder="Valor del filtro"
                           class="border rounded-lg px-4 py-2">
                    <button onclick="generarReportePagos()"
                            class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                        Generar
                    </button>
                </div>
                <div id="reporte-resultado" class="mt-4"></div>
            </div>
        </div>

        <!-- Modal Carga Masiva -->
        <div id="modal-carga-masiva" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-4xl">
                <h3 class="text-xl font-bold mb-4">Carga Masiva de Pagos</h3>
                <p class="text-sm text-gray-600 mb-4">Formato: Torre, Apartamento, Concepto, Valor, Mes, Vencimiento (una línea por pago)</p>
                <textarea id="carga-masiva-data" rows="10"
                          placeholder="Torre 1, 101, Administración, 450000, Octubre 2025, 2025-10-15&#10;Torre 1, 102, Administración, 450000, Octubre 2025, 2025-10-15"
                          class="w-full border rounded-lg px-4 py-2"></textarea>
                <div class="flex gap-3 mt-4">
                    <button onclick="procesarCargaMasiva()"
                            class="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                        Procesar
                    </button>
                    <button onclick="cerrarCargaMasiva()"
                            class="flex-1 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    `;
}

function mostrarCargaMasiva() {
    document.getElementById('modal-carga-masiva').classList.remove('hidden');
}

function cerrarCargaMasiva() {
    document.getElementById('modal-carga-masiva').classList.add('hidden');
}

async function procesarCargaMasiva() {
    const data = document.getElementById('carga-masiva-data').value;
    const lineas = data.trim().split('\n');

    const pagos = lineas.map(linea => {
        const [torre, apartamento, concepto, valor, mes, vencimiento] = linea.split(',').map(s => s.trim());
        return { torre, apartamento, concepto, valor, mes, vencimiento };
    });

    try {
        const response = await fetchWithAuth('/api/admin/pagos/cargar-masivo', {
            method: 'POST',
            body: JSON.stringify({ pagos })
        });

        const result = await response.json();

        if (result.success) {
            showNotification('Éxito', `${result.cantidad} pagos cargados exitosamente`, 'success');
            cerrarCargaMasiva();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo procesar la carga', 'error');
    }
}

async function generarReportePagos() {
    const tipo = document.getElementById('reporte-tipo').value;
    const filtro = document.getElementById('reporte-filtro').value;

    if (!tipo || !filtro) {
        showNotification('Error', 'Selecciona tipo y filtro', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth(`/api/admin/pagos/reporte?tipo=${tipo}&filtro=${filtro}`);
        const data = await response.json();

        const container = document.getElementById('reporte-resultado');
        container.innerHTML = `
            <div class="bg-blue-50 p-4 rounded-lg">
                <h4 class="font-bold mb-2">Resumen</h4>
                <p>Total: $${data.resumen.total.toLocaleString('es-CO')}</p>
                <p>Pagado: $${data.resumen.pagados.toLocaleString('es-CO')}</p>
                <p>Pendiente: $${data.resumen.pendientes.toLocaleString('es-CO')}</p>
            </div>
        `;
    } catch (error) {
        showNotification('Error', 'No se pudo generar el reporte', 'error');
    }
}

function loadReservasAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-calendar text-green-600 mr-3"></i>
                    Gestión de Reservas
                </h2>
                <button onclick="generarReporteReservas()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                    <i class="fas fa-file-pdf mr-2"></i>Generar Reporte
                </button>
            </div>

            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Todas las Reservas</h3>
                    <p class="text-sm text-gray-600">Gestiona las reservas de todos los espacios</p>
                </div>
                <div id="reservas-admin-list" class="p-6">
                    <p class="text-gray-500 text-center py-8">Cargando reservas...</p>
                </div>
            </div>
        </div>
    `;
    cargarReservasAdmin();
}

async function cargarReservasAdmin() {
    try {
        const response = await fetchWithAuth('/api/reservas');
        const reservas = await response.json();

        const container = document.getElementById('reservas-admin-list');

        if (reservas.length === 0) {
            container.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-calendar-times text-gray-400 text-5xl mb-4"></i>
                    <p class="text-gray-500">No hay reservas registradas</p>
                </div>
            `;
            return;
        }

        container.innerHTML = `
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Espacio</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Residente</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Apartamento</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hora</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        ${reservas.map(r => `
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <i class="fas fa-map-marker-alt text-green-600 mr-2"></i>
                                        <span class="font-medium text-gray-900">${r.espacio}</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">${r.usuario}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-500">${r.apartamento || 'N/A'}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">${r.fecha}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">${r.hora}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                        ${r.estado || 'Activa'}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <button onclick="editarReservaAdmin(${r.id})"
                                            class="text-blue-600 hover:text-blue-900 mr-3">
                                        <i class="fas fa-edit"></i> Editar
                                    </button>
                                    <button onclick="eliminarReserva(${r.id})"
                                            class="text-red-600 hover:text-red-900">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('reservas-admin-list').innerHTML = `
            <div class="text-center py-8 text-red-600">
                <i class="fas fa-exclamation-triangle text-4xl mb-3"></i>
                <p>Error al cargar las reservas</p>
            </div>
        `;
    }
}

async function eliminarReserva(id) {
    if (!confirm('¿Eliminar esta reserva?')) return;

    try {
        const response = await fetchWithAuth(`/api/admin/reservas/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            showNotification('Éxito', 'Reserva eliminada', 'success');
            cargarReservasAdmin();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo eliminar', 'error');
    }
}

async function editarReservaAdmin(reservaId) {
    try {
        const response = await fetchWithAuth('/api/reservas');
        const reservas = await response.json();
        const reserva = reservas.find(r => r.id === reservaId);

        if (!reserva) {
            showNotification('Error', 'Reserva no encontrada', 'error');
            return;
        }

        const modalHTML = `
            <div id="edit-reserva-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
                <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                    <div class="p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-semibold text-gray-900">Editar Reserva</h3>
                            <button onclick="cerrarModalEditarReserva()" class="text-gray-400 hover:text-gray-600">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>

                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Espacio</label>
                                <input type="text" id="edit-espacio" value="${reserva.espacio}"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Fecha</label>
                                <input type="date" id="edit-fecha" value="${reserva.fecha}"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Hora</label>
                                <select id="edit-hora" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                    ${horariosDisponibles.map(h => `
                                        <option value="${h}" ${h === reserva.hora ? 'selected' : ''}>${h}</option>
                                    `).join('')}
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
                                <select id="edit-estado" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                    <option value="Activa" ${reserva.estado === 'Activa' ? 'selected' : ''}>Activa</option>
                                    <option value="Cancelada" ${reserva.estado === 'Cancelada' ? 'selected' : ''}>Cancelada</option>
                                    <option value="Completada" ${reserva.estado === 'Completada' ? 'selected' : ''}>Completada</option>
                                </select>
                            </div>
                        </div>

                        <div class="flex justify-end space-x-3 mt-6 pt-4 border-t">
                            <button onclick="cerrarModalEditarReserva()"
                                    class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                                Cancelar
                            </button>
                            <button onclick="guardarEdicionReserva(${reservaId})"
                                    class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                                <i class="fas fa-save mr-2"></i>Guardar Cambios
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);
    } catch (error) {
        showNotification('Error', 'No se pudo cargar la reserva', 'error');
    }
}

function cerrarModalEditarReserva() {
    const modal = document.getElementById('edit-reserva-modal');
    if (modal) modal.remove();
}

async function guardarEdicionReserva(reservaId) {
    const espacio = document.getElementById('edit-espacio').value;
    const fecha = document.getElementById('edit-fecha').value;
    const hora = document.getElementById('edit-hora').value;
    const estado = document.getElementById('edit-estado').value;

    try {
        const response = await fetchWithAuth(`/api/admin/reservas/${reservaId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ espacio, fecha, hora, estado })
        });

        if (response.ok) {
            showNotification('Éxito', 'Reserva actualizada correctamente', 'success');
            cerrarModalEditarReserva();
            cargarReservasAdmin();
        } else {
            showNotification('Error', 'No se pudo actualizar la reserva', 'error');
        }
    } catch (error) {
        showNotification('Error', 'Error al guardar los cambios', 'error');
    }
}

async function generarReporteReservas() {
    try {
        const response = await fetchWithAuth('/api/admin/reservas/reporte');
        const data = await response.json();

        showNotification('Reporte', 'Reporte generado (ver consola para detalles)', 'success');
        console.log('Reporte de Reservas:', data.reporte);
    } catch (error) {
        showNotification('Error', 'No se pudo generar el reporte', 'error');
    }
}

function loadUsuarios() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-users text-green-600 mr-3"></i>
                    Gestión de Usuarios
                </h2>
                <button onclick="mostrarFormularioUsuario()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-plus mr-2"></i>Nuevo Usuario
                </button>
            </div>

            <div id="usuarios-list" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <p class="text-gray-500">Cargando usuarios...</p>
            </div>
        </div>

        <!-- Modal Nuevo Usuario -->
        <div id="modal-usuario" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md">
                <h3 class="text-xl font-bold mb-4">Nuevo Usuario</h3>
                <div class="space-y-3">
                    <input type="text" id="usuario-nombre" placeholder="Nombre completo"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="email" id="usuario-email" placeholder="Email"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="password" id="usuario-password" placeholder="Contraseña"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="text" id="usuario-torre" placeholder="Torre"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="text" id="usuario-apto" placeholder="Apartamento"
                           class="w-full border rounded-lg px-4 py-2">
                    <select id="usuario-rol" class="w-full border rounded-lg px-4 py-2">
                        <option value="residente">Residente</option>
                        <option value="admin">Administrador</option>
                        <option value="vigilante">Vigilante</option>
                    </select>
                </div>
                <div class="flex gap-3 mt-4">
                    <button onclick="crearUsuario()"
                            class="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                        Crear
                    </button>
                    <button onclick="cerrarModalUsuario()"
                            class="flex-1 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    `;
    cargarUsuarios();
}

function mostrarFormularioUsuario() {
    document.getElementById('modal-usuario').classList.remove('hidden');
}

function cerrarModalUsuario() {
    document.getElementById('modal-usuario').classList.add('hidden');
}

async function crearUsuario() {
    const nombre = document.getElementById('usuario-nombre').value;
    const email = document.getElementById('usuario-email').value;
    const password = document.getElementById('usuario-password').value;
    const torre = document.getElementById('usuario-torre').value;
    const apartamento = document.getElementById('usuario-apto').value;
    const rol = document.getElementById('usuario-rol').value;

    if (!nombre || !email || !password || !torre || !apartamento) {
        showNotification('Error', 'Completa todos los campos', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/admin/usuarios', {
            method: 'POST',
            body: JSON.stringify({ nombre, email, password, torre, apartamento, rol })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', 'Usuario creado. Parqueadero asignado automáticamente.', 'success');
            cerrarModalUsuario();
            cargarUsuarios();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo crear el usuario', 'error');
    }
}

async function cargarUsuarios() {
    try {
        const response = await fetchWithAuth('/api/admin/usuarios/todos');
        const data = await response.json();

        const container = document.getElementById('usuarios-list');
        container.innerHTML = data.usuarios.map(u => `
            <div class="flex justify-between items-center p-4 bg-gray-50 rounded-lg mb-3">
                <div>
                    <p class="font-bold">${u.nombre}</p>
                    <p class="text-sm text-gray-600">${u.email} - ${u.apartamento}</p>
                    <span class="text-xs px-2 py-1 rounded ${u.rol === 'admin' ? 'bg-red-100 text-red-800' : u.rol === 'vigilante' ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}">
                        ${u.rol}
                    </span>
                </div>
                <span class="${u.activo ? 'text-green-600' : 'text-red-600'}">
                    ${u.activo ? 'Activo' : 'Inactivo'}
                </span>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

function loadPermisosAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-key text-green-600 mr-3"></i>
                    Gestión de Permisos
                </h2>
            </div>

            <div id="solicitudes-list" class="space-y-4">
                <p class="text-gray-500">Cargando solicitudes...</p>
            </div>
        </div>
    `;
    cargarSolicitudesPermisos();
}

async function cargarSolicitudesPermisos() {
    try {
        const response = await fetchWithAuth('/api/admin/solicitudes');
        const data = await response.json();

        const container = document.getElementById('solicitudes-list');

        if (!data.solicitudes || data.solicitudes.length === 0) {
            container.innerHTML = '<p class="text-gray-500">No hay solicitudes pendientes</p>';
            return;
        }

        container.innerHTML = data.solicitudes.map(s => `
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <h4 class="font-bold text-lg">${s.tipo}</h4>
                        <p class="text-sm text-gray-600 mt-2">${s.descripcion}</p>
                        <p class="text-xs text-gray-500 mt-1">Solicitado por: ${s.solicitadoPor} - ${s.apartamento}</p>
                        <p class="text-xs text-gray-500">Fecha: ${new Date(s.fechaSolicitud).toLocaleString('es-CO')}</p>
                    </div>
                    ${s.estado === 'pendiente' ? `
                        <div class="flex gap-2 ml-4">
                            <button onclick="procesarSolicitud(${s.id}, 'aprobado')"
                                    class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                                Aprobar
                            </button>
                            <button onclick="procesarSolicitud(${s.id}, 'rechazado')"
                                    class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                                Rechazar
                            </button>
                        </div>
                    ` : `
                        <span class="px-3 py-1 rounded text-sm ${s.estado === 'aprobado' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${s.estado}
                        </span>
                    `}
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

async function procesarSolicitud(id, estado) {
    const observaciones = prompt(`Observaciones para ${estado === 'aprobado' ? 'aprobar' : 'rechazar'}:`);

    try {
        const response = await fetchWithAuth(`/api/admin/solicitudes/${id}`, {
            method: 'PUT',
            body: JSON.stringify({ estado, observaciones })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', `Solicitud ${estado}`, 'success');
            cargarSolicitudesPermisos();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo procesar', 'error');
    }
}

function loadCamarasAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-video text-green-600 mr-3"></i>
                    Gestión de Cámaras
                </h2>
                <button onclick="agregarCamara()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-plus mr-2"></i>Agregar Cámara
                </button>
            </div>

            <div id="camaras-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <p class="text-gray-500">Cargando cámaras...</p>
            </div>
        </div>
    `;
    cargarCamaras();
}

async function cargarCamaras() {
    try {
        const response = await fetchWithAuth('/api/admin/camaras');
        const data = await response.json();

        const container = document.getElementById('camaras-grid');
        container.innerHTML = data.camaras.map(c => `
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                <div class="aspect-video bg-gray-200 rounded-lg mb-3 flex items-center justify-center">
                    <i class="fas fa-video text-4xl text-gray-400"></i>
                </div>
                <h4 class="font-bold">${c.nombre}</h4>
                <p class="text-sm text-gray-600">${c.ubicacion}</p>
                <div class="flex items-center justify-between mt-3">
                    <label class="flex items-center text-sm">
                        <input type="checkbox" ${c.visible_residentes ? 'checked' : ''}
                               onchange="toggleVisibilidadCamara(${c.id})"
                               class="mr-2">
                        Visible residentes
                    </label>
                    <span class="text-xs px-2 py-1 rounded ${c.activa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                        ${c.activa ? 'Activa' : 'Inactiva'}
                    </span>
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

async function toggleVisibilidadCamara(id) {
    try {
        const camaraActual = await fetchWithAuth(`/api/admin/camaras`).then(r => r.json());
        const camara = camaraActual.camaras.find(c => c.id === id);

        await fetchWithAuth(`/api/admin/camaras/${id}`, {
            method: 'PUT',
            body: JSON.stringify({ visible_residentes: !camara.visible_residentes })
        });

        showNotification('Éxito', 'Visibilidad actualizada', 'success');
    } catch (error) {
        showNotification('Error', 'No se pudo actualizar', 'error');
    }
}

function agregarCamara() {
    showNotification('Info', 'Funcionalidad de agregar cámara en desarrollo', 'info');
}

function loadPQRSAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-clipboard-list text-green-600 mr-3"></i>
                    Gestión de PQRS
                </h2>
            </div>

            <div id="pqrs-list" class="space-y-4">
                <p class="text-gray-500">Cargando PQRS...</p>
            </div>
        </div>
    `;
    cargarPQRSAdmin();
}

async function cargarPQRSAdmin() {
    try {
        const response = await fetchWithAuth('/api/admin/pqrs/todas');
        const data = await response.json();

        const container = document.getElementById('pqrs-list');
        container.innerHTML = data.pqrs.map(p => `
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <div class="flex items-center gap-3 mb-2">
                            <h4 class="font-bold text-lg">${p.asunto}</h4>
                            <span class="px-2 py-1 rounded text-xs ${
                                p.estado === 'Resuelto' ? 'bg-green-100 text-green-800' :
                                p.estado === 'En proceso' ? 'bg-yellow-100 text-yellow-800' :
                                p.estado === 'Rechazado' ? 'bg-red-100 text-red-800' :
                                'bg-gray-100 text-gray-800'
                            }">
                                ${p.estado}
                            </span>
                        </div>
                        <p class="text-sm text-gray-600">${p.descripcion || ''}</p>
                        <p class="text-xs text-gray-500 mt-2">Tipo: ${p.tipo} - Fecha: ${p.fecha}</p>
                        ${p.respuesta ? `<p class="text-sm mt-2 p-2 bg-blue-50 rounded">Respuesta: ${p.respuesta}</p>` : ''}
                    </div>
                    ${p.estado === 'Pendiente' ? `
                        <button onclick="mostrarResponderPQRS(${p.id})"
                                class="ml-4 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                            Responder
                        </button>
                    ` : ''}
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

function mostrarResponderPQRS(id) {
    const respuesta = prompt('Escribe tu respuesta:');
    if (!respuesta) return;

    const estado = confirm('¿Marcar como Resuelto? (Cancelar para "En proceso")') ? 'Resuelto' : 'En proceso';

    responderPQRS(id, estado, respuesta);
}

async function responderPQRS(id, estado, respuesta) {
    try {
        const response = await fetchWithAuth(`/api/admin/pqrs/${id}`, {
            method: 'PUT',
            body: JSON.stringify({ estado, respuesta })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', 'PQRS actualizado', 'success');
            cargarPQRSAdmin();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo responder', 'error');
    }
}

function loadEncuestasAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-poll text-green-600 mr-3"></i>
                    Encuestas y Votaciones
                </h2>
                <button onclick="mostrarCrearEncuesta()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-plus mr-2"></i>Nueva Encuesta
                </button>
            </div>

            <div id="encuestas-list" class="space-y-4">
                <p class="text-gray-500">Cargando encuestas...</p>
            </div>
        </div>

        <!-- Modal Crear Encuesta -->
        <div id="modal-encuesta" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-2xl">
                <h3 class="text-xl font-bold mb-4">Nueva Encuesta/Votación</h3>
                <div class="space-y-3">
                    <input type="text" id="encuesta-titulo" placeholder="Título"
                           class="w-full border rounded-lg px-4 py-2">
                    <textarea id="encuesta-descripcion" placeholder="Descripción" rows="3"
                              class="w-full border rounded-lg px-4 py-2"></textarea>
                    <select id="encuesta-tipo" class="w-full border rounded-lg px-4 py-2">
                        <option value="encuesta">Encuesta</option>
                        <option value="votacion">Votación</option>
                    </select>
                    <div id="opciones-container">
                        <label class="block text-sm font-medium mb-2">Opciones (una por línea)</label>
                        <textarea id="encuesta-opciones" rows="4" placeholder="Opción 1&#10;Opción 2&#10;Opción 3"
                                  class="w-full border rounded-lg px-4 py-2"></textarea>
                    </div>
                    <input type="date" id="encuesta-cierre" placeholder="Fecha de cierre"
                           class="w-full border rounded-lg px-4 py-2">
                </div>
                <div class="flex gap-3 mt-4">
                    <button onclick="crearEncuesta()"
                            class="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                        Crear
                    </button>
                    <button onclick="cerrarModalEncuesta()"
                            class="flex-1 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    `;
    cargarEncuestasAdmin();
}

function mostrarCrearEncuesta() {
    document.getElementById('modal-encuesta').classList.remove('hidden');
}

function cerrarModalEncuesta() {
    document.getElementById('modal-encuesta').classList.add('hidden');
}

async function crearEncuesta() {
    const titulo = document.getElementById('encuesta-titulo').value;
    const descripcion = document.getElementById('encuesta-descripcion').value;
    const opcionesText = document.getElementById('encuesta-opciones').value;

    const opciones = opcionesText.split('\n').filter(o => o.trim());

    if (!titulo || opciones.length < 2) {
        showNotification('Completa título y al menos 2 opciones', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/encuestas', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ titulo, descripcion, opciones })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Encuesta creada exitosamente', 'success');
            cerrarModalEncuesta();
            document.getElementById('encuesta-titulo').value = '';
            document.getElementById('encuesta-descripcion').value = '';
            document.getElementById('encuesta-opciones').value = '';
            cargarEncuestasAdmin();
        } else {
            showNotification(data.mensaje || 'Error al crear encuesta', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al crear encuesta', 'error');
    }
}

async function cargarEncuestasAdmin() {
    try {
        const response = await fetchWithAuth('/api/encuestas');
        const data = await response.json();

        const container = document.getElementById('encuestas-list');

        if (!data.encuestas || data.encuestas.length === 0) {
            container.innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <i class="fas fa-poll text-4xl mb-2"></i>
                    <p>No hay encuestas creadas</p>
                </div>
            `;
            return;
        }

        container.innerHTML = data.encuestas.map(e => {
            const totalVotos = e.opciones.reduce((sum, op) => sum + op.votos, 0);
            const fecha = new Date(e.fechaCreacion);

            return `
                <div class="bg-white rounded-lg shadow-md border border-gray-200 p-6">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h4 class="font-bold text-xl text-gray-800">${e.titulo}</h4>
                            <p class="text-sm text-gray-600 mt-1">${e.descripcion}</p>
                            <p class="text-xs text-gray-500 mt-2">
                                <i class="fas fa-calendar mr-1"></i>${fecha.toLocaleDateString('es-CO')}
                                <span class="ml-3"><i class="fas fa-user mr-1"></i>${e.creadoPor}</span>
                            </p>
                        </div>
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${e.estado === 'activa' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                            ${e.estado === 'activa' ? 'Activa' : 'Cerrada'}
                        </span>
                    </div>

                    <div class="space-y-3 mb-4">
                        ${e.opciones.map(op => {
                            const porcentaje = totalVotos > 0 ? ((op.votos / totalVotos) * 100).toFixed(1) : 0;
                            return `
                                <div>
                                    <div class="flex justify-between items-center mb-1">
                                        <span class="text-sm font-medium text-gray-700">${op.texto}</span>
                                        <span class="text-sm text-gray-600">${op.votos} votos (${porcentaje}%)</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div class="bg-green-600 h-2 rounded-full" style="width: ${porcentaje}%"></div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>

                    <div class="flex justify-between items-center pt-4 border-t border-gray-200">
                        <span class="text-sm text-gray-600">
                            <i class="fas fa-users mr-1"></i>${e.votantes.length} votantes
                        </span>
                        <div class="flex gap-2">
                            ${e.estado === 'activa' ? `
                                <button onclick="cerrarEncuesta(${e.id})"
                                        class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 text-sm">
                                    <i class="fas fa-lock mr-1"></i>Cerrar
                                </button>
                            ` : ''}
                            <button onclick="eliminarEncuesta(${e.id})"
                                    class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 text-sm">
                                <i class="fas fa-trash mr-1"></i>Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al cargar encuestas', 'error');
    }
}

async function cerrarEncuesta(id) {
    if (!confirm('¿Cerrar esta encuesta? No se podrán agregar más votos.')) return;

    try {
        const response = await fetchWithAuth(`/api/encuestas/${id}/cerrar`, {
            method: 'PUT'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Encuesta cerrada exitosamente', 'success');
            cargarEncuestasAdmin();
        } else {
            showNotification(data.mensaje || 'Error al cerrar encuesta', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al cerrar encuesta', 'error');
    }
}

async function eliminarEncuesta(id) {
    if (!confirm('¿Eliminar esta encuesta permanentemente?')) return;

    try {
        const response = await fetchWithAuth(`/api/encuestas/${id}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Encuesta eliminada exitosamente', 'success');
            cargarEncuestasAdmin();
        } else {
            showNotification(data.mensaje || 'Error al eliminar encuesta', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al eliminar encuesta', 'error');
    }
}

// ============= ENCUESTAS PARA RESIDENTES =============

async function loadEncuestasResidente() {
    const content = document.getElementById('content-area');

    content.innerHTML = `
        <div class="max-w-4xl mx-auto p-6">
            <h1 class="text-3xl font-bold text-blue-700 mb-6">
                <i class="fas fa-poll mr-2"></i>Encuestas y Registro
            </h1>

            <!-- Sub-pestañas -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
                <div class="border-b border-gray-200">
                    <nav class="flex space-x-8 px-6" id="encuestas-tabs">
                        <button onclick="switchEncuestasTab('votaciones')" id="encuestas-tab-votaciones"
                                class="py-4 px-2 border-b-2 border-blue-600 font-medium text-sm text-blue-600">
                            <i class="fas fa-poll mr-2"></i>Votaciones
                        </button>
                        <button onclick="switchEncuestasTab('registros')" id="encuestas-tab-registros"
                                class="py-4 px-2 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                            <i class="fas fa-clipboard-list mr-2"></i>Registro de Eventos
                        </button>
                    </nav>
                </div>
            </div>

            <!-- Contenedor dinámico -->
            <div id="encuestas-content-area" class="space-y-6">
                <p class="text-gray-500">Cargando...</p>
            </div>
        </div>
    `;

    // Cargar votaciones por defecto
    switchEncuestasTab('votaciones');
}

function switchEncuestasTab(tabName) {
    // Actualizar estilos de pestañas
    document.querySelectorAll('[id^="encuestas-tab-"]').forEach(tab => {
        tab.className = 'py-4 px-2 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300';
    });

    document.getElementById(`encuestas-tab-${tabName}`).className = 'py-4 px-2 border-b-2 border-blue-600 font-medium text-sm text-blue-600';

    // Cargar contenido según pestaña
    if (tabName === 'votaciones') {
        cargarEncuestasResidente();
    } else if (tabName === 'registros') {
        cargarRegistrosEventos();
    }
}

async function cargarRegistrosEventos() {
    const container = document.getElementById('encuestas-content-area');

    container.innerHTML = `
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-blue-600">
                    <i class="fas fa-calendar-check mr-2"></i>Registro de Eventos
                </h2>
                <button onclick="mostrarFormularioRegistroEvento()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition">
                    <i class="fas fa-plus mr-2"></i>Nuevo Registro
                </button>
            </div>

            <!-- Formulario oculto -->
            <div id="formulario-registro-evento" class="hidden mb-6 p-6 bg-blue-50 rounded-lg border-2 border-blue-200">
                <h3 class="text-lg font-bold mb-4 text-blue-900">Registrar Asistentes para Evento</h3>
                <form id="form-registro-evento" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Nombre del Evento</label>
                        <input type="text" id="nombre-evento" required placeholder="Ej: Halloween 2025, Fiesta de Fin de Año, etc." class="w-full p-3 border border-gray-300 rounded-lg">
                    </div>

                    <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                        <h4 class="font-semibold text-gray-800 mb-3">Asistentes (Máximo 5 personas)</h4>
                        <div id="asistentes-container" class="space-y-3">
                            <!-- Asistente 1 (obligatorio) -->
                            <div class="asistente-item p-3 bg-white rounded border border-gray-300">
                                <div class="flex items-center justify-between mb-2">
                                    <span class="font-medium text-sm text-gray-700">Asistente 1 *</span>
                                </div>
                                <div class="grid grid-cols-2 gap-3">
                                    <input type="text" id="asistente-1-nombre" required placeholder="Nombre completo" class="p-2 border border-gray-300 rounded">
                                    <input type="number" id="asistente-1-edad" required placeholder="Edad" min="1" max="120" class="p-2 border border-gray-300 rounded">
                                </div>
                            </div>
                        </div>
                        <button type="button" onclick="agregarAsistente()" id="btn-agregar-asistente" class="mt-3 text-blue-600 hover:text-blue-700 text-sm font-medium">
                            <i class="fas fa-plus-circle mr-1"></i>Agregar otro asistente
                        </button>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Notas adicionales (opcional)</label>
                        <textarea id="notas-evento" rows="2" placeholder="Información adicional sobre el registro..." class="w-full p-3 border border-gray-300 rounded-lg"></textarea>
                    </div>

                    <div class="flex gap-3">
                        <button type="submit" class="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-semibold">
                            <i class="fas fa-save mr-2"></i>Guardar Registro
                        </button>
                        <button type="button" onclick="ocultarFormularioRegistroEvento()" class="px-6 bg-gray-200 text-gray-700 py-3 rounded-lg hover:bg-gray-300">
                            Cancelar
                        </button>
                    </div>
                </form>
            </div>

            <!-- Lista de registros -->
            <div id="lista-registros-eventos">
                <p class="text-gray-500">Cargando registros...</p>
            </div>
        </div>
    `;

    // Variable global para contar asistentes
    window.contadorAsistentes = 1;

    // Manejar formulario
    document.getElementById('form-registro-evento').addEventListener('submit', async (e) => {
        e.preventDefault();

        const nombreEvento = document.getElementById('nombre-evento').value;
        const notas = document.getElementById('notas-evento').value;

        // Recolectar asistentes
        const asistentes = [];
        for (let i = 1; i <= window.contadorAsistentes; i++) {
            const nombre = document.getElementById(`asistente-${i}-nombre`)?.value;
            const edad = document.getElementById(`asistente-${i}-edad`)?.value;

            if (nombre && edad) {
                asistentes.push({
                    nombre: nombre.trim(),
                    edad: parseInt(edad)
                });
            }
        }

        if (asistentes.length === 0) {
            showNotification('Debe registrar al menos un asistente', 'warning');
            return;
        }

        try {
            const response = await fetchWithAuth('/api/registros-eventos', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    nombreEvento,
                    asistentes,
                    notas: notas.trim()
                })
            });

            const data = await response.json();

            if (data.success) {
                showNotification('Registro guardado exitosamente', 'success');
                document.getElementById('form-registro-evento').reset();
                window.contadorAsistentes = 1;
                ocultarFormularioRegistroEvento();
                cargarRegistrosEventos();
            } else {
                showNotification('Error al guardar registro', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error al guardar registro', 'error');
        }
    });

    // Cargar registros existentes
    try {
        const response = await fetchWithAuth('/api/registros-eventos');
        const data = await response.json();

        const listaContainer = document.getElementById('lista-registros-eventos');

        let registros = [];
        if (Array.isArray(data)) {
            registros = data;
        } else if (data.registros) {
            registros = data.registros;
        }

        if (registros.length === 0) {
            listaContainer.innerHTML = `
                <div class="text-center py-12 bg-blue-50 rounded-lg">
                    <i class="fas fa-calendar-alt text-6xl text-blue-300 mb-4"></i>
                    <p class="text-lg text-gray-600">No hay registros de eventos aún</p>
                </div>
            `;
            return;
        }

        listaContainer.innerHTML = `
            <div class="space-y-4">
                ${registros.map(r => `
                    <div class="bg-white border-2 border-blue-200 rounded-lg p-5 hover:shadow-lg transition">
                        <div class="flex items-start justify-between mb-4">
                            <div>
                                <h3 class="font-bold text-xl text-gray-900">${r.nombreEvento}</h3>
                                <p class="text-sm text-gray-500 mt-1">
                                    <i class="fas fa-calendar mr-1"></i>
                                    ${new Date(r.fechaRegistro).toLocaleString('es-CO')}
                                </p>
                                <p class="text-sm text-gray-500">
                                    <i class="fas fa-home mr-1"></i>${r.apartamento || 'N/A'}
                                </p>
                            </div>
                            <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-semibold">
                                ${r.asistentes?.length || 0} ${r.asistentes?.length === 1 ? 'persona' : 'personas'}
                            </span>
                        </div>

                        <div class="bg-gray-50 rounded-lg p-4">
                            <h4 class="font-semibold text-gray-700 mb-3">Asistentes:</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                ${r.asistentes?.map(a => `
                                    <div class="flex items-center space-x-3 bg-white p-3 rounded border border-gray-200">
                                        <div class="bg-blue-100 p-2 rounded-full">
                                            <i class="fas fa-user text-blue-600"></i>
                                        </div>
                                        <div>
                                            <p class="font-medium text-gray-900">${a.nombre}</p>
                                            <p class="text-sm text-gray-600">${a.edad} años</p>
                                        </div>
                                    </div>
                                `).join('') || '<p class="text-gray-500">Sin asistentes</p>'}
                            </div>
                        </div>

                        ${r.notas ? `
                            <div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded">
                                <p class="text-sm text-gray-700"><i class="fas fa-sticky-note mr-2 text-yellow-600"></i>${r.notas}</p>
                            </div>
                        ` : ''}
                    </div>
                `).join('')}
            </div>
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('lista-registros-eventos').innerHTML = `
            <div class="text-center py-12 bg-red-50 rounded-lg">
                <p class="text-red-600">Error al cargar registros</p>
            </div>
        `;
    }
}

function agregarAsistente() {
    if (window.contadorAsistentes >= 5) {
        showNotification('Máximo 5 asistentes permitidos', 'warning');
        return;
    }

    window.contadorAsistentes++;
    const container = document.getElementById('asistentes-container');

    const nuevoAsistente = document.createElement('div');
    nuevoAsistente.className = 'asistente-item p-3 bg-white rounded border border-gray-300';
    nuevoAsistente.innerHTML = `
        <div class="flex items-center justify-between mb-2">
            <span class="font-medium text-sm text-gray-700">Asistente ${window.contadorAsistentes}</span>
            <button type="button" onclick="eliminarAsistente(this)" class="text-red-600 hover:text-red-700">
                <i class="fas fa-times-circle"></i>
            </button>
        </div>
        <div class="grid grid-cols-2 gap-3">
            <input type="text" id="asistente-${window.contadorAsistentes}-nombre" placeholder="Nombre completo" class="p-2 border border-gray-300 rounded">
            <input type="number" id="asistente-${window.contadorAsistentes}-edad" placeholder="Edad" min="1" max="120" class="p-2 border border-gray-300 rounded">
        </div>
    `;

    container.appendChild(nuevoAsistente);

    if (window.contadorAsistentes >= 5) {
        document.getElementById('btn-agregar-asistente').style.display = 'none';
    }
}

function eliminarAsistente(btn) {
    btn.closest('.asistente-item').remove();
    window.contadorAsistentes--;

    // Renumerar asistentes
    const asistentes = document.querySelectorAll('.asistente-item');
    asistentes.forEach((item, index) => {
        const numero = index + 1;
        item.querySelector('span').textContent = `Asistente ${numero}${numero === 1 ? ' *' : ''}`;
    });

    document.getElementById('btn-agregar-asistente').style.display = 'block';
}

function mostrarFormularioRegistroEvento() {
    document.getElementById('formulario-registro-evento').classList.remove('hidden');
    window.contadorAsistentes = 1;
}

function ocultarFormularioRegistroEvento() {
    document.getElementById('formulario-registro-evento').classList.add('hidden');
    // Reset contador y limpiar asistentes adicionales
    window.contadorAsistentes = 1;
    const container = document.getElementById('asistentes-container');
    const asistentes = container.querySelectorAll('.asistente-item');
    asistentes.forEach((item, index) => {
        if (index > 0) item.remove();
    });
    document.getElementById('btn-agregar-asistente').style.display = 'block';
}

async function cargarEncuestasResidente() {
    try {
        const response = await fetchWithAuth('/api/encuestas');
        const data = await response.json();

        const container = document.getElementById('encuestas-content-area');

        if (!data.encuestas || data.encuestas.length === 0) {
            container.innerHTML = `
                <div class="text-center py-12 text-gray-500 bg-white rounded-lg shadow-md">
                    <i class="fas fa-poll text-5xl mb-4"></i>
                    <p class="text-lg">No hay encuestas disponibles</p>
                </div>
            `;
            return;
        }

        // Obtener usuario actual para verificar si ya votó
        const token = localStorage.getItem('authToken');
        const usuarioData = token ? JSON.parse(atob(token.split('.')[1])) : null;
        const usuarioId = usuarioData ? usuarioData.userId : null;

        container.innerHTML = data.encuestas.map(e => {
            const totalVotos = e.opciones.reduce((sum, op) => sum + op.votos, 0);
            const fecha = new Date(e.fechaCreacion);
            const yaVoto = e.votantes.includes(usuarioId);
            const estaCerrada = e.estado !== 'activa';

            return `
                <div class="bg-white rounded-lg shadow-md border border-gray-200 p-6">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="font-bold text-2xl text-gray-800 mb-2">${e.titulo}</h3>
                            <p class="text-gray-600 mb-3">${e.descripcion}</p>
                            <p class="text-xs text-gray-500">
                                <i class="fas fa-calendar mr-1"></i>${fecha.toLocaleDateString('es-CO')}
                            </p>
                        </div>
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${e.estado === 'activa' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                            ${e.estado === 'activa' ? 'Activa' : 'Cerrada'}
                        </span>
                    </div>

                    ${!yaVoto && !estaCerrada ? `
                        <!-- Formulario de votación -->
                        <div class="space-y-2 mb-4">
                            ${e.opciones.map(op => `
                                <label class="flex items-center p-3 border border-gray-300 rounded-lg hover:bg-blue-50 cursor-pointer transition duration-200">
                                    <input type="radio" name="voto-${e.id}" value="${op.id}" class="mr-3">
                                    <span class="text-gray-700">${op.texto}</span>
                                </label>
                            `).join('')}
                        </div>
                        <button onclick="votarEncuesta(${e.id})"
                                class="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white font-bold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-blue-800 transition duration-200">
                            <i class="fas fa-check-circle mr-2"></i>Enviar Mi Voto
                        </button>
                    ` : `
                        <!-- Resultados -->
                        <div class="space-y-3 mb-4">
                            ${e.opciones.map(op => {
                                const porcentaje = totalVotos > 0 ? ((op.votos / totalVotos) * 100).toFixed(1) : 0;
                                return `
                                    <div>
                                        <div class="flex justify-between items-center mb-1">
                                            <span class="text-sm font-medium text-gray-700">${op.texto}</span>
                                            <span class="text-sm font-semibold text-gray-600">${op.votos} votos (${porcentaje}%)</span>
                                        </div>
                                        <div class="w-full bg-gray-200 rounded-full h-3">
                                            <div class="bg-blue-600 h-3 rounded-full transition-all duration-500" style="width: ${porcentaje}%"></div>
                                        </div>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                        <div class="flex justify-between items-center pt-4 border-t border-gray-200">
                            <span class="text-sm text-gray-600">
                                <i class="fas fa-users mr-1"></i>${e.votantes.length} personas han votado
                            </span>
                            ${yaVoto ? `
                                <span class="text-sm font-semibold text-green-600">
                                    <i class="fas fa-check-circle mr-1"></i>Ya votaste
                                </span>
                            ` : `
                                <span class="text-sm font-semibold text-gray-500">
                                    <i class="fas fa-lock mr-1"></i>Encuesta cerrada
                                </span>
                            `}
                        </div>
                    `}
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al cargar encuestas', 'error');
    }
}

async function votarEncuesta(encuestaId) {
    const opcionSeleccionada = document.querySelector(`input[name="voto-${encuestaId}"]:checked`);

    if (!opcionSeleccionada) {
        showNotification('Por favor selecciona una opción', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth(`/api/encuestas/${encuestaId}/votar`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ opcionId: parseInt(opcionSeleccionada.value) })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('¡Tu voto ha sido registrado exitosamente!', 'success');
            cargarEncuestasResidente();
        } else {
            showNotification(data.mensaje || 'Error al votar', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al votar', 'error');
    }
}

function loadDocumentosAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-folder text-green-600 mr-3"></i>
                    Gestión de Documentos
                </h2>
                <button onclick="mostrarSubirDocumento()"
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    <i class="fas fa-upload mr-2"></i>Subir Documento
                </button>
            </div>

            <div id="documentos-list" class="space-y-4">
                <p class="text-gray-500">Cargando documentos...</p>
            </div>
        </div>

        <!-- Modal Subir Documento -->
        <div id="modal-documento" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md">
                <h3 class="text-xl font-bold mb-4">Subir Documento</h3>
                <div class="space-y-3">
                    <input type="text" id="doc-titulo" placeholder="Título"
                           class="w-full border rounded-lg px-4 py-2">
                    <select id="doc-tipo" class="w-full border rounded-lg px-4 py-2">
                        <option value="reglamento">Reglamento</option>
                        <option value="acta">Acta</option>
                        <option value="comunicado">Comunicado</option>
                        <option value="otro">Otro</option>
                    </select>
                    <textarea id="doc-descripcion" placeholder="Descripción" rows="3"
                              class="w-full border rounded-lg px-4 py-2"></textarea>
                    <input type="text" id="doc-url" placeholder="URL del documento"
                           class="w-full border rounded-lg px-4 py-2">
                    <input type="text" id="doc-categoria" placeholder="Categoría"
                           class="w-full border rounded-lg px-4 py-2">
                </div>
                <div class="flex gap-3 mt-4">
                    <button onclick="subirDocumento()"
                            class="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                        Subir
                    </button>
                    <button onclick="cerrarModalDocumento()"
                            class="flex-1 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    `;
    cargarDocumentos();
}

function mostrarSubirDocumento() {
    document.getElementById('modal-documento').classList.remove('hidden');
}

function cerrarModalDocumento() {
    document.getElementById('modal-documento').classList.add('hidden');
}

async function subirDocumento() {
    const titulo = document.getElementById('doc-titulo').value;
    const tipo = document.getElementById('doc-tipo').value;
    const descripcion = document.getElementById('doc-descripcion').value;
    const url = document.getElementById('doc-url').value;
    const categoria = document.getElementById('doc-categoria').value;

    if (!titulo || !url) {
        showNotification('Error', 'Completa título y URL', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/admin/documentos', {
            method: 'POST',
            body: JSON.stringify({ titulo, tipo, descripcion, url, categoria })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Éxito', 'Documento subido', 'success');
            cerrarModalDocumento();
            cargarDocumentos();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo subir', 'error');
    }
}

async function cargarDocumentos() {
    try {
        const response = await fetchWithAuth('/api/documentos');
        const data = await response.json();

        const container = document.getElementById('documentos-list');
        container.innerHTML = data.documentos.map(d => `
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <h4 class="font-bold text-lg">${d.titulo}</h4>
                        <p class="text-sm text-gray-600 mt-2">${d.descripcion || ''}</p>
                        <div class="flex gap-3 mt-2 text-xs text-gray-500">
                            <span><i class="fas fa-tag mr-1"></i>${d.tipo}</span>
                            <span><i class="fas fa-folder mr-1"></i>${d.categoria || 'Sin categoría'}</span>
                        </div>
                        <a href="${d.url}" target="_blank"
                           class="inline-block mt-3 text-blue-600 hover:underline">
                            <i class="fas fa-download mr-1"></i>Descargar
                        </a>
                    </div>
                    <button onclick="eliminarDocumento(${d.id})"
                            class="ml-4 text-red-600 hover:text-red-800">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error:', error);
    }
}

async function eliminarDocumento(id) {
    if (!confirm('¿Eliminar este documento?')) return;

    try {
        const response = await fetchWithAuth(`/api/admin/documentos/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            showNotification('Éxito', 'Documento eliminado', 'success');
            cargarDocumentos();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo eliminar', 'error');
    }
}

// Verificar autenticación al cargar la página
document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    const savedTheme = localStorage.getItem('theme');

    if (savedTheme === 'dark') {
        document.body.classList.add('dark');
        document.getElementById('theme-icon').classList.remove('fa-moon');
        document.getElementById('theme-icon').classList.add('fa-sun');
        currentTheme = 'dark';
    }

    if (token && user) {
        try {
            currentUser = JSON.parse(user);
            showApp();
        } catch (error) {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
        }
    }

    // Actualizar botones de scroll al redimensionar ventana
    window.addEventListener('resize', updateScrollButtons);

    // Actualizar botones al hacer scroll en el contenedor
    const tabContainer = document.getElementById('tab-container');
    if (tabContainer) {
        tabContainer.addEventListener('scroll', updateScrollButtons);
    }
});

// ========================================
// DASHBOARD VIGILANTE
// ========================================

async function loadPanelSeguridad() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <!-- Header -->
            <div class="mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-shield-alt text-orange-600 mr-3"></i>
                    Panel de Seguridad
                </h2>
                <p class="text-gray-600 mt-1">Dashboard de vigilancia y control</p>
            </div>

            <!-- Estadísticas Rápidas -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-blue-100 text-sm">Vehículos Activos</p>
                        <i class="fas fa-car text-3xl text-blue-200"></i>
                    </div>
                    <p class="text-4xl font-bold" id="vehiculos-activos-count">-</p>
                    <p class="text-blue-100 text-xs mt-2">En el conjunto ahora</p>
                </div>

                <div class="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-orange-100 text-sm">Paquetes Pendientes</p>
                        <i class="fas fa-box text-3xl text-orange-200"></i>
                    </div>
                    <p class="text-4xl font-bold" id="paquetes-pendientes-count">-</p>
                    <p class="text-orange-100 text-xs mt-2">Por retirar</p>
                </div>

                <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-green-100 text-sm">Permisos Vigentes</p>
                        <i class="fas fa-key text-3xl text-green-200"></i>
                    </div>
                    <p class="text-4xl font-bold" id="permisos-vigentes-count">-</p>
                    <p class="text-green-100 text-xs mt-2">Activos hoy</p>
                </div>

                <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-6 text-white shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-purple-100 text-sm">Incidentes</p>
                        <i class="fas fa-exclamation-triangle text-3xl text-purple-200"></i>
                    </div>
                    <p class="text-4xl font-bold">0</p>
                    <p class="text-purple-100 text-xs mt-2">Hoy</p>
                </div>
            </div>

            <!-- Accesos Rápidos -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
                <h3 class="text-xl font-semibold mb-4 flex items-center">
                    <i class="fas fa-bolt mr-2 text-orange-600"></i>
                    Accesos Rápidos
                </h3>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <button onclick="switchTab('control-vehiculos-vigilante')"
                            class="p-4 border-2 border-blue-200 rounded-lg hover:bg-blue-50 hover:border-blue-400 transition-all group">
                        <i class="fas fa-car text-3xl text-blue-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Control Vehículos</p>
                    </button>
                    <button onclick="switchTab('paquetes-vigilante')"
                            class="p-4 border-2 border-orange-200 rounded-lg hover:bg-orange-50 hover:border-orange-400 transition-all group">
                        <i class="fas fa-box text-3xl text-orange-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Registrar Paquete</p>
                    </button>
                    <button onclick="switchTab('permisos-vigilante')"
                            class="p-4 border-2 border-green-200 rounded-lg hover:bg-green-50 hover:border-green-400 transition-all group">
                        <i class="fas fa-key text-3xl text-green-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Ver Permisos</p>
                    </button>
                    <button onclick="switchTab('registros')"
                            class="p-4 border-2 border-purple-200 rounded-lg hover:bg-purple-50 hover:border-purple-400 transition-all group">
                        <i class="fas fa-clipboard-list text-3xl text-purple-600 mb-2 group-hover:scale-110 transition-transform"></i>
                        <p class="text-sm font-medium text-gray-700">Ver Registros</p>
                    </button>
                </div>
            </div>

            <!-- Actividad Reciente -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Vehículos Recientes -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="p-4 border-b border-gray-200 bg-blue-50">
                        <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-car mr-2 text-blue-600"></i>
                            Últimos Ingresos Vehiculares
                        </h3>
                    </div>
                    <div class="p-4">
                        <div id="vehiculos-recientes" class="space-y-3">
                            <p class="text-gray-500 text-sm">Cargando...</p>
                        </div>
                    </div>
                </div>

                <!-- Paquetes Recientes -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="p-4 border-b border-gray-200 bg-orange-50">
                        <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-box mr-2 text-orange-600"></i>
                            Paquetes Registrados Hoy
                        </h3>
                    </div>
                    <div class="p-4">
                        <div id="paquetes-recientes" class="space-y-3">
                            <p class="text-gray-500 text-sm">Cargando...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    cargarDashboardVigilante();
}

async function cargarDashboardVigilante() {
    try {
        // Cargar vehículos activos
        const vehiculosResponse = await fetchWithAuth('/api/vehiculos-visitantes');
        const vehiculos = await vehiculosResponse.json();
        const vehiculosActivos = vehiculos.filter(v => v.activo);
        document.getElementById('vehiculos-activos-count').textContent = vehiculosActivos.length;

        // Mostrar últimos 5 vehículos
        const vehiculosContainer = document.getElementById('vehiculos-recientes');
        if (vehiculosActivos.length === 0) {
            vehiculosContainer.innerHTML = '<p class="text-gray-500 text-sm">No hay vehículos en el conjunto</p>';
        } else {
            vehiculosContainer.innerHTML = vehiculosActivos.slice(0, 5).map(v => {
                const ingreso = new Date(v.fechaIngreso);
                return `
                    <div class="flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-100">
                        <div>
                            <p class="font-semibold text-gray-900">${v.placa}</p>
                            <p class="text-xs text-gray-600">${v.visitaA}</p>
                        </div>
                        <p class="text-xs text-gray-500">${ingreso.toLocaleTimeString('es-CO', {hour: '2-digit', minute: '2-digit'})}</p>
                    </div>
                `;
            }).join('');
        }

        // Cargar paquetes
        const paquetesResponse = await fetchWithAuth('/api/paquetes');
        const paquetes = await paquetesResponse.json();
        const paquetesPendientes = paquetes.filter(p => !p.retirado);
        document.getElementById('paquetes-pendientes-count').textContent = paquetesPendientes.length;

        // Mostrar últimos 5 paquetes
        const paquetesContainer = document.getElementById('paquetes-recientes');
        const hoy = new Date().toDateString();
        const paquetesHoy = paquetes.filter(p => new Date(p.fechaLlegada).toDateString() === hoy);

        if (paquetesHoy.length === 0) {
            paquetesContainer.innerHTML = '<p class="text-gray-500 text-sm">No hay paquetes registrados hoy</p>';
        } else {
            paquetesContainer.innerHTML = paquetesHoy.slice(0, 5).map(p => {
                return `
                    <div class="flex items-center justify-between p-3 bg-orange-50 rounded-lg border border-orange-100">
                        <div>
                            <p class="font-semibold text-gray-900">${p.torre} - ${p.apartamento}</p>
                            <p class="text-xs text-gray-600">${p.descripcion}</p>
                        </div>
                        <span class="text-xs ${p.retirado ? 'text-gray-600' : 'text-green-600'} font-semibold">
                            ${p.retirado ? 'Retirado' : 'Pendiente'}
                        </span>
                    </div>
                `;
            }).join('');
        }

        // Permisos vigentes (simulado)
        document.getElementById('permisos-vigentes-count').textContent = '0';

    } catch (error) {
        console.error('Error cargando dashboard:', error);
    }
}

// ========================================
// SISTEMA DE PAQUETES
// ========================================

async function loadPaquetesVigilante() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                    <i class="fas fa-box text-orange-600 mr-3"></i>
                    Registro de Paquetes
                </h2>
            </div>

            <!-- Formulario de Registro -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4 flex items-center">
                    <i class="fas fa-plus mr-2 text-orange-600"></i>
                    Registrar Nuevo Paquete
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input type="text" id="paquete-torre" placeholder="Torre"
                           class="border-2 border-gray-300 rounded-lg px-4 py-2 focus:border-orange-500">
                    <input type="text" id="paquete-apartamento" placeholder="Apartamento"
                           class="border-2 border-gray-300 rounded-lg px-4 py-2 focus:border-orange-500">
                    <input type="text" id="paquete-descripcion" placeholder="Descripción del paquete"
                           class="border-2 border-gray-300 rounded-lg px-4 py-2 focus:border-orange-500">
                    <input type="text" id="paquete-remitente" placeholder="Remitente"
                           class="border-2 border-gray-300 rounded-lg px-4 py-2 focus:border-orange-500">
                    <input type="text" id="paquete-empresa" placeholder="Empresa de envío"
                           class="border-2 border-gray-300 rounded-lg px-4 py-2 focus:border-orange-500">
                </div>
                <button onclick="registrarPaquete()"
                        class="mt-4 bg-orange-600 text-white px-6 py-3 rounded-lg hover:bg-orange-700 shadow-lg">
                    <i class="fas fa-save mr-2"></i>Registrar Paquete
                </button>
            </div>

            <!-- Lista de Paquetes -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-xl font-semibold mb-4">Paquetes Registrados</h3>
                <div id="paquetes-list" class="space-y-3">
                    <p class="text-gray-500">Cargando paquetes...</p>
                </div>
            </div>
        </div>
    `;

    cargarPaquetesVigilante();
}

async function registrarPaquete() {
    const torre = document.getElementById('paquete-torre').value;
    const apartamento = document.getElementById('paquete-apartamento').value;
    const descripcion = document.getElementById('paquete-descripcion').value;
    const remitente = document.getElementById('paquete-remitente').value;
    const empresa = document.getElementById('paquete-empresa').value;

    const apartamentoCompleto = torre + ' - Apto ' + apartamento;
    const nombreResidente = remitente || 'Residente';

    if (!torre || !apartamento || !descripcion) {
        showNotification('Completa los campos obligatorios', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth('/api/paquetes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                apartamento: apartamentoCompleto,
                nombreResidente,
                empresa: empresa || 'N/A',
                descripcion,
                guia: ''
            })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Paquete registrado correctamente', 'success');
            document.getElementById('paquete-torre').value = '';
            document.getElementById('paquete-apartamento').value = '';
            document.getElementById('paquete-descripcion').value = '';
            document.getElementById('paquete-remitente').value = '';
            document.getElementById('paquete-empresa').value = '';
            cargarPaquetesVigilante();
        } else {
            showNotification(data.mensaje || 'Error al registrar paquete', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al registrar paquete', 'error');
    }
}

async function cargarPaquetesVigilante() {
    try {
        const response = await fetchWithAuth('/api/paquetes');
        const data = await response.json();

        const container = document.getElementById('paquetes-list');

        if (!data.paquetes || data.paquetes.length === 0) {
            container.innerHTML = '<p class="text-gray-500">No hay paquetes registrados</p>';
            return;
        }

        container.innerHTML = data.paquetes.map(p => {
            const fecha = new Date(p.fechaRecepcion);
            const entregado = p.estado === 'Entregado';
            return `
                <div class="border-2 ${entregado ? 'border-gray-200 bg-gray-50' : 'border-orange-200 bg-orange-50'} rounded-lg p-4">
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <div class="flex items-center gap-2 mb-2">
                                <span class="bg-orange-100 px-3 py-1 rounded-full text-sm font-semibold text-orange-800">
                                    ${p.apartamento}
                                </span>
                                ${entregado ? `
                                    <span class="bg-gray-600 text-white px-3 py-1 rounded-full text-xs">
                                        <i class="fas fa-check mr-1"></i>Entregado
                                    </span>
                                ` : `
                                    <span class="bg-green-600 text-white px-3 py-1 rounded-full text-xs">
                                        <i class="fas fa-clock mr-1"></i>Pendiente
                                    </span>
                                `}
                            </div>
                            <p class="font-semibold text-gray-900">${p.descripcion}</p>
                            <p class="text-sm text-gray-600">
                                <i class="fas fa-user mr-1"></i>Para: ${p.nombreResidente}
                            </p>
                            <p class="text-sm text-gray-600">
                                <i class="fas fa-truck mr-1"></i>Empresa: ${p.empresa}
                            </p>
                            ${p.guia !== 'N/A' ? `
                                <p class="text-sm text-gray-600">
                                    <i class="fas fa-barcode mr-1"></i>Guía: ${p.guia}
                                </p>
                            ` : ''}
                            <p class="text-xs text-gray-500 mt-2">
                                <i class="fas fa-calendar mr-1"></i>Llegada: ${fecha.toLocaleString('es-CO')}
                            </p>
                            <p class="text-xs text-gray-500">
                                <i class="fas fa-user-shield mr-1"></i>Recibido por: ${p.recibidoPor}
                            </p>
                            ${entregado ? `
                                <p class="text-xs text-gray-500">
                                    <i class="fas fa-check-circle mr-1"></i>Entregado a: ${p.entregadoA} - ${new Date(p.fechaEntrega).toLocaleString('es-CO')}
                                </p>
                            ` : ''}
                        </div>
                        ${!entregado ? `
                            <button onclick="marcarPaqueteEntregado(${p.id})"
                                    class="ml-4 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                                <i class="fas fa-check mr-2"></i>Marcar Entregado
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al cargar paquetes', 'error');
    }
}

async function marcarPaqueteEntregado(id) {
    try {
        const response = await fetchWithAuth(`/api/paquetes/${id}/entregar`, {
            method: 'PUT'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Paquete marcado como entregado', 'success');
            cargarPaquetesVigilante();
        }
    } catch (error) {
        showNotification('Error', 'No se pudo actualizar el paquete', 'error');
    }
}

async function loadPaquetes() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-box text-blue-600 mr-3"></i>
                        Mis Paquetes
                    </h2>
                    <p class="text-gray-600 mt-1">Paquetes y encomiendas recibidas</p>
                </div>
            </div>

            <div id="mis-paquetes-container">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-400 mb-4"></i>
                    <p class="text-gray-600">Cargando paquetes...</p>
                </div>
            </div>
        </div>
    `;

    try {
        const response = await fetchWithAuth('/api/paquetes');
        const data = await response.json();

        const container = document.getElementById('mis-paquetes-container');

        if (!data.paquetes || data.paquetes.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-box-open text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay paquetes</h3>
                    <p class="text-gray-600">No tienes paquetes pendientes en este momento</p>
                </div>
            `;
            return;
        }

        const pendientes = data.paquetes.filter(p => p.estado === 'Pendiente');
        const retirados = data.paquetes.filter(p => p.estado === 'Entregado');

        container.innerHTML = `
            ${pendientes.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-blue-200 mb-6">
                    <div class="bg-blue-50 px-6 py-4 border-b border-blue-200">
                        <h3 class="text-xl font-semibold text-blue-900 flex items-center">
                            <i class="fas fa-box mr-2"></i>
                            Paquetes Pendientes (${pendientes.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${pendientes.map(p => {
                            const llegada = new Date(p.fechaRecepcion);
                            return `
                                <div class="border-2 border-blue-200 bg-blue-50 rounded-lg p-4">
                                    <div class="flex items-start justify-between mb-3">
                                        <div class="flex items-center gap-3">
                                            <div class="bg-blue-100 p-3 rounded-lg">
                                                <i class="fas fa-box text-blue-600 text-2xl"></i>
                                            </div>
                                            <div>
                                                <h4 class="font-bold text-lg text-gray-900">${p.descripcion}</h4>
                                                <p class="text-sm text-gray-600">
                                                    <i class="fas fa-user mr-1"></i>Para: ${p.nombreResidente}
                                                </p>
                                            </div>
                                        </div>
                                        <span class="bg-green-600 text-white px-3 py-1 rounded-full text-xs font-bold">
                                            <i class="fas fa-bell mr-1"></i>NUEVO
                                        </span>
                                    </div>
                                    <div class="grid grid-cols-2 gap-3">
                                        <div class="bg-white p-3 rounded-lg">
                                            <p class="text-xs text-gray-600 mb-1">
                                                <i class="fas fa-truck mr-1"></i>Empresa
                                            </p>
                                            <p class="font-semibold text-gray-900">${p.empresa}</p>
                                        </div>
                                        <div class="bg-white p-3 rounded-lg">
                                            <p class="text-xs text-gray-600 mb-1">
                                                <i class="fas fa-calendar mr-1"></i>Llegada
                                            </p>
                                            <p class="font-semibold text-gray-900">
                                                ${llegada.toLocaleDateString('es-CO')}
                                            </p>
                                        </div>
                                    </div>
                                    <p class="text-xs text-gray-500 mt-2">
                                        <i class="fas fa-user-shield mr-1"></i>Recibido por: ${p.recibidoPor}
                                    </p>
                                    <div class="mt-3 bg-blue-100 border border-blue-200 rounded-lg p-3 text-sm text-blue-800">
                                        <i class="fas fa-info-circle mr-2"></i>
                                        Este paquete está disponible en portería para ser retirado
                                    </div>
                                    <button onclick="retirarMiPaquete(${p.id})"
                                            class="mt-3 w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-semibold">
                                        <i class="fas fa-check mr-2"></i>Confirmar Retiro
                                    </button>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            ` : ''}

            ${retirados.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-history mr-2 text-gray-600"></i>
                            Historial de Paquetes (${retirados.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-3">
                        ${retirados.map(p => {
                            const retiro = new Date(p.fechaEntrega);
                            return `
                                <div class="border border-gray-200 bg-gray-50 rounded-lg p-4 flex justify-between items-center">
                                    <div>
                                        <h4 class="font-semibold text-gray-900">${p.descripcion}</h4>
                                        <p class="text-sm text-gray-600">
                                            Retirado el ${retiro.toLocaleDateString('es-CO')} por ${p.entregadoA}
                                        </p>
                                    </div>
                                    <span class="bg-gray-600 text-white px-3 py-1 rounded text-xs">
                                        <i class="fas fa-check mr-1"></i>Entregado
                                    </span>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('mis-paquetes-container').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar los paquetes</p>
            </div>
        `;
    }
}

async function retirarMiPaquete(id) {
    try {
        const response = await fetchWithAuth(`/api/paquetes/${id}/entregar`, {
            method: 'PUT'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Paquete retirado exitosamente', 'success');
            loadPaquetes();
        } else {
            showNotification(data.mensaje || 'Error al retirar paquete', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al retirar paquete', 'error');
    }
}

function loadPaquetesAdmin() {
    loadPaquetesVigilante(); // Admin puede ver y gestionar lo mismo que el vigilante
}

// ============= MÓDULO DE DOCUMENTOS =============

function loadDocumentosResidente() {
    const content = document.getElementById('content-area');

    content.innerHTML = `
        <div class="max-w-5xl mx-auto">
            <h1 class="text-3xl font-bold text-blue-700 mb-6">
                <i class="fas fa-file-alt mr-2"></i>Documentos del Conjunto
            </h1>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Reglamento Interno -->
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-200">
                    <div class="flex items-center mb-4">
                        <div class="bg-blue-100 p-3 rounded-lg">
                            <i class="fas fa-file-contract text-blue-600 text-2xl"></i>
                        </div>
                        <h3 class="ml-3 text-lg font-semibold text-gray-800">Reglamento Interno</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">
                        Normas y reglamentos del conjunto residencial Aralia de Castilla
                    </p>
                    <button onclick="descargarDocumento('reglamento')" class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-download mr-2"></i>Descargar PDF
                    </button>
                </div>

                <!-- Manual de Convivencia -->
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-200">
                    <div class="flex items-center mb-4">
                        <div class="bg-green-100 p-3 rounded-lg">
                            <i class="fas fa-book text-green-600 text-2xl"></i>
                        </div>
                        <h3 class="ml-3 text-lg font-semibold text-gray-800">Manual de Convivencia</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">
                        Guía de buenas prácticas entre residentes - Actualizado 2025
                    </p>
                    <button onclick="descargarDocumento('manual')" class="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700">
                        <i class="fas fa-download mr-2"></i>Descargar PDF
                    </button>
                </div>

                <!-- Certificado de Paz y Salvo -->
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-200">
                    <div class="flex items-center mb-4">
                        <div class="bg-purple-100 p-3 rounded-lg">
                            <i class="fas fa-certificate text-purple-600 text-2xl"></i>
                        </div>
                        <h3 class="ml-3 text-lg font-semibold text-gray-800">Paz y Salvo</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">
                        Solicitar certificado de paz y salvo
                    </p>
                    <button onclick="showNotification('Solicitud enviada', 'success')"
                            class="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700">
                        <i class="fas fa-file-invoice mr-2"></i>Solicitar
                    </button>
                </div>

                <!-- Actas de Asamblea -->
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-200">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 p-3 rounded-lg">
                            <i class="fas fa-clipboard-list text-yellow-600 text-2xl"></i>
                        </div>
                        <h3 class="ml-3 text-lg font-semibold text-gray-800">Actas de Asamblea</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">
                        Historial de asambleas realizadas
                    </p>
                    <button class="w-full bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700">
                        <i class="fas fa-eye mr-2"></i>Ver Actas
                    </button>
                </div>

                <!-- Estados Financieros -->
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-200">
                    <div class="flex items-center mb-4">
                        <div class="bg-red-100 p-3 rounded-lg">
                            <i class="fas fa-chart-line text-red-600 text-2xl"></i>
                        </div>
                        <h3 class="ml-3 text-lg font-semibold text-gray-800">Estados Financieros</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">
                        Informes financieros del conjunto - Actualizado 2025
                    </p>
                    <button onclick="descargarDocumento('estados-financieros')" class="w-full bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700">
                        <i class="fas fa-download mr-2"></i>Descargar PDF
                    </button>
                </div>

                <!-- Planos y Esquemas -->
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition duration-200">
                    <div class="flex items-center mb-4">
                        <div class="bg-indigo-100 p-3 rounded-lg">
                            <i class="fas fa-drafting-compass text-indigo-600 text-2xl"></i>
                        </div>
                        <h3 class="ml-3 text-lg font-semibold text-gray-800">Planos</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">
                        Planos arquitectónicos del conjunto
                    </p>
                    <button class="w-full bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700">
                        <i class="fas fa-download mr-2"></i>Descargar
                    </button>
                </div>
            </div>

            <!-- Información Adicional -->
            <div class="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
                <h3 class="font-semibold text-blue-900 mb-2">
                    <i class="fas fa-info-circle mr-2"></i>Información Importante
                </h3>
                <p class="text-blue-800 text-sm">
                    Todos los documentos están disponibles para consulta de los residentes.
                    Si necesitas una copia física o tienes dudas sobre algún documento,
                    comunícate con la administración.
                </p>
            </div>
        </div>
    `;
}

// Función para descargar documentos
function descargarDocumento(tipo) {
    let contenido = '';
    let nombreArchivo = '';

    if (tipo === 'reglamento') {
        nombreArchivo = 'Reglamento_Interno_Aralia_de_Castilla.pdf';
        contenido = `
            REGLAMENTO INTERNO
            CONJUNTO RESIDENCIAL ARALIA DE CASTILLA

            CAPÍTULO I - DISPOSICIONES GENERALES

            Artículo 1. El presente reglamento tiene como objetivo establecer las normas de convivencia
            y uso de áreas comunes del Conjunto Residencial Aralia de Castilla.

            Artículo 2. Todos los residentes, propietarios, arrendatarios y visitantes están obligados
            a cumplir las disposiciones establecidas en este reglamento.

            CAPÍTULO II - HORARIOS Y USO DE ÁREAS COMUNES

            Artículo 3. Horarios de zonas comunes:
            - Piscina: 6:00 AM - 10:00 PM
            - Salón Social: 8:00 AM - 11:00 PM (con reserva previa)
            - BBQ/Asadores: 10:00 AM - 10:00 PM (con reserva previa)
            - Gimnasio: 5:00 AM - 11:00 PM
            - Cancha Múltiple: 6:00 AM - 10:00 PM

            Artículo 4. Las reservas de áreas comunes deben realizarse con mínimo 48 horas de anticipación
            a través de la plataforma digital del conjunto.

            CAPÍTULO III - PARQUEADEROS

            Artículo 5. Cada apartamento tiene derecho a un parqueadero asignado. Los parqueaderos
            adicionales se asignan mediante sorteo trimestral.

            Artículo 6. Los visitantes deben registrar sus vehículos en portería. El parqueo de visitantes
            es gratuito las primeras 2 horas. Tarifas posteriores según reglamento.

            CAPÍTULO IV - CONVIVENCIA

            Artículo 7. Se debe respetar el silencio nocturno entre las 10:00 PM y 7:00 AM.

            Artículo 8. No se permite música a alto volumen en áreas comunes después de las 10:00 PM.

            Artículo 9. Las mascotas deben transitar con correa por áreas comunes y sus dueños son
            responsables de recoger sus desechos.

            CAPÍTULO V - SEGURIDAD

            Artículo 10. Todo visitante debe registrarse en portería antes de ingresar al conjunto.

            Artículo 11. Está prohibido permitir el ingreso de personas no autorizadas por las puertas
            peatonales sin previo registro.

            CAPÍTULO VI - SANCIONES

            Artículo 12. El incumplimiento de este reglamento será sancionado según la gravedad:
            - Primera vez: Amonestación verbal
            - Segunda vez: Amonestación escrita
            - Tercera vez: Multa según asamblea general

            Vigente desde: Enero 2025
        `;
    } else if (tipo === 'manual') {
        nombreArchivo = 'Manual_Convivencia_Aralia_de_Castilla.pdf';
        contenido = `
            MANUAL DE CONVIVENCIA
            CONJUNTO RESIDENCIAL ARALIA DE CASTILLA
            Actualizado - 2025

            INTRODUCCIÓN

            Este manual tiene como propósito fomentar la sana convivencia entre todos los residentes
            del Conjunto Residencial Aralia de Castilla, promoviendo el respeto, la tolerancia y el
            sentido de comunidad.

            1. PRINCIPIOS DE CONVIVENCIA

            1.1 RESPETO MUTUO
            - Saludar a los vecinos y personal del conjunto
            - Respetar la privacidad de los demás residentes
            - Mantener un trato cordial y amable
            - Resolver conflictos mediante el diálogo

            1.2 RESPONSABILIDAD COMPARTIDA
            - Cuidar las áreas comunes como propias
            - Reportar daños o problemas de mantenimiento
            - Participar en las asambleas y decisiones del conjunto
            - Cumplir con los pagos de administración puntualmente

            2. BUENAS PRÁCTICAS EN ÁREAS COMUNES

            2.1 PISCINA
            - Ducharse antes de ingresar
            - No correr alrededor de la piscina
            - Los niños menores de 12 años deben estar acompañados por un adulto
            - Depositar basuras en los contenedores
            - No ingresar con alimentos o bebidas en recipientes de vidrio

            2.2 SALÓN SOCIAL
            - Dejar el salón limpio después de cada uso
            - Reportar cualquier daño inmediatamente
            - Respetar los horarios de la reserva
            - No exceder el número de personas permitido

            2.3 GIMNASIO
            - Limpiar los equipos después de usar
            - Usar toalla personal
            - Devolver las pesas y elementos a su lugar
            - Usar ropa y calzado deportivo adecuado

            3. CONVIVENCIA EN LOS APARTAMENTOS

            3.1 RUIDO
            - Evitar ruidos molestos, especialmente en horario nocturno (10PM - 7AM)
            - Controlar el volumen de televisores y equipos de sonido
            - Advertir a los vecinos con anticipación si se realizará una reunión social

            3.2 REMODELACIONES
            - Solicitar permiso a la administración antes de iniciar obras
            - Respetar horarios de trabajo: Lunes a Sábado 8AM-6PM
            - Avisar a los vecinos sobre la duración de los trabajos

            4. MASCOTAS

            - Pasear las mascotas con correa en áreas comunes
            - Recoger las deposiciones inmediatamente
            - No dejar mascotas sin supervisión en áreas comunes
            - Controlar ladridos excesivos que molesten a los vecinos

            5. VISITANTES Y SEGURIDAD

            - Informar a portería sobre visitantes esperados
            - No compartir códigos de acceso con personas externas
            - Acompañar a visitantes en áreas comunes
            - Responsabilizarse del comportamiento de los invitados

            6. MANEJO DE BASURAS

            - Sacar las basuras en los horarios establecidos
            - Separar residuos reciclables (papel, plástico, vidrio)
            - Depositar basuras en los contenedores correspondientes
            - No dejar basuras fuera de los contenedores

            7. PARQUEADEROS

            - Estacionar únicamente en el espacio asignado
            - Respetar la velocidad máxima (10 km/h)
            - No lavar vehículos en el parqueadero
            - Reportar vehículos sospechosos a vigilancia

            8. PARTICIPACIÓN COMUNITARIA

            - Asistir a las asambleas generales
            - Participar en comités de trabajo
            - Colaborar en actividades recreativas y sociales
            - Aportar ideas para mejorar la convivencia

            9. CANAL DE COMUNICACIÓN

            - Utilizar los grupos oficiales de chat del conjunto
            - Reportar problemas a través de PQRS
            - Mantener comunicación respetuosa en canales digitales
            - No difundir rumores o información no verificada

            10. MEDIACIÓN DE CONFLICTOS

            Si surge un conflicto con un vecino:
            1. Hablar directamente con la persona involucrada de manera respetuosa
            2. Si no se resuelve, acudir a la administración
            3. Solicitar mediación del comité de convivencia
            4. Como último recurso, llevar el caso a asamblea

            RECUERDA: Un buen vecino hace un mejor conjunto. La convivencia armoniosa
            depende del compromiso y respeto de todos.

            Administración Conjunto Residencial Aralia de Castilla
            Actualizado: Enero 2025
        `;
    } else if (tipo === 'estados-financieros') {
        nombreArchivo = 'Estados_Financieros_Aralia_2025.pdf';
        contenido = `
            ESTADOS FINANCIEROS
            CONJUNTO RESIDENCIAL ARALIA DE CASTILLA
            Período: Enero - Diciembre 2024
            Actualizado: Enero 2025

            BALANCE GENERAL
            Al 31 de Diciembre de 2024

            ACTIVOS
            Activo Corriente:
            - Caja y Bancos                         $45,680,000
            - Cuentas por Cobrar (Administración)   $12,340,000
            - Inversiones Temporales                $25,000,000
            Total Activo Corriente                  $83,020,000

            Activo No Corriente:
            - Zonas Comunes                        $850,000,000
            - Equipos y Muebles                     $45,000,000
            - Depreciación Acumulada               -$15,000,000
            Total Activo No Corriente              $880,000,000

            TOTAL ACTIVOS                          $963,020,000

            PASIVOS
            Pasivo Corriente:
            - Proveedores                           $8,500,000
            - Obligaciones Laborales                $4,200,000
            - Servicios Públicos                    $3,800,000
            Total Pasivo Corriente                 $16,500,000

            PATRIMONIO
            - Fondo de Reserva                     $125,000,000
            - Superávit Acumulado                  $821,520,000
            Total Patrimonio                       $946,520,000

            TOTAL PASIVO + PATRIMONIO              $963,020,000

            ═══════════════════════════════════════════════════════════

            ESTADO DE RESULTADOS
            Año 2024

            INGRESOS
            - Cuotas de Administración             $385,000,000
            - Parqueaderos Visitantes               $12,500,000
            - Arrendamiento Salón Social            $18,600,000
            - Otros Ingresos                         $4,900,000
            Total Ingresos                         $421,000,000

            EGRESOS
            Gastos de Personal:
            - Salarios y Prestaciones              $145,000,000
            - Seguridad                             $68,000,000
            Total Gastos Personal                  $213,000,000

            Gastos de Mantenimiento:
            - Jardinería                            $24,000,000
            - Mantenimiento Piscina                 $15,000,000
            - Mantenimiento General                 $32,000,000
            Total Mantenimiento                     $71,000,000

            Servicios Públicos:
            - Energía                               $45,000,000
            - Agua                                  $28,000,000
            - Aseo                                  $12,000,000
            Total Servicios Públicos                $85,000,000

            Otros Gastos:
            - Seguros                               $18,000,000
            - Gastos Administrativos                $15,000,000
            - Imprevistos                            $8,000,000
            Total Otros Gastos                      $41,000,000

            TOTAL EGRESOS                          $410,000,000

            RESULTADO DEL EJERCICIO                 $11,000,000

            ═══════════════════════════════════════════════════════════

            ANÁLISIS FINANCIERO

            1. LIQUIDEZ
            - Razón Corriente: 5.03 (Excelente)
            - Capital de Trabajo: $66,520,000

            2. CARTERA
            - % Recaudo Administración: 94.5%
            - Apartamentos al día: 142 de 150
            - Apartamentos en mora: 8

            3. GASTOS POR APARTAMENTO (Promedio Mensual)
            - Administración: $185,000
            - Consumos adicionales: Variable

            4. PROYECTOS Y MEJORAS 2024
            - Remodelación Salón Social: $35,000,000
            - Cambio Bombas Piscina: $8,500,000
            - Pintura Fachadas: $42,000,000
            - Mejora Iluminación LED: $12,000,000
            Total Inversiones: $97,500,000

            5. FONDO DE RESERVA
            - Saldo Inicial 2024: $108,000,000
            - Incremento Anual: $17,000,000
            - Saldo Final 2024: $125,000,000

            6. PRESUPUESTO 2025 (Aprobado en Asamblea)

            Ingresos Proyectados: $445,000,000
            - Incremento cuotas: 5%
            - Otros ingresos: $24,000,000

            Gastos Proyectados: $425,000,000
            - Personal: $225,000,000
            - Mantenimiento: $78,000,000
            - Servicios: $92,000,000
            - Otros: $30,000,000

            Superávit Proyectado: $20,000,000

            NOTAS IMPORTANTES:

            1. El conjunto mantiene una situación financiera saludable con liquidez positiva.
            2. Se recomienda continuar con el plan de cobro a morosos.
            3. El fondo de reserva cubre aproximadamente 3.5 meses de gastos corrientes.
            4. Las inversiones realizadas en 2024 mejoraron significativamente las zonas comunes.

            CERTIFICACIÓN

            Certificamos que los estados financieros presentados reflejan razonablemente
            la situación financiera del Conjunto Residencial Aralia de Castilla al 31 de
            Diciembre de 2024.

            _____________________________        _____________________________
            Administrador                        Contador
            C.C. 1234567890                     T.P. 12345-T

            Fecha de emisión: Enero 15, 2025
        `;
    }

    // Crear un blob con el contenido
    const blob = new Blob([contenido], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);

    // Crear elemento de descarga
    const a = document.createElement('a');
    a.href = url;
    a.download = nombreArchivo;
    document.body.appendChild(a);
    a.click();

    // Limpiar
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);

    showNotification(`Descargando ${nombreArchivo}`, 'success');
}

// ============= SISTEMA DE PERMISOS =============

async function loadPermisosResidente() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-id-card text-blue-600 mr-3"></i>
                        Mis Permisos
                    </h2>
                    <p class="text-gray-600 mt-1">Gestiona permisos para visitantes, objetos, trasteos y domicilios</p>
                </div>
                <button onclick="mostrarFormularioPermiso()" class="bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:shadow-lg transition flex items-center gap-2">
                    <i class="fas fa-plus"></i>
                    Solicitar Permiso
                </button>
            </div>

            <!-- Formulario de Solicitud (inicialmente oculto) -->
            <div id="formulario-permiso" class="hidden">
                <div class="bg-white rounded-xl shadow-lg border-2 border-blue-200 p-6 mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">
                            <i class="fas fa-clipboard-list mr-2"></i>
                            Nueva Solicitud de Permiso
                        </h3>
                        <button onclick="ocultarFormularioPermiso()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times text-2xl"></i>
                        </button>
                    </div>

                    <form id="form-nuevo-permiso" class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo de Permiso</label>
                            <select id="tipo-permiso" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required onchange="actualizarCamposPermiso()">
                                <option value="">Seleccione...</option>
                                <option value="visitante">👤 Visitante</option>
                                <option value="trasteo">🚚 Trasteo/Mudanza</option>
                                <option value="domicilio">🛵 Domicilio</option>
                            </select>
                        </div>

                        <div id="campos-dinamicos"></div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Fecha de Ingreso</label>
                                <input type="date" id="fecha-ingreso-permiso" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Hora Estimada</label>
                                <input type="time" id="hora-ingreso-permiso" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                            </div>
                        </div>

                        <div class="flex gap-3">
                            <button type="submit" class="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg hover:shadow-lg transition font-semibold">
                                <i class="fas fa-paper-plane mr-2"></i>
                                Enviar Solicitud
                            </button>
                            <button type="button" onclick="ocultarFormularioPermiso()" class="px-6 bg-gray-200 text-gray-700 py-3 rounded-lg hover:bg-gray-300 transition">
                                Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Listado de Permisos -->
            <div id="permisos-container">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-400 mb-4"></i>
                    <p class="text-gray-600">Cargando permisos...</p>
                </div>
            </div>
        </div>
    `;

    // Manejar envío del formulario
    document.getElementById('form-nuevo-permiso').addEventListener('submit', async (e) => {
        e.preventDefault();

        const tipo = document.getElementById('tipo-permiso').value;
        const fechaIngreso = document.getElementById('fecha-ingreso-permiso').value;
        const horaIngreso = document.getElementById('hora-ingreso-permiso').value;

        const datosPermiso = {
            tipo,
            fechaIngreso,
            horaIngreso
        };

        // Obtener campos dinámicos según el tipo
        if (tipo === 'visitante') {
            datosPermiso.nombre = document.getElementById('nombre-visitante').value;
            datosPermiso.cedula = document.getElementById('cedula-visitante').value;
            datosPermiso.tiempoEstimado = document.getElementById('tiempo-visitante').value;
        } else if (tipo === 'objeto') {
            datosPermiso.descripcion = document.getElementById('descripcion-objeto').value;
            datosPermiso.empresa = document.getElementById('empresa-objeto').value;
        } else if (tipo === 'trasteo') {
            datosPermiso.empresa = document.getElementById('empresa-trasteo').value;
            datosPermiso.placa = document.getElementById('placa-trasteo').value;
            datosPermiso.descripcion = document.getElementById('tipo-trasteo').value;
        } else if (tipo === 'domicilio') {
            datosPermiso.empresa = document.getElementById('empresa-domicilio').value;
            datosPermiso.nombre = document.getElementById('repartidor-domicilio').value;
        }

        try {
            const response = await fetchWithAuth('/api/residente/solicitar-permiso', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(datosPermiso)
            });

            const data = await response.json();

            if (data.success) {
                showNotification('Permiso solicitado exitosamente', 'success');
                ocultarFormularioPermiso();
                document.getElementById('form-nuevo-permiso').reset();
                loadPermisosResidente();
            } else {
                showNotification('Error al solicitar permiso', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error al solicitar permiso', 'error');
        }
    });

    // Cargar permisos existentes
    try {
        const response = await fetchWithAuth('/api/residente/mis-permisos');
        const data = await response.json();

        console.log('[FRONTEND] Data recibida:', data);
        console.log('[FRONTEND] Permisos:', data.permisos);

        const container = document.getElementById('permisos-container');

        if (!data.success || !data.permisos || data.permisos.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-id-card text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay permisos</h3>
                    <p class="text-gray-600">No has solicitado ningún permiso aún</p>
                </div>
            `;
            return;
        }

        // Mostrar todos los permisos en una sola lista
        container.innerHTML = `
            <div class="bg-white rounded-lg shadow-sm border-2 border-blue-200">
                <div class="bg-blue-50 px-6 py-4 border-b border-blue-200">
                    <h3 class="text-xl font-semibold text-blue-900 flex items-center">
                        <i class="fas fa-id-card mr-2"></i>
                        Mis Permisos (${data.permisos.length})
                    </h3>
                </div>
                <div class="p-6 space-y-4">
                    ${data.permisos.map((p, index) => `
                        <div class="border-2 border-gray-200 rounded-lg p-4 hover:shadow-md transition">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <!-- Información del permiso -->
                                <div class="md:col-span-2">
                                    <div class="flex justify-between items-start mb-3">
                                        <div>
                                            <h4 class="font-bold text-lg text-gray-900">${p.nombre || 'Sin nombre'}</h4>
                                            <p class="text-sm text-gray-600">Tipo: ${p.tipo || 'No especificado'}</p>
                                        </div>
                                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${p.vigente ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                                            ${p.vigente ? '✓ Vigente' : '✗ Expirado'}
                                        </span>
                                    </div>
                                    <div class="grid grid-cols-2 gap-3 text-sm">
                                        <div>
                                            <span class="text-gray-500">Fecha ingreso:</span>
                                            <span class="font-medium ml-1">${p.fechaIngreso || 'N/A'}</span>
                                        </div>
                                        <div>
                                            <span class="text-gray-500">Hora:</span>
                                            <span class="font-medium ml-1">${p.horaIngreso || 'N/A'}</span>
                                        </div>
                                        ${p.cedula ? `
                                            <div class="col-span-2">
                                                <span class="text-gray-500">Cédula:</span>
                                                <span class="font-medium ml-1">${p.cedula}</span>
                                            </div>
                                        ` : ''}
                                        ${p.placa ? `
                                            <div class="col-span-2">
                                                <span class="text-gray-500">Placa:</span>
                                                <span class="font-medium ml-1">${p.placa}</span>
                                            </div>
                                        ` : ''}
                                        ${p.descripcion ? `
                                            <div class="col-span-2">
                                                <span class="text-gray-500">Descripción:</span>
                                                <span class="font-medium ml-1">${p.descripcion}</span>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>

                                <!-- Código QR -->
                                <div class="flex flex-col items-center justify-center bg-gray-50 rounded-lg p-4">
                                    <div id="qr-${p.id || index}" class="mb-3"></div>
                                    <button onclick="compartirPermisoQR('${p.id || index}', '${p.nombre}')" class="bg-blue-600 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-700 transition">
                                        <i class="fas fa-share-alt mr-2"></i>Compartir QR
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;

        // Generar códigos QR para cada permiso
        setTimeout(() => {
            data.permisos.forEach((p, index) => {
                const qrContainer = document.getElementById(`qr-${p.id || index}`);
                if (qrContainer) {
                    // Limpiar contenido previo
                    qrContainer.innerHTML = '';

                    // Datos del QR: ID del permiso + información básica
                    const qrData = JSON.stringify({
                        permisoId: p.id,
                        nombre: p.nombre,
                        tipo: p.tipo,
                        fechaIngreso: p.fechaIngreso,
                        horaIngreso: p.horaIngreso,
                        apartamento: currentUser.apartamento
                    });

                    // Generar QR
                    new QRCode(qrContainer, {
                        text: qrData,
                        width: 150,
                        height: 150,
                        colorDark: "#000000",
                        colorLight: "#ffffff",
                        correctLevel: QRCode.CorrectLevel.H
                    });
                }
            });
        }, 100);

    } catch (error) {
        console.error('Error:', error);
        document.getElementById('permisos-container').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar los permisos</p>
            </div>
        `;
    }
}

// Función para compartir el QR del permiso
async function compartirPermisoQR(permisoId, nombre) {
    try {
        const qrContainer = document.getElementById(`qr-${permisoId}`);
        const canvas = qrContainer.querySelector('canvas');

        if (!canvas) {
            showNotification('Error al obtener el código QR', 'error');
            return;
        }

        // Convertir canvas a blob
        canvas.toBlob(async (blob) => {
            const file = new File([blob], `permiso-${nombre}.png`, { type: 'image/png' });

            // Verificar si el navegador soporta la API de compartir
            if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
                try {
                    await navigator.share({
                        title: `Permiso de Ingreso - ${nombre}`,
                        text: `Código QR para permiso de ingreso al Conjunto Aralia de Castilla`,
                        files: [file]
                    });
                    showNotification('QR compartido exitosamente', 'success');
                } catch (shareError) {
                    if (shareError.name !== 'AbortError') {
                        descargarQR(canvas, nombre);
                    }
                }
            } else {
                // Fallback: descargar imagen
                descargarQR(canvas, nombre);
            }
        });
    } catch (error) {
        console.error('Error al compartir QR:', error);
        showNotification('Error al compartir el código QR', 'error');
    }
}

function descargarQR(canvas, nombre) {
    const link = document.createElement('a');
    link.download = `permiso-${nombre}.png`;
    link.href = canvas.toDataURL();
    link.click();
    showNotification('QR descargado exitosamente', 'success');
}

function mostrarFormularioPermiso() {
    document.getElementById('formulario-permiso').classList.remove('hidden');
}

function ocultarFormularioPermiso() {
    document.getElementById('formulario-permiso').classList.add('hidden');
}

function actualizarCamposPermiso() {
    const tipo = document.getElementById('tipo-permiso').value;
    const container = document.getElementById('campos-dinamicos');

    if (!tipo) {
        container.innerHTML = '';
        return;
    }

    let html = '';

    if (tipo === 'visitante') {
        html = `
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Nombre del Visitante</label>
                    <input type="text" id="nombre-visitante" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Cédula</label>
                    <input type="text" id="cedula-visitante" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                </div>
            </div>
            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Tiempo Estimado (horas)</label>
                <input type="number" id="tiempo-visitante" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" placeholder="Ej: 2" min="1" max="24">
            </div>
        `;
    } else if (tipo === 'objeto') {
        html = `
            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Descripción del Objeto</label>
                <textarea id="descripcion-objeto" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" rows="3" required></textarea>
            </div>
            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Empresa/Transportista</label>
                <input type="text" id="empresa-objeto" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" placeholder="Ej: InterRápido, Servientrega">
            </div>
        `;
    } else if (tipo === 'trasteo') {
        html = `
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Empresa de Trasteos</label>
                    <input type="text" id="empresa-trasteo" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Placa del Vehículo</label>
                    <input type="text" id="placa-trasteo" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500">
                </div>
            </div>
            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo de Trasteo</label>
                <select id="tipo-trasteo" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                    <option value="Ingreso de muebles">Ingreso de muebles</option>
                    <option value="Salida de muebles">Salida de muebles</option>
                    <option value="Mudanza completa">Mudanza completa</option>
                </select>
            </div>
        `;
    } else if (tipo === 'domicilio') {
        html = `
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Empresa/Restaurante</label>
                    <input type="text" id="empresa-domicilio" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" placeholder="Ej: Rappi, Uber Eats" required>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Nombre del Repartidor (Opcional)</label>
                    <input type="text" id="repartidor-domicilio" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500">
                </div>
            </div>
        `;
    }

    container.innerHTML = html;
}

function renderPermisoCard(permiso, estado) {
    const tipoIcons = {
        visitante: { icon: 'fa-user', color: 'blue', label: 'Visitante' },
        objeto: { icon: 'fa-box', color: 'purple', label: 'Objeto' },
        trasteo: { icon: 'fa-truck', color: 'orange', label: 'Trasteo' },
        domicilio: { icon: 'fa-motorcycle', color: 'green', label: 'Domicilio' }
    };

    const tipoInfo = tipoIcons[permiso.tipo] || tipoIcons.visitante;
    const fechaIngreso = new Date(permiso.fechaIngreso);
    const fechaSolicitud = new Date(permiso.fechaSolicitud);

    let borderColor = 'border-gray-200';
    let bgColor = 'bg-gray-50';
    let badgeColor = 'bg-gray-500';

    if (estado === 'vigente') {
        borderColor = 'border-green-300';
        bgColor = 'bg-green-50';
        badgeColor = 'bg-green-600';
    } else if (estado === 'ingresado') {
        borderColor = 'border-blue-300';
        bgColor = 'bg-blue-50';
        badgeColor = 'bg-blue-600';
    }

    return `
        <div class="border-2 ${borderColor} ${bgColor} rounded-lg p-4">
            <div class="flex items-start justify-between mb-3">
                <div class="flex items-center gap-3">
                    <div class="bg-${tipoInfo.color}-100 p-3 rounded-lg">
                        <i class="fas ${tipoInfo.icon} text-${tipoInfo.color}-600 text-xl"></i>
                    </div>
                    <div>
                        <h4 class="font-bold text-gray-900">${tipoInfo.label}</h4>
                        <p class="text-sm text-gray-600">ID: #${permiso.id}</p>
                    </div>
                </div>
                <span class="${badgeColor} text-white px-3 py-1 rounded-full text-xs font-bold">
                    ${permiso.estado.toUpperCase()}
                </span>
            </div>

            <div class="space-y-2 text-sm">
                ${permiso.nombre ? `
                    <p class="text-gray-700">
                        <i class="fas fa-user mr-2 text-gray-400"></i>
                        <span class="font-semibold">Nombre:</span> ${permiso.nombre}
                    </p>
                ` : ''}
                ${permiso.cedula ? `
                    <p class="text-gray-700">
                        <i class="fas fa-id-card mr-2 text-gray-400"></i>
                        <span class="font-semibold">Cédula:</span> ${permiso.cedula}
                    </p>
                ` : ''}
                ${permiso.empresa ? `
                    <p class="text-gray-700">
                        <i class="fas fa-building mr-2 text-gray-400"></i>
                        <span class="font-semibold">Empresa:</span> ${permiso.empresa}
                    </p>
                ` : ''}
                ${permiso.placa ? `
                    <p class="text-gray-700">
                        <i class="fas fa-car mr-2 text-gray-400"></i>
                        <span class="font-semibold">Placa:</span> ${permiso.placa}
                    </p>
                ` : ''}
                ${permiso.descripcion ? `
                    <p class="text-gray-700">
                        <i class="fas fa-info-circle mr-2 text-gray-400"></i>
                        <span class="font-semibold">Descripción:</span> ${permiso.descripcion}
                    </p>
                ` : ''}
                <p class="text-gray-700">
                    <i class="fas fa-calendar mr-2 text-gray-400"></i>
                    <span class="font-semibold">Fecha ingreso:</span> ${fechaIngreso.toLocaleDateString('es-CO')} ${permiso.horaIngreso}
                </p>
                ${permiso.horaIngresoReal ? `
                    <p class="text-gray-700">
                        <i class="fas fa-clock mr-2 text-gray-400"></i>
                        <span class="font-semibold">Ingresó:</span> ${new Date(permiso.horaIngresoReal).toLocaleString('es-CO')}
                    </p>
                ` : ''}
                ${permiso.horaSalidaReal ? `
                    <p class="text-gray-700">
                        <i class="fas fa-sign-out-alt mr-2 text-gray-400"></i>
                        <span class="font-semibold">Salió:</span> ${new Date(permiso.horaSalidaReal).toLocaleString('es-CO')}
                    </p>
                ` : ''}
            </div>
        </div>
    `;
}

async function loadPermisosVigilante() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-key text-orange-600 mr-3"></i>
                        Gestión de Permisos
                    </h2>
                    <p class="text-gray-600 mt-1">Control de permisos de ingreso al conjunto</p>
                </div>
                <button onclick="mostrarEscanerQR()" class="bg-gradient-to-r from-orange-600 to-orange-700 text-white px-6 py-3 rounded-lg hover:shadow-lg transition flex items-center gap-2">
                    <i class="fas fa-qrcode"></i>
                    Escanear QR
                </button>
            </div>

            <!-- Filtros -->
            <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
                <div class="grid grid-cols-4 gap-4">
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo</label>
                        <select id="filtro-tipo" class="w-full p-2 border-2 border-gray-300 rounded-lg" onchange="filtrarPermisos()">
                            <option value="">Todos</option>
                            <option value="visitante">Visitantes</option>
                            <option value="objeto">Objetos</option>
                            <option value="trasteo">Trasteos</option>
                            <option value="domicilio">Domicilios</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Estado</label>
                        <select id="filtro-estado" class="w-full p-2 border-2 border-gray-300 rounded-lg" onchange="filtrarPermisos()">
                            <option value="">Todos</option>
                            <option value="Vigente">Vigentes</option>
                            <option value="Ingresado">Ingresados</option>
                            <option value="Finalizado">Finalizados</option>
                        </select>
                    </div>
                    <div class="col-span-2 flex items-end">
                        <button onclick="loadPermisosVigilante()" class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition">
                            <i class="fas fa-sync mr-2"></i>
                            Actualizar
                        </button>
                    </div>
                </div>
            </div>

            <!-- Listado de Permisos -->
            <div id="permisos-vigilante-container">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-orange-400 mb-4"></i>
                    <p class="text-gray-600">Cargando permisos...</p>
                </div>
            </div>
        </div>
    `;

    cargarPermisosVigilante();
}

async function cargarPermisosVigilante(filtroTipo = '', filtroEstado = '') {
    try {
        let url = '/api/permisos?';
        if (filtroTipo) url += `tipo=${filtroTipo}&`;
        if (filtroEstado) url += `estado=${filtroEstado}`;

        const response = await fetchWithAuth(url);
        const data = await response.json();

        const container = document.getElementById('permisos-vigilante-container');

        if (!data.success || data.permisos.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-clipboard-list text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay permisos</h3>
                    <p class="text-gray-600">No hay permisos que coincidan con los filtros</p>
                </div>
            `;
            return;
        }

        // Agrupar por estado
        const vigentes = data.permisos.filter(p => p.estado === 'Vigente');
        const ingresados = data.permisos.filter(p => p.estado === 'Ingresado');
        const finalizados = data.permisos.filter(p => p.estado === 'Finalizado');

        container.innerHTML = `
            ${vigentes.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-green-200 mb-6">
                    <div class="bg-green-50 px-6 py-4 border-b border-green-200">
                        <h3 class="text-xl font-semibold text-green-900 flex items-center">
                            <i class="fas fa-check-circle mr-2"></i>
                            Permisos Vigentes (${vigentes.length})
                        </h3>
                    </div>
                    <div class="p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        ${vigentes.map(p => renderPermisoVigilanteCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${ingresados.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-blue-200 mb-6">
                    <div class="bg-blue-50 px-6 py-4 border-b border-blue-200">
                        <h3 class="text-xl font-semibold text-blue-900 flex items-center">
                            <i class="fas fa-door-open mr-2"></i>
                            Actualmente en el Conjunto (${ingresados.length})
                        </h3>
                    </div>
                    <div class="p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        ${ingresados.map(p => renderPermisoVigilanteCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${finalizados.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-gray-200">
                    <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                        <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-history mr-2"></i>
                            Historial Reciente (${finalizados.length})
                        </h3>
                    </div>
                    <div class="p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        ${finalizados.slice(0, 9).map(p => renderPermisoVigilanteCard(p)).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('permisos-vigilante-container').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar los permisos</p>
            </div>
        `;
    }
}

function filtrarPermisos() {
    const tipo = document.getElementById('filtro-tipo').value;
    const estado = document.getElementById('filtro-estado').value;
    cargarPermisosVigilante(tipo, estado);
}

function renderPermisoVigilanteCard(permiso) {
    const tipoIcons = {
        visitante: { icon: 'fa-user', color: 'blue', label: 'Visitante' },
        objeto: { icon: 'fa-box', color: 'purple', label: 'Objeto' },
        trasteo: { icon: 'fa-truck', color: 'orange', label: 'Trasteo' },
        domicilio: { icon: 'fa-motorcycle', color: 'green', label: 'Domicilio' }
    };

    const tipoInfo = tipoIcons[permiso.tipo] || tipoIcons.visitante;
    const fechaIngreso = new Date(permiso.fechaIngreso);

    let estadoBadge = '';
    if (permiso.estado === 'Vigente') {
        estadoBadge = '<span class="bg-green-600 text-white px-3 py-1 rounded-full text-xs font-bold">VIGENTE</span>';
    } else if (permiso.estado === 'Ingresado') {
        estadoBadge = '<span class="bg-blue-600 text-white px-3 py-1 rounded-full text-xs font-bold">EN CONJUNTO</span>';
    } else {
        estadoBadge = '<span class="bg-gray-600 text-white px-3 py-1 rounded-full text-xs font-bold">FINALIZADO</span>';
    }

    return `
        <div class="border-2 border-gray-200 bg-white rounded-lg p-4 hover:shadow-lg transition">
            <div class="flex items-start justify-between mb-3">
                <div class="flex items-center gap-3">
                    <div class="bg-${tipoInfo.color}-100 p-3 rounded-lg">
                        <i class="fas ${tipoInfo.icon} text-${tipoInfo.color}-600 text-xl"></i>
                    </div>
                    <div>
                        <h4 class="font-bold text-gray-900">${tipoInfo.label}</h4>
                        <p class="text-sm text-gray-600">ID: #${permiso.id}</p>
                    </div>
                </div>
                ${estadoBadge}
            </div>

            <div class="space-y-2 text-sm mb-4">
                <p class="text-gray-700">
                    <i class="fas fa-home mr-2 text-gray-400"></i>
                    <span class="font-semibold">${permiso.apartamento}</span>
                </p>
                ${permiso.nombre ? `
                    <p class="text-gray-700">
                        <i class="fas fa-user mr-2 text-gray-400"></i>
                        ${permiso.nombre}
                    </p>
                ` : ''}
                ${permiso.cedula ? `
                    <p class="text-gray-700">
                        <i class="fas fa-id-card mr-2 text-gray-400"></i>
                        ${permiso.cedula}
                    </p>
                ` : ''}
                ${permiso.empresa ? `
                    <p class="text-gray-700">
                        <i class="fas fa-building mr-2 text-gray-400"></i>
                        ${permiso.empresa}
                    </p>
                ` : ''}
                ${permiso.placa ? `
                    <p class="text-gray-700">
                        <i class="fas fa-car mr-2 text-gray-400"></i>
                        ${permiso.placa}
                    </p>
                ` : ''}
                <p class="text-gray-700">
                    <i class="fas fa-calendar mr-2 text-gray-400"></i>
                    ${fechaIngreso.toLocaleDateString('es-CO')} ${permiso.horaIngreso}
                </p>
            </div>

            ${permiso.estado === 'Vigente' ? `
                <button onclick="registrarIngresoPermiso(${permiso.id})" class="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition font-semibold">
                    <i class="fas fa-sign-in-alt mr-2"></i>
                    Registrar Ingreso
                </button>
            ` : permiso.estado === 'Ingresado' ? `
                <button onclick="registrarSalidaPermiso(${permiso.id})" class="w-full bg-orange-600 text-white py-2 rounded-lg hover:bg-orange-700 transition font-semibold">
                    <i class="fas fa-sign-out-alt mr-2"></i>
                    Registrar Salida
                </button>
            ` : `
                <div class="text-center text-sm text-gray-600">
                    ${permiso.horaSalidaReal ? `
                        Salió: ${new Date(permiso.horaSalidaReal).toLocaleString('es-CO')}
                    ` : 'Finalizado'}
                </div>
            `}
        </div>
    `;
}

async function registrarIngresoPermiso(id) {
    if (!confirm('¿Confirmar ingreso de esta persona/vehículo?')) return;

    try {
        const response = await fetchWithAuth(`/api/permisos/${id}/ingresar`, {
            method: 'PUT'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Ingreso registrado exitosamente', 'success');
            filtrarPermisos();
        } else {
            showNotification('Error al registrar ingreso', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al registrar ingreso', 'error');
    }
}

async function registrarSalidaPermiso(id) {
    if (!confirm('¿Confirmar salida de esta persona/vehículo?')) return;

    try {
        const response = await fetchWithAuth(`/api/permisos/${id}/salir`, {
            method: 'PUT'
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Salida registrada exitosamente', 'success');
            filtrarPermisos();
        } else {
            showNotification('Error al registrar salida', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al registrar salida', 'error');
    }
}

// Escáner QR para vigilantes
function mostrarEscanerQR() {
    const modal = document.createElement('div');
    modal.id = 'modal-escaner-qr';
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75';
    modal.innerHTML = `
        <div class="bg-white rounded-xl shadow-2xl w-11/12 max-w-2xl p-6">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-2xl font-bold text-gray-900">
                    <i class="fas fa-qrcode text-orange-600 mr-2"></i>
                    Escanear QR de Permiso
                </h3>
                <button onclick="cerrarEscanerQR()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>

            <div class="space-y-4">
                <p class="text-gray-600">Ingresa manualmente el código del permiso o pega los datos del QR:</p>

                <textarea id="input-qr-data" rows="6" placeholder='Pega aquí los datos del QR escaneado o ingresa el ID del permiso...'
                    class="w-full p-4 border-2 border-gray-300 rounded-lg focus:border-orange-500 font-mono text-sm"></textarea>

                <div class="flex gap-3">
                    <button onclick="procesarQRPermiso()" class="flex-1 bg-orange-600 text-white py-3 rounded-lg hover:bg-orange-700 font-semibold">
                        <i class="fas fa-check-circle mr-2"></i>
                        Confirmar Ingreso
                    </button>
                    <button onclick="cerrarEscanerQR()" class="px-6 bg-gray-200 text-gray-700 py-3 rounded-lg hover:bg-gray-300">
                        Cancelar
                    </button>
                </div>
            </div>

            <div id="resultado-qr" class="mt-4"></div>
        </div>
    `;

    document.body.appendChild(modal);
    document.getElementById('input-qr-data').focus();
}

function cerrarEscanerQR() {
    const modal = document.getElementById('modal-escaner-qr');
    if (modal) {
        modal.remove();
    }
}

async function procesarQRPermiso() {
    const inputData = document.getElementById('input-qr-data').value.trim();
    const resultadoDiv = document.getElementById('resultado-qr');

    if (!inputData) {
        resultadoDiv.innerHTML = `
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <p class="text-yellow-800">Por favor ingresa los datos del QR</p>
            </div>
        `;
        return;
    }

    try {
        // Intentar parsear como JSON (datos completos del QR)
        let permisoData;
        try {
            permisoData = JSON.parse(inputData);
        } catch {
            // Si no es JSON, asumir que es solo el ID
            permisoData = { permisoId: inputData };
        }

        resultadoDiv.innerHTML = `
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p class="text-blue-800"><i class="fas fa-spinner fa-spin mr-2"></i>Verificando permiso...</p>
            </div>
        `;

        // Confirmar ingreso con el backend
        const response = await fetchWithAuth(`/api/permisos/${permisoData.permisoId}/confirmar-ingreso`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                escanedoPor: currentUser.nombre,
                fechaEscaneo: new Date().toISOString()
            })
        });

        const data = await response.json();

        if (data.success) {
            resultadoDiv.innerHTML = `
                <div class="bg-green-50 border-2 border-green-500 rounded-lg p-6">
                    <div class="flex items-start gap-4">
                        <div class="bg-green-500 rounded-full p-3">
                            <i class="fas fa-check text-white text-2xl"></i>
                        </div>
                        <div class="flex-1">
                            <h4 class="font-bold text-xl text-green-900 mb-2">¡Ingreso Confirmado!</h4>
                            ${permisoData.nombre ? `<p class="text-green-800"><strong>Visitante:</strong> ${permisoData.nombre}</p>` : ''}
                            ${permisoData.tipo ? `<p class="text-green-800"><strong>Tipo:</strong> ${permisoData.tipo}</p>` : ''}
                            ${permisoData.apartamento ? `<p class="text-green-800"><strong>Apartamento:</strong> ${permisoData.apartamento}</p>` : ''}
                            <p class="text-green-700 text-sm mt-2">Hora: ${new Date().toLocaleTimeString('es-CO')}</p>
                        </div>
                    </div>
                </div>
            `;

            showNotification('Ingreso confirmado exitosamente', 'success');

            // Cerrar modal después de 3 segundos
            setTimeout(() => {
                cerrarEscanerQR();
                loadPermisosVigilante(); // Recargar lista
            }, 3000);

        } else {
            resultadoDiv.innerHTML = `
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <p class="text-red-800"><i class="fas fa-times-circle mr-2"></i>${data.mensaje || 'Error al confirmar ingreso'}</p>
                </div>
            `;
        }

    } catch (error) {
        console.error('Error:', error);
        resultadoDiv.innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                <p class="text-red-800"><i class="fas fa-exclamation-triangle mr-2"></i>Error al procesar el QR. Verifica los datos.</p>
            </div>
        `;
    }
}

function loadPermisosAdmin() {
    loadPermisosVigilante(); // Admin tiene la misma vista que vigilante
}

// ============= SISTEMA DE PQRS =============

async function loadPQRSResidente() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-exclamation-triangle text-blue-600 mr-3"></i>
                        PQRS
                    </h2>
                    <p class="text-gray-600 mt-1">Peticiones, Quejas, Reclamos y Sugerencias</p>
                </div>
                <button onclick="mostrarFormularioPQRS()" class="bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:shadow-lg transition flex items-center gap-2">
                    <i class="fas fa-plus"></i>
                    Nueva PQRS
                </button>
            </div>

            <!-- Formulario de Nueva PQRS (inicialmente oculto) -->
            <div id="formulario-pqrs" class="hidden">
                <div class="bg-white rounded-xl shadow-lg border-2 border-blue-200 p-6 mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">
                            <i class="fas fa-edit mr-2"></i>
                            Nueva Solicitud
                        </h3>
                        <button onclick="ocultarFormularioPQRS()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times text-2xl"></i>
                        </button>
                    </div>

                    <form id="form-nueva-pqrs" class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo</label>
                            <select id="tipo-pqrs" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" required>
                                <option value="">Seleccione...</option>
                                <option value="Petición">📝 Petición</option>
                                <option value="Queja">😟 Queja</option>
                                <option value="Reclamo">⚠️ Reclamo</option>
                                <option value="Sugerencia">💡 Sugerencia</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Asunto</label>
                            <input type="text" id="asunto-pqrs" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" placeholder="Breve resumen del asunto" required>
                        </div>

                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Descripción Detallada</label>
                            <textarea id="descripcion-pqrs" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500" rows="5" placeholder="Describa en detalle su petición, queja, reclamo o sugerencia..." required></textarea>
                        </div>

                        <div class="flex gap-3">
                            <button type="submit" class="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg hover:shadow-lg transition font-semibold">
                                <i class="fas fa-paper-plane mr-2"></i>
                                Enviar PQRS
                            </button>
                            <button type="button" onclick="ocultarFormularioPQRS()" class="px-6 bg-gray-200 text-gray-700 py-3 rounded-lg hover:bg-gray-300 transition">
                                Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Listado de PQRS -->
            <div id="pqrs-container">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-blue-400 mb-4"></i>
                    <p class="text-gray-600">Cargando PQRS...</p>
                </div>
            </div>
        </div>
    `;

    // Manejar envío del formulario
    document.getElementById('form-nueva-pqrs').addEventListener('submit', async (e) => {
        e.preventDefault();

        const tipo = document.getElementById('tipo-pqrs').value;
        const asunto = document.getElementById('asunto-pqrs').value;
        const descripcion = document.getElementById('descripcion-pqrs').value;

        try {
            const response = await fetchWithAuth('/api/pqrs', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ tipo, asunto, descripcion })
            });

            const data = await response.json();

            if (data.success) {
                showNotification('PQRS enviada exitosamente', 'success');
                ocultarFormularioPQRS();
                document.getElementById('form-nueva-pqrs').reset();
                loadPQRSResidente();
            } else {
                showNotification('Error al enviar PQRS', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error al enviar PQRS', 'error');
        }
    });

    // Cargar PQRS existentes
    try {
        const response = await fetchWithAuth('/api/pqrs');
        const data = await response.json();

        console.log('[FRONTEND PQRS] Data recibida:', data);

        const container = document.getElementById('pqrs-container');

        // Manejar diferentes formatos de respuesta
        let pqrs = [];
        if (Array.isArray(data)) {
            pqrs = data;
        } else if (data.success && Array.isArray(data.pqrs)) {
            pqrs = data.pqrs;
        } else if (data.pqrs) {
            pqrs = data.pqrs;
        }

        console.log('[FRONTEND PQRS] PQRS procesadas:', pqrs);

        if (!pqrs || pqrs.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-clipboard-list text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay PQRS</h3>
                    <p class="text-gray-600">No se han registrado PQRS aún</p>
                </div>
            `;
            return;
        }

        // Agrupar por estado
        const pendientes = pqrs.filter(p => p.estado === 'Pendiente');
        const enProceso = pqrs.filter(p => p.estado === 'En proceso');
        const respondidas = pqrs.filter(p => p.estado === 'Respondida');
        const resueltas = pqrs.filter(p => p.estado === 'Resuelta');

        container.innerHTML = `
            ${pendientes.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-yellow-200 mb-6">
                    <div class="bg-yellow-50 px-6 py-4 border-b border-yellow-200">
                        <h3 class="text-xl font-semibold text-yellow-900 flex items-center">
                            <i class="fas fa-clock mr-2"></i>
                            Pendientes (${pendientes.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${pendientes.map(p => renderPQRSCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${enProceso.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-blue-200 mb-6">
                    <div class="bg-blue-50 px-6 py-4 border-b border-blue-200">
                        <h3 class="text-xl font-semibold text-blue-900 flex items-center">
                            <i class="fas fa-hourglass-half mr-2"></i>
                            En Proceso (${enProceso.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${enProceso.map(p => renderPQRSCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${respondidas.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-green-200 mb-6">
                    <div class="bg-green-50 px-6 py-4 border-b border-green-200">
                        <h3 class="text-xl font-semibold text-green-900 flex items-center">
                            <i class="fas fa-check-circle mr-2"></i>
                            Respondidas (${respondidas.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${respondidas.map(p => renderPQRSCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${resueltas.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-gray-200">
                    <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                        <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-check-double mr-2"></i>
                            Resueltas (${resueltas.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${resueltas.slice(0, 5).map(p => renderPQRSCard(p)).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('pqrs-container').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar las PQRS</p>
            </div>
        `;
    }
}

function mostrarFormularioPQRS() {
    document.getElementById('formulario-pqrs').classList.remove('hidden');
}

function ocultarFormularioPQRS() {
    document.getElementById('formulario-pqrs').classList.add('hidden');
}

function renderPQRSCard(pqr) {
    const tipoIcons = {
        'Petición': { icon: 'fa-file-alt', color: 'blue' },
        'Queja': { icon: 'fa-frown', color: 'orange' },
        'Reclamo': { icon: 'fa-exclamation-circle', color: 'red' },
        'Sugerencia': { icon: 'fa-lightbulb', color: 'yellow' }
    };

    const tipoInfo = tipoIcons[pqr.tipo] || tipoIcons['Petición'];
    const fecha = new Date(pqr.fecha);

    let estadoBadge = '';
    if (pqr.estado === 'Pendiente') {
        estadoBadge = '<span class="bg-yellow-500 text-white px-3 py-1 rounded-full text-xs font-bold">PENDIENTE</span>';
    } else if (pqr.estado === 'En proceso') {
        estadoBadge = '<span class="bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold">EN PROCESO</span>';
    } else if (pqr.estado === 'Respondida') {
        estadoBadge = '<span class="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-bold">RESPONDIDA</span>';
    } else {
        estadoBadge = '<span class="bg-gray-500 text-white px-3 py-1 rounded-full text-xs font-bold">RESUELTA</span>';
    }

    return `
        <div class="border-2 border-gray-200 bg-white rounded-lg p-6 hover:shadow-lg transition">
            <div class="flex items-start justify-between mb-4">
                <div class="flex items-center gap-3">
                    <div class="bg-${tipoInfo.color}-100 p-3 rounded-lg">
                        <i class="fas ${tipoInfo.icon} text-${tipoInfo.color}-600 text-2xl"></i>
                    </div>
                    <div>
                        <h4 class="font-bold text-lg text-gray-900">${pqr.asunto}</h4>
                        <p class="text-sm text-gray-600">
                            <i class="fas fa-tag mr-1"></i>${pqr.tipo} - ID: #${pqr.id}
                        </p>
                    </div>
                </div>
                ${estadoBadge}
            </div>

            <div class="mb-4">
                <p class="text-gray-700 mb-3">${pqr.descripcion}</p>
                <div class="grid grid-cols-2 gap-3 text-sm">
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-user mr-1"></i>Solicitante
                        </p>
                        <p class="font-semibold text-gray-900">${pqr.residente || 'No especificado'}</p>
                    </div>
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-home mr-1"></i>Apartamento
                        </p>
                        <p class="font-semibold text-gray-900">${pqr.apartamento || 'No especificado'}</p>
                    </div>
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-calendar mr-1"></i>Fecha
                        </p>
                        <p class="font-semibold text-gray-900">${fecha.toLocaleDateString('es-CO')}</p>
                    </div>
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-info-circle mr-1"></i>Estado
                        </p>
                        <p class="font-semibold text-gray-900">${pqr.estado}</p>
                    </div>
                </div>
            </div>

            ${pqr.respuesta ? `
                <div class="bg-green-50 border-2 border-green-200 rounded-lg p-4">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="fas fa-reply text-green-600"></i>
                        <h5 class="font-bold text-green-900">Respuesta de la Administración</h5>
                    </div>
                    <p class="text-gray-700 mb-2">${pqr.respuesta}</p>
                    <div class="text-sm text-gray-600">
                        <i class="fas fa-user mr-1"></i>Respondido por: ${pqr.respondidoPor || 'Administración'}
                        <span class="mx-2">•</span>
                        <i class="fas fa-clock mr-1"></i>${new Date(pqr.fechaRespuesta).toLocaleDateString('es-CO')}
                    </div>
                </div>
            ` : ''}
        </div>
    `;
}

async function loadPQRSAdmin() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-clipboard-list text-green-600 mr-3"></i>
                        Gestión de PQRS
                    </h2>
                    <p class="text-gray-600 mt-1">Administrar todas las PQRS del conjunto</p>
                </div>
            </div>

            <!-- Filtros -->
            <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
                <div class="grid grid-cols-4 gap-4">
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo</label>
                        <select id="filtro-tipo-pqrs" class="w-full p-2 border-2 border-gray-300 rounded-lg" onchange="filtrarPQRS()">
                            <option value="">Todos</option>
                            <option value="Petición">Peticiones</option>
                            <option value="Queja">Quejas</option>
                            <option value="Reclamo">Reclamos</option>
                            <option value="Sugerencia">Sugerencias</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Estado</label>
                        <select id="filtro-estado-pqrs" class="w-full p-2 border-2 border-gray-300 rounded-lg" onchange="filtrarPQRS()">
                            <option value="">Todos</option>
                            <option value="Pendiente">Pendientes</option>
                            <option value="En proceso">En Proceso</option>
                            <option value="Respondida">Respondidas</option>
                            <option value="Resuelta">Resueltas</option>
                        </select>
                    </div>
                    <div class="col-span-2 flex items-end">
                        <button onclick="loadPQRSAdmin()" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition">
                            <i class="fas fa-sync mr-2"></i>
                            Actualizar
                        </button>
                    </div>
                </div>
            </div>

            <!-- Listado de PQRS -->
            <div id="pqrs-admin-container">
                <div class="text-center py-12">
                    <i class="fas fa-spinner fa-spin text-4xl text-green-400 mb-4"></i>
                    <p class="text-gray-600">Cargando PQRS...</p>
                </div>
            </div>
        </div>
    `;

    cargarPQRSAdmin();
}

async function cargarPQRSAdmin(filtroTipo = '', filtroEstado = '') {
    try {
        const response = await fetch('/api/pqrs');
        let pqrs = await response.json();

        // Aplicar filtros
        if (filtroTipo) {
            pqrs = pqrs.filter(p => p.tipo === filtroTipo);
        }
        if (filtroEstado) {
            pqrs = pqrs.filter(p => p.estado === filtroEstado);
        }

        const container = document.getElementById('pqrs-admin-container');

        if (!pqrs || pqrs.length === 0) {
            container.innerHTML = `
                <div class="bg-white rounded-xl p-12 text-center border-2 border-dashed border-gray-300">
                    <i class="fas fa-clipboard-list text-6xl text-gray-300 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No hay PQRS</h3>
                    <p class="text-gray-600">No hay PQRS que coincidan con los filtros</p>
                </div>
            `;
            return;
        }

        // Agrupar por estado
        const pendientes = pqrs.filter(p => p.estado === 'Pendiente');
        const enProceso = pqrs.filter(p => p.estado === 'En proceso');
        const respondidas = pqrs.filter(p => p.estado === 'Respondida');
        const resueltas = pqrs.filter(p => p.estado === 'Resuelta');

        container.innerHTML = `
            ${pendientes.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-yellow-200 mb-6">
                    <div class="bg-yellow-50 px-6 py-4 border-b border-yellow-200">
                        <h3 class="text-xl font-semibold text-yellow-900 flex items-center">
                            <i class="fas fa-clock mr-2"></i>
                            Pendientes (${pendientes.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${pendientes.map(p => renderPQRSAdminCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${enProceso.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-blue-200 mb-6">
                    <div class="bg-blue-50 px-6 py-4 border-b border-blue-200">
                        <h3 class="text-xl font-semibold text-blue-900 flex items-center">
                            <i class="fas fa-hourglass-half mr-2"></i>
                            En Proceso (${enProceso.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${enProceso.map(p => renderPQRSAdminCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${respondidas.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-green-200 mb-6">
                    <div class="bg-green-50 px-6 py-4 border-b border-green-200">
                        <h3 class="text-xl font-semibold text-green-900 flex items-center">
                            <i class="fas fa-check-circle mr-2"></i>
                            Respondidas (${respondidas.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${respondidas.map(p => renderPQRSAdminCard(p)).join('')}
                    </div>
                </div>
            ` : ''}

            ${resueltas.length > 0 ? `
                <div class="bg-white rounded-lg shadow-sm border-2 border-gray-200">
                    <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                        <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-check-double mr-2"></i>
                            Resueltas (${resueltas.length})
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        ${resueltas.map(p => renderPQRSAdminCard(p)).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('pqrs-admin-container').innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-3"></i>
                <p class="text-red-800">Error al cargar las PQRS</p>
            </div>
        `;
    }
}

function filtrarPQRS() {
    const tipo = document.getElementById('filtro-tipo-pqrs').value;
    const estado = document.getElementById('filtro-estado-pqrs').value;
    cargarPQRSAdmin(tipo, estado);
}

function renderPQRSAdminCard(pqr) {
    const tipoIcons = {
        'Petición': { icon: 'fa-file-alt', color: 'blue' },
        'Queja': { icon: 'fa-frown', color: 'orange' },
        'Reclamo': { icon: 'fa-exclamation-circle', color: 'red' },
        'Sugerencia': { icon: 'fa-lightbulb', color: 'yellow' }
    };

    const tipoInfo = tipoIcons[pqr.tipo] || tipoIcons['Petición'];
    const fecha = new Date(pqr.fecha);

    let estadoBadge = '';
    if (pqr.estado === 'Pendiente') {
        estadoBadge = '<span class="bg-yellow-500 text-white px-3 py-1 rounded-full text-xs font-bold">PENDIENTE</span>';
    } else if (pqr.estado === 'En proceso') {
        estadoBadge = '<span class="bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold">EN PROCESO</span>';
    } else if (pqr.estado === 'Respondida') {
        estadoBadge = '<span class="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-bold">RESPONDIDA</span>';
    } else {
        estadoBadge = '<span class="bg-gray-500 text-white px-3 py-1 rounded-full text-xs font-bold">RESUELTA</span>';
    }

    return `
        <div class="border-2 border-gray-200 bg-white rounded-lg p-6">
            <div class="flex items-start justify-between mb-4">
                <div class="flex items-center gap-3">
                    <div class="bg-${tipoInfo.color}-100 p-3 rounded-lg">
                        <i class="fas ${tipoInfo.icon} text-${tipoInfo.color}-600 text-2xl"></i>
                    </div>
                    <div>
                        <h4 class="font-bold text-lg text-gray-900">${pqr.asunto}</h4>
                        <p class="text-sm text-gray-600">
                            <i class="fas fa-tag mr-1"></i>${pqr.tipo} - ID: #${pqr.id}
                        </p>
                    </div>
                </div>
                ${estadoBadge}
            </div>

            <div class="mb-4">
                <p class="text-gray-700 mb-3">${pqr.descripcion}</p>
                <div class="grid grid-cols-3 gap-3 text-sm">
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-user mr-1"></i>Residente
                        </p>
                        <p class="font-semibold text-gray-900">${pqr.residente || 'No especificado'}</p>
                    </div>
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-home mr-1"></i>Apartamento
                        </p>
                        <p class="font-semibold text-gray-900">${pqr.apartamento || 'No especificado'}</p>
                    </div>
                    <div class="bg-gray-50 p-3 rounded-lg">
                        <p class="text-gray-600 mb-1">
                            <i class="fas fa-calendar mr-1"></i>Fecha
                        </p>
                        <p class="font-semibold text-gray-900">${fecha.toLocaleDateString('es-CO')}</p>
                    </div>
                </div>
            </div>

            ${pqr.respuesta ? `
                <div class="bg-green-50 border-2 border-green-200 rounded-lg p-4 mb-4">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="fas fa-reply text-green-600"></i>
                        <h5 class="font-bold text-green-900">Respuesta Enviada</h5>
                    </div>
                    <p class="text-gray-700 mb-2">${pqr.respuesta}</p>
                    <div class="text-sm text-gray-600">
                        <i class="fas fa-user mr-1"></i>${pqr.respondidoPor}
                        <span class="mx-2">•</span>
                        <i class="fas fa-clock mr-1"></i>${new Date(pqr.fechaRespuesta).toLocaleDateString('es-CO')}
                    </div>
                </div>
            ` : ''}

            <div class="flex gap-3">
                ${!pqr.respuesta ? `
                    <button onclick="mostrarFormularioRespuesta(${pqr.id})" class="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition font-semibold">
                        <i class="fas fa-reply mr-2"></i>
                        Responder
                    </button>
                ` : ''}
                ${pqr.estado !== 'Resuelta' ? `
                    <button onclick="cambiarEstadoPQRS(${pqr.id}, 'En proceso')" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition">
                        <i class="fas fa-hourglass-half mr-2"></i>
                        En Proceso
                    </button>
                    <button onclick="cambiarEstadoPQRS(${pqr.id}, 'Resuelta')" class="bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700 transition">
                        <i class="fas fa-check-double mr-2"></i>
                        Resolver
                    </button>
                ` : ''}
            </div>

            <!-- Formulario de respuesta (oculto inicialmente) -->
            <div id="form-respuesta-${pqr.id}" class="hidden mt-4">
                <div class="bg-blue-50 border-2 border-blue-200 rounded-lg p-4">
                    <h5 class="font-bold text-blue-900 mb-3">
                        <i class="fas fa-edit mr-2"></i>
                        Escribir Respuesta
                    </h5>
                    <textarea id="respuesta-texto-${pqr.id}" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 mb-3" rows="4" placeholder="Escriba su respuesta..."></textarea>
                    <div class="flex gap-3">
                        <button onclick="enviarRespuestaPQRS(${pqr.id})" class="bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition font-semibold">
                            <i class="fas fa-paper-plane mr-2"></i>
                            Enviar Respuesta
                        </button>
                        <button onclick="ocultarFormularioRespuesta(${pqr.id})" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-300 transition">
                            Cancelar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function mostrarFormularioRespuesta(id) {
    document.getElementById(`form-respuesta-${id}`).classList.remove('hidden');
}

function ocultarFormularioRespuesta(id) {
    document.getElementById(`form-respuesta-${id}`).classList.add('hidden');
}

async function enviarRespuestaPQRS(id) {
    const respuesta = document.getElementById(`respuesta-texto-${id}`).value.trim();

    if (!respuesta) {
        showNotification('Por favor escriba una respuesta', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth(`/api/pqrs/${id}/responder`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ respuesta })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Respuesta enviada exitosamente', 'success');
            filtrarPQRS();
        } else {
            showNotification('Error al enviar respuesta', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al enviar respuesta', 'error');
    }
}

async function cambiarEstadoPQRS(id, nuevoEstado) {
    try {
        const response = await fetchWithAuth(`/api/pqrs/${id}/estado`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ estado: nuevoEstado })
        });

        const data = await response.json();

        if (data.success) {
            showNotification(`Estado cambiado a: ${nuevoEstado}`, 'success');
            filtrarPQRS();
        } else {
            showNotification('Error al cambiar estado', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al cambiar estado', 'error');
    }
}

// ============= JUEGOS MULTIJUGADOR =============

function loadJuegosComunitarios() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-gamepad text-blue-600 mr-3"></i>
                        Juegos Comunitarios
                    </h2>
                    <p class="text-gray-600 mt-1">Diviértete y compite con tus vecinos</p>
                </div>
            </div>

            <!-- Grid de Juegos -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Tres en Raya -->
                <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white cursor-pointer hover:shadow-2xl transition transform hover:scale-105"
                    onclick="iniciarJuegoTresEnRaya()">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold">Tres en Raya</h3>
                        <i class="fas fa-hashtag text-4xl opacity-75"></i>
                    </div>
                    <p class="text-blue-100 mb-4">Juega contra otro residente en el clásico juego de estrategia</p>
                    <div class="flex items-center justify-between">
                        <span class="bg-blue-700 px-3 py-1 rounded-full text-sm">2 Jugadores</span>
                        <span class="text-sm opacity-75">🎮 Juego Rápido</span>
                    </div>
                </div>

                <!-- Memoria -->
                <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white cursor-pointer hover:shadow-2xl transition transform hover:scale-105"
                    onclick="iniciarJuegoMemoria()">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold">Memoria</h3>
                        <i class="fas fa-brain text-4xl opacity-75"></i>
                    </div>
                    <p class="text-purple-100 mb-4">Pon a prueba tu memoria encontrando las parejas</p>
                    <div class="flex items-center justify-between">
                        <span class="bg-purple-700 px-3 py-1 rounded-full text-sm">Individual</span>
                        <span class="text-sm opacity-75">🧠 Mental</span>
                    </div>
                </div>

                <!-- Adivina el Número -->
                <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white cursor-pointer hover:shadow-2xl transition transform hover:scale-105"
                    onclick="iniciarJuegoNumero()">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold">Adivina el Número</h3>
                        <i class="fas fa-dice text-4xl opacity-75"></i>
                    </div>
                    <p class="text-green-100 mb-4">Adivina el número secreto con las pistas</p>
                    <div class="flex items-center justify-between">
                        <span class="bg-green-700 px-3 py-1 rounded-full text-sm">Individual</span>
                        <span class="text-sm opacity-75">🎲 Lógica</span>
                    </div>
                </div>

                <!-- Trivia Comunitaria -->
                <div class="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg p-6 text-white cursor-pointer hover:shadow-2xl transition transform hover:scale-105"
                    onclick="iniciarJuegoTrivia()">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold">Trivia</h3>
                        <i class="fas fa-question-circle text-4xl opacity-75"></i>
                    </div>
                    <p class="text-orange-100 mb-4">Responde preguntas de cultura general</p>
                    <div class="flex items-center justify-between">
                        <span class="bg-orange-700 px-3 py-1 rounded-full text-sm">Individual</span>
                        <span class="text-sm opacity-75">📚 Conocimiento</span>
                    </div>
                </div>

                <!-- Snake -->
                <div class="bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg p-6 text-white cursor-pointer hover:shadow-2xl transition transform hover:scale-105"
                    onclick="iniciarJuegoSnake()">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold">Snake</h3>
                        <i class="fas fa-forward text-4xl opacity-75"></i>
                    </div>
                    <p class="text-red-100 mb-4">El clásico juego de la serpiente</p>
                    <div class="flex items-center justify-between">
                        <span class="bg-red-700 px-3 py-1 rounded-full text-sm">Individual</span>
                        <span class="text-sm opacity-75">🐍 Arcade</span>
                    </div>
                </div>

                <!-- Puzzle -->
                <div class="bg-gradient-to-br from-pink-500 to-pink-600 rounded-xl shadow-lg p-6 text-white cursor-pointer hover:shadow-2xl transition transform hover:scale-105"
                    onclick="iniciarJuegoPuzzle()">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold">Puzzle Deslizante</h3>
                        <i class="fas fa-puzzle-piece text-4xl opacity-75"></i>
                    </div>
                    <p class="text-pink-100 mb-4">Ordena las piezas del puzzle</p>
                    <div class="flex items-center justify-between">
                        <span class="bg-pink-700 px-3 py-1 rounded-full text-sm">Individual</span>
                        <span class="text-sm opacity-75">🧩 Estrategia</span>
                    </div>
                </div>
            </div>

            <!-- Tablero de Puntuaciones -->
            <div class="bg-white rounded-xl shadow-lg border-2 border-gray-200 p-6">
                <h3 class="text-2xl font-bold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-trophy text-yellow-500 mr-3"></i>
                    Mejores Puntuaciones
                </h3>
                <div id="tablero-puntuaciones">
                    <div class="text-center py-8 text-gray-500">
                        <i class="fas fa-star text-4xl mb-3"></i>
                        <p>¡Juega y aparece aquí!</p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// JUEGO: TRES EN RAYA
function iniciarJuegoTresEnRaya() {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-xl shadow-2xl w-11/12 max-w-lg">
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-6 rounded-t-xl flex items-center justify-between">
                <h3 class="text-2xl font-bold flex items-center">
                    <i class="fas fa-hashtag mr-3"></i>
                    Tres en Raya
                </h3>
                <button onclick="this.closest('.fixed').remove()" class="text-white hover:text-gray-200">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="text-center mb-4">
                    <p class="text-lg font-semibold">Turno: <span id="turno-jugador" class="text-blue-600">X</span></p>
                </div>
                <div id="tablero-tres-en-raya" class="grid grid-cols-3 gap-2 max-w-xs mx-auto">
                    ${Array(9).fill(0).map((_, i) => `
                        <button onclick="moverTresEnRaya(${i})" id="celda-${i}"
                            class="bg-gray-100 border-2 border-gray-300 h-24 text-4xl font-bold rounded-lg hover:bg-blue-50 transition">
                        </button>
                    `).join('')}
                </div>
                <div id="resultado-tres-raya" class="mt-4 text-center font-bold text-xl"></div>
                <button onclick="reiniciarTresEnRaya()" class="mt-4 w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition font-semibold">
                    <i class="fas fa-redo mr-2"></i>
                    Nueva Partida
                </button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    window.tableroTresRaya = Array(9).fill('');
    window.turnoActual = 'X';
    window.juegoTerminado = false;
}

function moverTresEnRaya(pos) {
    if (window.juegoTerminado || window.tableroTresRaya[pos]) return;

    window.tableroTresRaya[pos] = window.turnoActual;
    document.getElementById(`celda-${pos}`).textContent = window.turnoActual;
    document.getElementById(`celda-${pos}`).className = `bg-${window.turnoActual === 'X' ? 'blue' : 'red'}-100 border-2 border-gray-300 h-24 text-4xl font-bold rounded-lg`;

    if (verificarGanador()) {
        document.getElementById('resultado-tres-raya').innerHTML = `<span class="text-green-600">¡Ganó ${window.turnoActual}!</span>`;
        window.juegoTerminado = true;
        return;
    }

    if (!window.tableroTresRaya.includes('')) {
        document.getElementById('resultado-tres-raya').innerHTML = '<span class="text-yellow-600">¡Empate!</span>';
        window.juegoTerminado = true;
        return;
    }

    window.turnoActual = window.turnoActual === 'X' ? 'O' : 'X';
    document.getElementById('turno-jugador').textContent = window.turnoActual;
}

function verificarGanador() {
    const lineas = [
        [0,1,2], [3,4,5], [6,7,8], // Horizontales
        [0,3,6], [1,4,7], [2,5,8], // Verticales
        [0,4,8], [2,4,6]           // Diagonales
    ];

    return lineas.some(linea => {
        const [a, b, c] = linea;
        return window.tableroTresRaya[a] &&
               window.tableroTresRaya[a] === window.tableroTresRaya[b] &&
               window.tableroTresRaya[a] === window.tableroTresRaya[c];
    });
}

function reiniciarTresEnRaya() {
    window.tableroTresRaya = Array(9).fill('');
    window.turnoActual = 'X';
    window.juegoTerminado = false;
    document.getElementById('turno-jugador').textContent = 'X';
    document.getElementById('resultado-tres-raya').innerHTML = '';

    for (let i = 0; i < 9; i++) {
        const celda = document.getElementById(`celda-${i}`);
        celda.textContent = '';
        celda.className = 'bg-gray-100 border-2 border-gray-300 h-24 text-4xl font-bold rounded-lg hover:bg-blue-50 transition';
    }
}

// JUEGO: MEMORIA
function iniciarJuegoMemoria() {
    const iconos = ['🍎', '🍊', '🍋', '🍌', '🍇', '🍓', '🍑', '🍒'];
    const cartas = [...iconos, ...iconos].sort(() => Math.random() - 0.5);

    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-xl shadow-2xl w-11/12 max-w-2xl">
            <div class="bg-gradient-to-r from-purple-600 to-purple-700 text-white p-6 rounded-t-xl flex items-center justify-between">
                <div>
                    <h3 class="text-2xl font-bold flex items-center">
                        <i class="fas fa-brain mr-3"></i>
                        Juego de Memoria
                    </h3>
                    <p class="text-sm mt-1">Movimientos: <span id="movimientos">0</span></p>
                </div>
                <button onclick="this.closest('.fixed').remove()" class="text-white hover:text-gray-200">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            <div class="p-6">
                <div id="tablero-memoria" class="grid grid-cols-4 gap-3">
                    ${cartas.map((icono, i) => `
                        <button onclick="voltearCarta(${i})" id="carta-${i}"
                            class="bg-purple-600 h-24 text-4xl rounded-lg hover:bg-purple-700 transition transform hover:scale-105"
                            data-icono="${icono}">
                            ?
                        </button>
                    `).join('')}
                </div>
                <div id="resultado-memoria" class="mt-4 text-center font-bold text-xl"></div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    window.cartasVolteadas = [];
    window.parejasEncontradas = 0;
    window.movimientos = 0;
}

function voltearCarta(index) {
    if (window.cartasVolteadas.length >= 2) return;

    const carta = document.getElementById(`carta-${index}`);
    if (carta.classList.contains('volteada')) return;

    const icono = carta.getAttribute('data-icono');
    carta.textContent = icono;
    carta.classList.add('volteada', 'bg-white', 'text-purple-600');
    window.cartasVolteadas.push({ index, icono });

    if (window.cartasVolteadas.length === 2) {
        window.movimientos++;
        document.getElementById('movimientos').textContent = window.movimientos;

        setTimeout(() => {
            const [carta1, carta2] = window.cartasVolteadas;

            if (carta1.icono === carta2.icono) {
                window.parejasEncontradas++;
                if (window.parejasEncontradas === 8) {
                    document.getElementById('resultado-memoria').innerHTML = `
                        <span class="text-green-600">¡Felicidades! Completado en ${window.movimientos} movimientos</span>
                    `;
                }
            } else {
                document.getElementById(`carta-${carta1.index}`).textContent = '?';
                document.getElementById(`carta-${carta1.index}`).classList.remove('volteada', 'bg-white', 'text-purple-600');
                document.getElementById(`carta-${carta2.index}`).textContent = '?';
                document.getElementById(`carta-${carta2.index}`).classList.remove('volteada', 'bg-white', 'text-purple-600');
            }

            window.cartasVolteadas = [];
        }, 1000);
    }
}

// JUEGO: ADIVINA EL NÚMERO
function iniciarJuegoNumero() {
    const numeroSecreto = Math.floor(Math.random() * 100) + 1;
    let intentos = 0;

    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-xl shadow-2xl w-11/12 max-w-md">
            <div class="bg-gradient-to-r from-green-600 to-green-700 text-white p-6 rounded-t-xl flex items-center justify-between">
                <h3 class="text-2xl font-bold flex items-center">
                    <i class="fas fa-dice mr-3"></i>
                    Adivina el Número
                </h3>
                <button onclick="this.closest('.fixed').remove()" class="text-white hover:text-gray-200">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            <div class="p-6">
                <p class="text-center text-lg mb-4">Adivina el número entre 1 y 100</p>
                <p class="text-center text-sm text-gray-600 mb-4">Intentos: <span id="intentos">0</span></p>
                <input type="number" id="numero-guess" min="1" max="100"
                    class="w-full p-3 border-2 border-gray-300 rounded-lg mb-4 text-center text-2xl font-bold"
                    placeholder="?">
                <button onclick="adivinarNumero(${numeroSecreto})"
                    class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition font-semibold mb-4">
                    <i class="fas fa-check mr-2"></i>
                    Adivinar
                </button>
                <div id="pista-numero" class="text-center text-lg font-semibold"></div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    window.intentosNumero = 0;
}

function adivinarNumero(secreto) {
    const guess = parseInt(document.getElementById('numero-guess').value);
    if (!guess) return;

    window.intentosNumero++;
    document.getElementById('intentos').textContent = window.intentosNumero;

    const pista = document.getElementById('pista-numero');

    if (guess === secreto) {
        pista.innerHTML = `<span class="text-green-600">¡Correcto! Lo adivinaste en ${window.intentosNumero} intentos 🎉</span>`;
        document.getElementById('numero-guess').disabled = true;
    } else if (guess < secreto) {
        pista.innerHTML = '<span class="text-blue-600">⬆️ Más alto</span>';
    } else {
        pista.innerHTML = '<span class="text-red-600">⬇️ Más bajo</span>';
    }

    document.getElementById('numero-guess').value = '';
}

// JUEGO: TRIVIA
function iniciarJuegoTrivia() {
    const preguntas = [
        { pregunta: '¿Cuál es la capital de Francia?', respuestas: ['París', 'Londres', 'Madrid', 'Roma'], correcta: 0 },
        { pregunta: '¿En qué año llegó el hombre a la Luna?', respuestas: ['1969', '1965', '1972', '1968'], correcta: 0 },
        { pregunta: '¿Cuál es el océano más grande?', respuestas: ['Pacífico', 'Atlántico', 'Índico', 'Ártico'], correcta: 0 },
        { pregunta: '¿Quién pintó la Mona Lisa?', respuestas: ['Leonardo da Vinci', 'Picasso', 'Van Gogh', 'Monet'], correcta: 0 },
        { pregunta: '¿Cuántos continentes hay?', respuestas: ['7', '5', '6', '8'], correcta: 0 }
    ];

    let preguntaActual = 0;
    let puntos = 0;

    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-xl shadow-2xl w-11/12 max-w-2xl">
            <div class="bg-gradient-to-r from-orange-600 to-orange-700 text-white p-6 rounded-t-xl flex items-center justify-between">
                <div>
                    <h3 class="text-2xl font-bold flex items-center">
                        <i class="fas fa-question-circle mr-3"></i>
                        Trivia
                    </h3>
                    <p class="text-sm mt-1">Puntos: <span id="puntos-trivia">0</span></p>
                </div>
                <button onclick="this.closest('.fixed').remove()" class="text-white hover:text-gray-200">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            <div class="p-6" id="contenedor-trivia"></div>
        </div>
    `;
    document.body.appendChild(modal);

    window.preguntasTrivia = preguntas;
    window.preguntaActualTrivia = 0;
    window.puntosTrivia = 0;

    mostrarPreguntaTrivia();
}

function mostrarPreguntaTrivia() {
    if (window.preguntaActualTrivia >= window.preguntasTrivia.length) {
        document.getElementById('contenedor-trivia').innerHTML = `
            <div class="text-center py-8">
                <i class="fas fa-trophy text-yellow-500 text-6xl mb-4"></i>
                <h3 class="text-3xl font-bold text-gray-900 mb-2">¡Juego Terminado!</h3>
                <p class="text-xl text-gray-700">Puntuación final: ${window.puntosTrivia}/${window.preguntasTrivia.length}</p>
            </div>
        `;
        return;
    }

    const pregunta = window.preguntasTrivia[window.preguntaActualTrivia];

    document.getElementById('contenedor-trivia').innerHTML = `
        <div class="mb-6">
            <p class="text-sm text-gray-600 mb-2">Pregunta ${window.preguntaActualTrivia + 1} de ${window.preguntasTrivia.length}</p>
            <h4 class="text-xl font-bold text-gray-900 mb-4">${pregunta.pregunta}</h4>
            <div class="space-y-3">
                ${pregunta.respuestas.map((resp, i) => `
                    <button onclick="responderTrivia(${i})"
                        class="w-full text-left p-4 border-2 border-gray-300 rounded-lg hover:border-orange-500 hover:bg-orange-50 transition">
                        ${resp}
                    </button>
                `).join('')}
            </div>
        </div>
    `;
}

function responderTrivia(respuesta) {
    const pregunta = window.preguntasTrivia[window.preguntaActualTrivia];

    if (respuesta === pregunta.correcta) {
        window.puntosTrivia++;
        document.getElementById('puntos-trivia').textContent = window.puntosTrivia;
        showNotification('¡Correcto!', 'success');
    } else {
        showNotification('Incorrecto', 'error');
    }

    window.preguntaActualTrivia++;
    setTimeout(mostrarPreguntaTrivia, 500);
}

// JUEGO: SNAKE
function iniciarJuegoSnake() {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
        <div class="bg-white rounded-xl shadow-2xl w-11/12 max-w-lg">
            <div class="bg-gradient-to-r from-red-600 to-red-700 text-white p-6 rounded-t-xl flex items-center justify-between">
                <div>
                    <h3 class="text-2xl font-bold flex items-center">
                        <i class="fas fa-forward mr-3"></i>
                        Snake
                    </h3>
                    <p class="text-sm mt-1">Puntos: <span id="puntos-snake">0</span></p>
                </div>
                <button onclick="this.closest('.fixed').remove(); clearInterval(window.snakeInterval)" class="text-white hover:text-gray-200">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>
            <div class="p-6">
                <p class="text-center mb-4 text-gray-600">Usa las flechas del teclado para moverte</p>
                <canvas id="canvas-snake" width="400" height="400" class="border-4 border-gray-800 mx-auto bg-green-50"></canvas>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    iniciarSnake();
}

function iniciarSnake() {
    const canvas = document.getElementById('canvas-snake');
    const ctx = canvas.getContext('2d');
    const box = 20;

    let snake = [{ x: 10 * box, y: 10 * box }];
    let direction = 'RIGHT';
    let food = {
        x: Math.floor(Math.random() * 19 + 1) * box,
        y: Math.floor(Math.random() * 19 + 1) * box
    };
    let score = 0;

    document.addEventListener('keydown', cambiarDireccion);

    function cambiarDireccion(event) {
        if (event.keyCode === 37 && direction !== 'RIGHT') direction = 'LEFT';
        else if (event.keyCode === 38 && direction !== 'DOWN') direction = 'UP';
        else if (event.keyCode === 39 && direction !== 'LEFT') direction = 'RIGHT';
        else if (event.keyCode === 40 && direction !== 'UP') direction = 'DOWN';
    }

    function dibujar() {
        ctx.fillStyle = '#f0fdf4';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < snake.length; i++) {
            ctx.fillStyle = i === 0 ? '#dc2626' : '#ef4444';
            ctx.fillRect(snake[i].x, snake[i].y, box, box);
            ctx.strokeStyle = '#fff';
            ctx.strokeRect(snake[i].x, snake[i].y, box, box);
        }

        ctx.fillStyle = '#16a34a';
        ctx.fillRect(food.x, food.y, box, box);

        let snakeX = snake[0].x;
        let snakeY = snake[0].y;

        if (direction === 'LEFT') snakeX -= box;
        if (direction === 'UP') snakeY -= box;
        if (direction === 'RIGHT') snakeX += box;
        if (direction === 'DOWN') snakeY += box;

        if (snakeX === food.x && snakeY === food.y) {
            score++;
            document.getElementById('puntos-snake').textContent = score;
            food = {
                x: Math.floor(Math.random() * 19 + 1) * box,
                y: Math.floor(Math.random() * 19 + 1) * box
            };
        } else {
            snake.pop();
        }

        let newHead = { x: snakeX, y: snakeY };

        if (snakeX < 0 || snakeY < 0 || snakeX >= canvas.width || snakeY >= canvas.height || colision(newHead, snake)) {
            clearInterval(window.snakeInterval);
            alert(`Game Over! Puntos: ${score}`);
            return;
        }

        snake.unshift(newHead);
    }

    function colision(head, array) {
        for (let i = 0; i < array.length; i++) {
            if (head.x === array[i].x && head.y === array[i].y) return true;
        }
        return false;
    }

    window.snakeInterval = setInterval(dibujar, 100);
}

// JUEGO: PUZZLE DESLIZANTE
function iniciarJuegoPuzzle() {
    showNotification('Puzzle próximamente disponible', 'info');
}

// ============= SISTEMA DE CÁMARAS =============

let streamActivo = null;

function loadCamaras() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <div class="p-6 space-y-6">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 flex items-center">
                        <i class="fas fa-video text-blue-600 mr-3"></i>
                        Cámaras de Seguridad
                    </h2>
                    <p class="text-gray-600 mt-1">Visualiza las cámaras del conjunto</p>
                </div>
            </div>

            <!-- Grid de Cámaras -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Cámara Entrada Principal -->
                <div class="bg-white rounded-xl shadow-lg border-2 border-gray-200 overflow-hidden">
                    <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4">
                        <h3 class="text-xl font-bold flex items-center">
                            <i class="fas fa-door-open mr-2"></i>
                            Entrada Principal
                        </h3>
                        <p class="text-sm text-blue-100">En vivo</p>
                    </div>
                    <div class="bg-gray-900 aspect-video flex items-center justify-center">
                        <video id="camera-entrada" autoplay playsinline class="w-full h-full object-cover"></video>
                        <div id="placeholder-entrada" class="absolute text-white text-center">
                            <i class="fas fa-video-slash text-6xl mb-3 opacity-50"></i>
                            <p class="text-lg">Cámara no disponible</p>
                            <button onclick="activarCamara('entrada')" class="mt-4 bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition">
                                <i class="fas fa-play mr-2"></i>
                                Activar Cámara
                            </button>
                        </div>
                    </div>
                    <div class="p-4 bg-gray-50 flex justify-between items-center">
                        <span class="text-sm text-gray-600">
                            <i class="fas fa-clock mr-1"></i>
                            ${new Date().toLocaleTimeString('es-CO')}
                        </span>
                        <button onclick="capturarFoto('entrada')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition text-sm">
                            <i class="fas fa-camera mr-1"></i>
                            Capturar
                        </button>
                    </div>
                </div>

                <!-- Cámara Parqueadero -->
                <div class="bg-white rounded-xl shadow-lg border-2 border-gray-200 overflow-hidden">
                    <div class="bg-gradient-to-r from-purple-600 to-purple-700 text-white p-4">
                        <h3 class="text-xl font-bold flex items-center">
                            <i class="fas fa-parking mr-2"></i>
                            Parqueadero
                        </h3>
                        <p class="text-sm text-purple-100">En vivo</p>
                    </div>
                    <div class="bg-gray-900 aspect-video flex items-center justify-center relative">
                        <video id="camera-parqueadero" autoplay playsinline class="w-full h-full object-cover"></video>
                        <div id="placeholder-parqueadero" class="absolute text-white text-center">
                            <i class="fas fa-video-slash text-6xl mb-3 opacity-50"></i>
                            <p class="text-lg">Cámara no disponible</p>
                            <button onclick="activarCamara('parqueadero')" class="mt-4 bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition">
                                <i class="fas fa-play mr-2"></i>
                                Activar Cámara
                            </button>
                        </div>
                    </div>
                    <div class="p-4 bg-gray-50 flex justify-between items-center">
                        <span class="text-sm text-gray-600">
                            <i class="fas fa-clock mr-1"></i>
                            ${new Date().toLocaleTimeString('es-CO')}
                        </span>
                        <button onclick="capturarFoto('parqueadero')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition text-sm">
                            <i class="fas fa-camera mr-1"></i>
                            Capturar
                        </button>
                    </div>
                </div>

                <!-- Cámara Zonas Comunes -->
                <div class="bg-white rounded-xl shadow-lg border-2 border-gray-200 overflow-hidden">
                    <div class="bg-gradient-to-r from-green-600 to-green-700 text-white p-4">
                        <h3 class="text-xl font-bold flex items-center">
                            <i class="fas fa-tree mr-2"></i>
                            Zonas Comunes
                        </h3>
                        <p class="text-sm text-green-100">En vivo</p>
                    </div>
                    <div class="bg-gray-900 aspect-video flex items-center justify-center relative">
                        <video id="camera-zonas" autoplay playsinline class="w-full h-full object-cover"></video>
                        <div id="placeholder-zonas" class="absolute text-white text-center">
                            <i class="fas fa-video-slash text-6xl mb-3 opacity-50"></i>
                            <p class="text-lg">Cámara no disponible</p>
                            <button onclick="activarCamara('zonas')" class="mt-4 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition">
                                <i class="fas fa-play mr-2"></i>
                                Activar Cámara
                            </button>
                        </div>
                    </div>
                    <div class="p-4 bg-gray-50 flex justify-between items-center">
                        <span class="text-sm text-gray-600">
                            <i class="fas fa-clock mr-1"></i>
                            ${new Date().toLocaleTimeString('es-CO')}
                        </span>
                        <button onclick="capturarFoto('zonas')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition text-sm">
                            <i class="fas fa-camera mr-1"></i>
                            Capturar
                        </button>
                    </div>
                </div>

                <!-- Cámara Piscina -->
                <div class="bg-white rounded-xl shadow-lg border-2 border-gray-200 overflow-hidden">
                    <div class="bg-gradient-to-r from-cyan-600 to-cyan-700 text-white p-4">
                        <h3 class="text-xl font-bold flex items-center">
                            <i class="fas fa-swimming-pool mr-2"></i>
                            Piscina
                        </h3>
                        <p class="text-sm text-cyan-100">En vivo</p>
                    </div>
                    <div class="bg-gray-900 aspect-video flex items-center justify-center relative">
                        <video id="camera-piscina" autoplay playsinline class="w-full h-full object-cover"></video>
                        <div id="placeholder-piscina" class="absolute text-white text-center">
                            <i class="fas fa-video-slash text-6xl mb-3 opacity-50"></i>
                            <p class="text-lg">Cámara no disponible</p>
                            <button onclick="activarCamara('piscina')" class="mt-4 bg-cyan-600 text-white px-6 py-2 rounded-lg hover:bg-cyan-700 transition">
                                <i class="fas fa-play mr-2"></i>
                                Activar Cámara
                            </button>
                        </div>
                    </div>
                    <div class="p-4 bg-gray-50 flex justify-between items-center">
                        <span class="text-sm text-gray-600">
                            <i class="fas fa-clock mr-1"></i>
                            ${new Date().toLocaleTimeString('es-CO')}
                        </span>
                        <button onclick="capturarFoto('piscina')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition text-sm">
                            <i class="fas fa-camera mr-1"></i>
                            Capturar
                        </button>
                    </div>
                </div>
            </div>

            <!-- Capturas Guardadas -->
            <div class="bg-white rounded-xl shadow-lg border-2 border-gray-200 p-6">
                <h3 class="text-2xl font-bold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-images text-blue-600 mr-3"></i>
                    Capturas Guardadas
                </h3>
                <div id="galeria-capturas" class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div class="text-center py-8 col-span-full text-gray-500">
                        <i class="fas fa-camera text-4xl mb-3"></i>
                        <p>No hay capturas guardadas</p>
                    </div>
                </div>
            </div>
        </div>
    `;

    // Ocultar videos y mostrar placeholders inicialmente
    ['entrada', 'parqueadero', 'zonas', 'piscina'].forEach(cam => {
        const video = document.getElementById(`camera-${cam}`);
        const placeholder = document.getElementById(`placeholder-${cam}`);
        if (video) video.style.display = 'none';
        if (placeholder) placeholder.style.display = 'block';
    });
}

async function activarCamara(ubicacion) {
    try {
        // Detener stream anterior si existe
        if (streamActivo) {
            streamActivo.getTracks().forEach(track => track.stop());
        }

        // Solicitar acceso a la cámara
        const stream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                facingMode: 'environment' // Cámara trasera en móviles
            },
            audio: false
        });

        streamActivo = stream;

        const video = document.getElementById(`camera-${ubicacion}`);
        const placeholder = document.getElementById(`placeholder-${ubicacion}`);

        if (video) {
            video.srcObject = stream;
            video.style.display = 'block';
        }

        if (placeholder) {
            placeholder.style.display = 'none';
        }

        showNotification('Cámara activada correctamente', 'success');
    } catch (error) {
        console.error('Error al activar cámara:', error);

        let mensaje = 'No se pudo acceder a la cámara';
        if (error.name === 'NotAllowedError') {
            mensaje = 'Permiso de cámara denegado. Por favor permite el acceso en la configuración del navegador.';
        } else if (error.name === 'NotFoundError') {
            mensaje = 'No se encontró ninguna cámara en este dispositivo.';
        }

        showNotification(mensaje, 'error');
    }
}

function capturarFoto(ubicacion) {
    const video = document.getElementById(`camera-${ubicacion}`);

    if (!video || !video.srcObject) {
        showNotification('Primero activa la cámara', 'warning');
        return;
    }

    // Crear canvas para capturar la imagen
    const canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0);

    // Convertir a imagen
    const imagenData = canvas.toDataURL('image/jpeg', 0.8);

    // Guardar en galería
    agregarCapturaAGaleria(imagenData, ubicacion);

    showNotification('Captura guardada exitosamente', 'success');
}

function agregarCapturaAGaleria(imagenData, ubicacion) {
    const galeria = document.getElementById('galeria-capturas');

    // Limpiar mensaje inicial si existe
    if (galeria.querySelector('.col-span-full')) {
        galeria.innerHTML = '';
    }

    const fecha = new Date();
    const nombreArchivo = `${ubicacion}_${fecha.getTime()}.jpg`;

    const capturaHTML = `
        <div class="relative group">
            <img src="${imagenData}" alt="${ubicacion}" class="w-full h-40 object-cover rounded-lg border-2 border-gray-300">
            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition rounded-lg flex items-center justify-center">
                <div class="opacity-0 group-hover:opacity-100 transition flex gap-2">
                    <button onclick="descargarCaptura('${imagenData}', '${nombreArchivo}')"
                        class="bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-download"></i>
                    </button>
                    <button onclick="this.closest('.relative').remove()"
                        class="bg-red-600 text-white p-2 rounded-lg hover:bg-red-700">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="mt-2 text-xs text-gray-600 text-center">
                <i class="fas fa-clock mr-1"></i>
                ${fecha.toLocaleString('es-CO')}
            </div>
        </div>
    `;

    galeria.insertAdjacentHTML('afterbegin', capturaHTML);
}

function descargarCaptura(imagenData, nombreArchivo) {
    const link = document.createElement('a');
    link.href = imagenData;
    link.download = nombreArchivo;
    link.click();
    showNotification('Imagen descargada', 'success');
}

function loadCamarasAdmin() {
    loadCamaras(); // Admin ve las mismas cámaras
}

function loadCamarasVigilante() {
    loadCamaras(); // Vigilante ve las mismas cámaras
}

// ============= MÓDULO DE INCIDENTES ALCALDÍA =============

async function loadIncidentesAdmin() {
    const content = document.getElementById('content-area');

    content.innerHTML = `
        <div class="max-w-6xl mx-auto">
            <h1 class="text-3xl font-bold text-green-700 mb-6">
                <i class="fas fa-city mr-2"></i>Reportar Incidentes a la Alcaldía
            </h1>

            <!-- Formulario para reportar incidente -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <h2 class="text-xl font-semibold text-green-700 mb-4">
                    <i class="fas fa-plus-circle mr-2"></i>Reportar Nuevo Incidente
                </h2>

                <form id="form-nuevo-incidente" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Tipo de Incidente <span class="text-red-500">*</span>
                            </label>
                            <select id="tipo-incidente" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                                <option value="">Seleccione...</option>
                                <option value="Infraestructura">Infraestructura</option>
                                <option value="Servicios Públicos">Servicios Públicos</option>
                                <option value="Seguridad">Seguridad</option>
                                <option value="Medio Ambiente">Medio Ambiente</option>
                                <option value="Normativa">Normativa</option>
                                <option value="Otro">Otro</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Prioridad <span class="text-red-500">*</span>
                            </label>
                            <select id="prioridad-incidente" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                                <option value="">Seleccione...</option>
                                <option value="Baja">Baja</option>
                                <option value="Media">Media</option>
                                <option value="Alta">Alta</option>
                                <option value="Crítica">Crítica</option>
                            </select>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Título <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="titulo-incidente" required
                               placeholder="Ej: Daño en vía principal"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Ubicación <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="ubicacion-incidente" required
                               placeholder="Ej: Entrada Principal del Conjunto"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Descripción Detallada <span class="text-red-500">*</span>
                        </label>
                        <textarea id="descripcion-incidente" required rows="4"
                                  placeholder="Describa el incidente con el mayor detalle posible..."
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"></textarea>
                    </div>

                    <button type="submit"
                            class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white font-bold py-3 px-6 rounded-lg hover:from-green-700 hover:to-green-800 transition duration-200">
                        <i class="fas fa-paper-plane mr-2"></i>Enviar Reporte a la Alcaldía
                    </button>
                </form>
            </div>

            <!-- Lista de incidentes reportados -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold text-green-700 mb-4">
                    <i class="fas fa-list mr-2"></i>Incidentes Reportados
                </h2>

                <div id="filtros-incidentes" class="mb-4 flex flex-wrap gap-2">
                    <button onclick="filtrarIncidentes('todos')"
                            class="filtro-incidente-btn px-4 py-2 rounded-lg bg-green-600 text-white">
                        Todos
                    </button>
                    <button onclick="filtrarIncidentes('Reportado')"
                            class="filtro-incidente-btn px-4 py-2 rounded-lg bg-gray-200 text-gray-700">
                        Reportados
                    </button>
                    <button onclick="filtrarIncidentes('En atención')"
                            class="filtro-incidente-btn px-4 py-2 rounded-lg bg-gray-200 text-gray-700">
                        En Atención
                    </button>
                    <button onclick="filtrarIncidentes('Resuelto')"
                            class="filtro-incidente-btn px-4 py-2 rounded-lg bg-gray-200 text-gray-700">
                        Resueltos
                    </button>
                </div>

                <div id="lista-incidentes" class="space-y-4">
                    <!-- Se carga dinámicamente -->
                </div>
            </div>
        </div>
    `;

    // Event listener para el formulario
    document.getElementById('form-nuevo-incidente').addEventListener('submit', async (e) => {
        e.preventDefault();

        const datosIncidente = {
            tipo: document.getElementById('tipo-incidente').value,
            titulo: document.getElementById('titulo-incidente').value,
            ubicacion: document.getElementById('ubicacion-incidente').value,
            descripcion: document.getElementById('descripcion-incidente').value,
            prioridad: document.getElementById('prioridad-incidente').value
        };

        try {
            const response = await fetchWithAuth('/api/incidentes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(datosIncidente)
            });

            const data = await response.json();

            if (data.success) {
                showNotification('Incidente reportado a la Alcaldía exitosamente', 'success');
                e.target.reset();
                cargarIncidentes();
            } else {
                showNotification(data.mensaje || 'Error al reportar incidente', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error al reportar incidente', 'error');
        }
    });

    cargarIncidentes();
}

let filtroIncidenteActual = 'todos';

async function cargarIncidentes() {
    try {
        const response = await fetchWithAuth('/api/incidentes');
        const data = await response.json();

        if (data.success) {
            mostrarIncidentes(data.incidentes);
        }
    } catch (error) {
        console.error('Error al cargar incidentes:', error);
    }
}

function filtrarIncidentes(filtro) {
    filtroIncidenteActual = filtro;

    // Actualizar botones
    document.querySelectorAll('.filtro-incidente-btn').forEach(btn => {
        btn.classList.remove('bg-green-600', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
    });
    event.target.classList.remove('bg-gray-200', 'text-gray-700');
    event.target.classList.add('bg-green-600', 'text-white');

    cargarIncidentes();
}

function mostrarIncidentes(incidentes) {
    const lista = document.getElementById('lista-incidentes');

    // Filtrar incidentes
    let incidentesFiltrados = incidentes;
    if (filtroIncidenteActual !== 'todos') {
        incidentesFiltrados = incidentes.filter(i => i.estado === filtroIncidenteActual);
    }

    if (incidentesFiltrados.length === 0) {
        lista.innerHTML = `
            <div class="text-center py-8 text-gray-500">
                <i class="fas fa-inbox text-4xl mb-2"></i>
                <p>No hay incidentes reportados</p>
            </div>
        `;
        return;
    }

    lista.innerHTML = incidentesFiltrados.map(incidente => {
        const fecha = new Date(incidente.fecha);
        const prioridadColor = {
            'Baja': 'bg-blue-100 text-blue-800',
            'Media': 'bg-yellow-100 text-yellow-800',
            'Alta': 'bg-orange-100 text-orange-800',
            'Crítica': 'bg-red-100 text-red-800'
        };
        const estadoColor = {
            'Reportado': 'bg-gray-100 text-gray-800',
            'En atención': 'bg-blue-100 text-blue-800',
            'Resuelto': 'bg-green-100 text-green-800'
        };

        return `
            <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition duration-200">
                <div class="flex justify-between items-start mb-3">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">${incidente.titulo}</h3>
                        <p class="text-sm text-gray-600">
                            <i class="fas fa-map-marker-alt mr-1"></i>${incidente.ubicacion}
                        </p>
                    </div>
                    <div class="flex flex-col gap-2 items-end">
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${prioridadColor[incidente.prioridad]}">
                            ${incidente.prioridad}
                        </span>
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${estadoColor[incidente.estado]}">
                            ${incidente.estado}
                        </span>
                    </div>
                </div>

                <div class="grid grid-cols-2 gap-4 mb-3 text-sm">
                    <div>
                        <span class="text-gray-600">Tipo:</span>
                        <span class="font-medium ml-1">${incidente.tipo}</span>
                    </div>
                    <div>
                        <span class="text-gray-600">Reportado:</span>
                        <span class="font-medium ml-1">${fecha.toLocaleDateString('es-CO')}</span>
                    </div>
                </div>

                <p class="text-gray-700 mb-3">${incidente.descripcion}</p>

                ${incidente.respuestaAlcaldia ? `
                    <div class="mt-4 p-4 bg-blue-50 border-l-4 border-blue-500 rounded">
                        <h4 class="font-semibold text-blue-900 mb-2">
                            <i class="fas fa-reply mr-2"></i>Respuesta de la Alcaldía
                        </h4>
                        <p class="text-blue-800">${incidente.respuestaAlcaldia}</p>
                        <p class="text-xs text-blue-600 mt-2">
                            ${new Date(incidente.fechaRespuesta).toLocaleString('es-CO')}
                        </p>
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');
}

// ============= MÓDULO ALCALDÍA =============

async function loadPanelAlcaldia() {
    const content = document.getElementById('content-area');

    content.innerHTML = `
        <div class="max-w-6xl mx-auto">
            <h1 class="text-3xl font-bold text-purple-700 mb-6">
                <i class="fas fa-landmark mr-2"></i>Panel de la Alcaldía
            </h1>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <!-- Estadísticas -->
                <div class="bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg shadow-md p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-purple-100 text-sm">Total Incidentes</p>
                            <p class="text-3xl font-bold" id="stat-total-incidentes">0</p>
                        </div>
                        <i class="fas fa-exclamation-circle text-4xl text-purple-200"></i>
                    </div>
                </div>

                <div class="bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg shadow-md p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-orange-100 text-sm">Pendientes</p>
                            <p class="text-3xl font-bold" id="stat-pendientes">0</p>
                        </div>
                        <i class="fas fa-clock text-4xl text-orange-200"></i>
                    </div>
                </div>

                <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-lg shadow-md p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-green-100 text-sm">Resueltos</p>
                            <p class="text-3xl font-bold" id="stat-resueltos">0</p>
                        </div>
                        <i class="fas fa-check-circle text-4xl text-green-200"></i>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold text-purple-700 mb-4">
                    <i class="fas fa-info-circle mr-2"></i>Bienvenido al Sistema de Gestión Municipal
                </h2>
                <p class="text-gray-700 mb-4">
                    Este panel le permite gestionar todos los incidentes reportados por los conjuntos residenciales
                    de la zona. Puede revisar, responder y actualizar el estado de cada incidente.
                </p>
                <button onclick="switchTab('incidentes-alcaldia')"
                        class="bg-gradient-to-r from-purple-600 to-purple-700 text-white font-bold py-2 px-6 rounded-lg hover:from-purple-700 hover:to-purple-800 transition duration-200">
                    <i class="fas fa-arrow-right mr-2"></i>Ver Incidentes Reportados
                </button>
            </div>
        </div>
    `;

    // Cargar estadísticas
    cargarEstadisticasAlcaldia();
}

async function cargarEstadisticasAlcaldia() {
    try {
        const response = await fetchWithAuth('/api/incidentes');
        const data = await response.json();

        if (data.success) {
            const incidentes = data.incidentes;
            document.getElementById('stat-total-incidentes').textContent = incidentes.length;
            document.getElementById('stat-pendientes').textContent =
                incidentes.filter(i => i.estado === 'Reportado').length;
            document.getElementById('stat-resueltos').textContent =
                incidentes.filter(i => i.estado === 'Resuelto').length;
        }
    } catch (error) {
        console.error('Error al cargar estadísticas:', error);
    }
}

async function loadIncidentesAlcaldia() {
    const content = document.getElementById('content-area');

    content.innerHTML = `
        <div class="max-w-6xl mx-auto">
            <h1 class="text-3xl font-bold text-purple-700 mb-6">
                <i class="fas fa-exclamation-circle mr-2"></i>Incidentes Reportados
            </h1>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div id="filtros-incidentes-alcaldia" class="mb-4 flex flex-wrap gap-2">
                    <button onclick="filtrarIncidentesAlcaldia('todos')"
                            class="filtro-alcaldia-btn px-4 py-2 rounded-lg bg-purple-600 text-white">
                        Todos
                    </button>
                    <button onclick="filtrarIncidentesAlcaldia('Reportado')"
                            class="filtro-alcaldia-btn px-4 py-2 rounded-lg bg-gray-200 text-gray-700">
                        Reportados
                    </button>
                    <button onclick="filtrarIncidentesAlcaldia('En atención')"
                            class="filtro-alcaldia-btn px-4 py-2 rounded-lg bg-gray-200 text-gray-700">
                        En Atención
                    </button>
                    <button onclick="filtrarIncidentesAlcaldia('Resuelto')"
                            class="filtro-alcaldia-btn px-4 py-2 rounded-lg bg-gray-200 text-gray-700">
                        Resueltos
                    </button>
                </div>

                <div id="lista-incidentes-alcaldia" class="space-y-4">
                    <!-- Se carga dinámicamente -->
                </div>
            </div>
        </div>
    `;

    cargarIncidentesAlcaldia();
}

let filtroAlcaldiaActual = 'todos';

async function cargarIncidentesAlcaldia() {
    try {
        const response = await fetchWithAuth('/api/incidentes');
        const data = await response.json();

        if (data.success) {
            mostrarIncidentesAlcaldia(data.incidentes);
        }
    } catch (error) {
        console.error('Error al cargar incidentes:', error);
    }
}

function filtrarIncidentesAlcaldia(filtro) {
    filtroAlcaldiaActual = filtro;

    // Actualizar botones
    document.querySelectorAll('.filtro-alcaldia-btn').forEach(btn => {
        btn.classList.remove('bg-purple-600', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
    });
    event.target.classList.remove('bg-gray-200', 'text-gray-700');
    event.target.classList.add('bg-purple-600', 'text-white');

    cargarIncidentesAlcaldia();
}

function mostrarIncidentesAlcaldia(incidentes) {
    const lista = document.getElementById('lista-incidentes-alcaldia');

    // Filtrar incidentes
    let incidentesFiltrados = incidentes;
    if (filtroAlcaldiaActual !== 'todos') {
        incidentesFiltrados = incidentes.filter(i => i.estado === filtroAlcaldiaActual);
    }

    if (incidentesFiltrados.length === 0) {
        lista.innerHTML = `
            <div class="text-center py-8 text-gray-500">
                <i class="fas fa-inbox text-4xl mb-2"></i>
                <p>No hay incidentes ${filtroAlcaldiaActual !== 'todos' ? filtroAlcaldiaActual.toLowerCase() + 's' : ''}</p>
            </div>
        `;
        return;
    }

    lista.innerHTML = incidentesFiltrados.map(incidente => {
        const fecha = new Date(incidente.fecha);
        const prioridadColor = {
            'Baja': 'bg-blue-100 text-blue-800',
            'Media': 'bg-yellow-100 text-yellow-800',
            'Alta': 'bg-orange-100 text-orange-800',
            'Crítica': 'bg-red-100 text-red-800'
        };
        const estadoColor = {
            'Reportado': 'bg-gray-100 text-gray-800',
            'En atención': 'bg-blue-100 text-blue-800',
            'Resuelto': 'bg-green-100 text-green-800'
        };

        return `
            <div class="border border-gray-200 rounded-lg p-6 hover:shadow-md transition duration-200">
                <div class="flex justify-between items-start mb-3">
                    <div>
                        <h3 class="text-xl font-semibold text-gray-800">${incidente.titulo}</h3>
                        <p class="text-sm text-gray-600">
                            <i class="fas fa-map-marker-alt mr-1"></i>${incidente.ubicacion}
                        </p>
                    </div>
                    <div class="flex flex-col gap-2 items-end">
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${prioridadColor[incidente.prioridad]}">
                            ${incidente.prioridad}
                        </span>
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${estadoColor[incidente.estado]}">
                            ${incidente.estado}
                        </span>
                    </div>
                </div>

                <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-3 text-sm">
                    <div>
                        <span class="text-gray-600">Tipo:</span>
                        <span class="font-medium ml-1">${incidente.tipo}</span>
                    </div>
                    <div>
                        <span class="text-gray-600">Reportado por:</span>
                        <span class="font-medium ml-1">${incidente.reportadoPor}</span>
                    </div>
                    <div>
                        <span class="text-gray-600">Fecha:</span>
                        <span class="font-medium ml-1">${fecha.toLocaleDateString('es-CO')}</span>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg mb-4">
                    <h4 class="font-semibold text-gray-700 mb-2">Descripción:</h4>
                    <p class="text-gray-700">${incidente.descripcion}</p>
                </div>

                ${incidente.respuestaAlcaldia ? `
                    <div class="p-4 bg-purple-50 border-l-4 border-purple-500 rounded mb-4">
                        <h4 class="font-semibold text-purple-900 mb-2">
                            <i class="fas fa-reply mr-2"></i>Su Respuesta
                        </h4>
                        <p class="text-purple-800">${incidente.respuestaAlcaldia}</p>
                        <p class="text-xs text-purple-600 mt-2">
                            ${new Date(incidente.fechaRespuesta).toLocaleString('es-CO')}
                        </p>
                    </div>
                ` : ''}

                <div class="flex gap-2 mt-4">
                    ${!incidente.respuestaAlcaldia ? `
                        <button onclick="mostrarFormularioRespuesta(${incidente.id})"
                                class="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition duration-200">
                            <i class="fas fa-reply mr-2"></i>Responder
                        </button>
                    ` : ''}

                    ${incidente.estado !== 'Resuelto' ? `
                        <button onclick="cambiarEstadoIncidente(${incidente.id}, 'Resuelto')"
                                class="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition duration-200">
                            <i class="fas fa-check mr-2"></i>Marcar como Resuelto
                        </button>
                    ` : ''}
                </div>

                <!-- Formulario de respuesta (oculto inicialmente) -->
                <div id="form-respuesta-${incidente.id}" class="hidden mt-4">
                    <textarea id="respuesta-texto-${incidente.id}" rows="3"
                              placeholder="Escriba su respuesta..."
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 mb-2"></textarea>
                    <div class="flex gap-2">
                        <button onclick="enviarRespuestaIncidente(${incidente.id})"
                                class="bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition duration-200">
                            <i class="fas fa-paper-plane mr-2"></i>Enviar Respuesta
                        </button>
                        <button onclick="document.getElementById('form-respuesta-${incidente.id}').classList.add('hidden')"
                                class="bg-gray-400 text-white py-2 px-4 rounded-lg hover:bg-gray-500 transition duration-200">
                            Cancelar
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function mostrarFormularioRespuesta(incidenteId) {
    document.getElementById(`form-respuesta-${incidenteId}`).classList.remove('hidden');
}

async function enviarRespuestaIncidente(incidenteId) {
    const respuesta = document.getElementById(`respuesta-texto-${incidenteId}`).value.trim();

    if (!respuesta) {
        showNotification('Por favor escriba una respuesta', 'error');
        return;
    }

    try {
        const response = await fetchWithAuth(`/api/incidentes/${incidenteId}/responder`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ respuesta })
        });

        const data = await response.json();

        if (data.success) {
            showNotification('Respuesta enviada exitosamente', 'success');
            cargarIncidentesAlcaldia();
        } else {
            showNotification(data.mensaje || 'Error al enviar respuesta', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al enviar respuesta', 'error');
    }
}

async function cambiarEstadoIncidente(incidenteId, nuevoEstado) {
    try {
        const response = await fetchWithAuth(`/api/incidentes/${incidenteId}/estado`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ estado: nuevoEstado })
        });

        const data = await response.json();

        if (data.success) {
            showNotification(`Estado actualizado a: ${nuevoEstado}`, 'success');
            cargarIncidentesAlcaldia();
        } else {
            showNotification(data.mensaje || 'Error al actualizar estado', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error al actualizar estado', 'error');
    }
}

</script>

</body>
</html>
